//==========================================================================
// Copyright (C) 2023-2024 CERN
// Licensed under the GNU Lesser General Public License (version 3 or later).
// Written by: Z. Wettersten (Jan 2024) for the MG5aMC CUDACPP plugin.
//==========================================================================
//==========================================================================
// Library including generic functions and classes for event reweighting.
// Process-specific rwgt_runner files are generated by mg5amc@nlo and use
// this library, while the rwgt_driver file is a wrapping program that 
// calls the process-specific runners for given subprocesses.
//==========================================================================

#ifndef _RWGT_INSTANCE_H_
#define _RWGT_INSTANCE_H_

#include "teawREX.h"

namespace rwgt{

    using FORTRANFPTYPE = double;

    //ZW: Function for calculating the number of remaining events in a warp
    // in order to pad the input arrays to a multiple of the warp size
    unsigned int warpRemain( unsigned int nEvt, unsigned int nWarp = 32 );

    struct instance{
        std::vector<std::pair<int,int>> procEventInt;
        std::vector<std::pair<std::string,std::string>> procEventStr;
        REX::event process;
        REX::teaw::amplitude bridgeCall;
        instance();
        instance( std::vector<std::pair<int,int>>& event);
        instance( std::vector<std::pair<int,int>>& event, REX::teaw::amplitude& amp );
        void setProc( std::vector<std::pair<int,int>>& event );
        instance( std::vector<std::pair<std::string,std::string>>& event);
        instance( std::vector<std::pair<std::string,std::string>>& event, REX::teaw::amplitude& amp );
        void setProc( std::vector<std::pair<std::string,std::string>>& event );
        void setAmp( REX::teaw::amplitude& amp );
        std::shared_ptr<std::vector<FORTRANFPTYPE>> ampEval( std::vector<double>& momenta, std::vector<double>& alphaS );
        std::shared_ptr<std::vector<FORTRANFPTYPE>> ampEval( std::shared_ptr<std::vector<double>> momenta, 
        std::shared_ptr<std::vector<double>> alphaS );
    };

}

#endif