diff --git b/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/auto_dsig.f a/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/auto_dsig.f
index 104747ce9..0f522165f 100644
--- b/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/auto_dsig.f
+++ a/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/auto_dsig.f
@@ -117,7 +117,7 @@ C     Cannot make a selection with all PDFs to zero, so we return now
       ENDIF
       END
 
-      SUBROUTINE SELECT_GROUPING(IMIRROR,  IPROC, ICONF, WGT, NB_PAGE)
+      SUBROUTINE SELECT_GROUPING(IMIRROR,  IPROC, ICONF, WGT, NB_PAGE_LOOP)
       USE DISCRETESAMPLER
       IMPLICIT NONE
 C     
@@ -125,15 +125,15 @@ C     INPUT (VIA COMMAND BLOCK)
 C     SELPROC 
 C     SUMPROB
 C     INPUT
-C     nb_page (number of weight to update)
+C     nb_page_loop (number of weight to update)
 C     INPUT/OUTPUT
-C     WGTS(nb_page) #multiplied by the associated jacobian      
+C     WGTS(nb_page_loop) #multiplied by the associated jacobian      
 C     
 C     OUTPUT
 C     
 C     iconf, iproc, imirror
 C     
-      INTEGER NB_PAGE
+      INTEGER NB_PAGE_LOOP
       DOUBLE PRECISION WGT(*)
       INTEGER IMIRROR, IPROC, ICONF
 
@@ -207,7 +207,7 @@ C     all, then we pick a point based on PDF only.
  50     CONTINUE
 C       Update weigth w.r.t SELPROC normalized to selection probability
 
-        DO I=1, NB_PAGE
+        DO I=1, NB_PAGE_LOOP
           WGT(I)=WGT(I)*(SUMPROB/SELPROC(IMIRROR,IPROC,ICONF))
         ENDDO
 
@@ -215,7 +215,7 @@ C       Update weigth w.r.t SELPROC normalized to selection probability
 C       We are using the grouped_processes grid and it is initialized.
         CALL DS_GET_POINT('grouped_processes',R,LMAPPED
      $   ,MC_GROUPED_PROC_JACOBIAN,'norm',(/'PDF_convolution'/))
-        DO I=1, NB_PAGE
+        DO I=1, NB_PAGE_LOOP
           WGT(I)=WGT(I)*MC_GROUPED_PROC_JACOBIAN
         ENDDO
         CALL MAP_1_TO_3(LMAPPED,MAXSPROC,2,ICONF,IPROC,IMIRROR)
@@ -224,19 +224,19 @@ C       We are using the grouped_processes grid and it is initialized.
       END
 
       SUBROUTINE DSIG_VEC(ALL_P,ALL_WGT,ALL_XBK, ALL_Q2FACT,
-     $  ALL_CM_RAP, ICONF,IPROC,IMIRROR, ALL_OUT,NB_PAGE)
+     $  ALL_CM_RAP, ICONF,IPROC,IMIRROR, ALL_OUT,NB_PAGE_LOOP)
 C     ******************************************************
 C     
-C     INPUT: ALL_PP(0:3, NEXTERNAL, NB_PAGE)
-C     INPUT/OUtpUT       ALL_WGT(Nb_PAGE)
-C     nb_page = vector size
-C     ALL_OUT(NB_PAGE)
+C     INPUT: ALL_PP(0:3, NEXTERNAL, NB_PAGE_LOOP)
+C     INPUT/OUtpUT       ALL_WGT(Nb_Page_Loop)
+C     nb_page_loop = vector size
+C     ALL_OUT(NB_PAGE_LOOP)
 C     function (PDf*cross)
 C     ******************************************************
       USE DISCRETESAMPLER
       IMPLICIT NONE
 
-      INTEGER NB_PAGE
+      INTEGER NB_PAGE_LOOP
       INCLUDE 'genps.inc'
       DOUBLE PRECISION ALL_P(4*MAXDIM/3+14,*)
       DOUBLE PRECISION ALL_WGT(*)
@@ -301,8 +301,7 @@ C      entries to the grid for the MC over helicity configuration
 
 C     set the running scale 
 C     and update the couplings accordingly
-      CALL UPDATE_SCALE_COUPLING_VEC(ALL_P, ALL_WGT, ALL_Q2FACT,
-     $  NB_PAGE)
+      CALL UPDATE_SCALE_COUPLING_VEC(ALL_P, ALL_WGT, ALL_Q2FACT, NB_PAGE_LOOP)
 
       IF(GROUPED_MC_GRID_STATUS.EQ.0) THEN
 C       If we were in the initialization phase of the grid for MC over
@@ -316,7 +315,7 @@ C        the call DSIGPROC just below.
      $  IPROC,IMIRROR,SYMCONF,CONFSUB,ALL_WGT,0, ALL_OUT)
 
 
-      DO I =1,NB_PAGE
+      DO I =1,NB_PAGE_LOOP
 C       Reset ALLOW_HELICITY_GRID_ENTRIES
         ALLOW_HELICITY_GRID_ENTRIES = .TRUE.
 
@@ -333,7 +332,7 @@ C       OC(IMIRROR,IPROC,ICONF)))
 C       ENDIF
 
       ENDDO
-      DO I=1, NB_PAGE
+      DO I=1, NB_PAGE_LOOP
         IF(ALL_OUT(I).GT.0D0)THEN
 C         Update summed weight and number of events
           SUMWGT(IMIRROR,IPROC,ICONF)=SUMWGT(IMIRROR,IPROC,ICONF)
@@ -429,7 +428,8 @@ C     Common blocks
       DATA  NB_SPIN_STATE /2,2/
       COMMON /NB_HEL_STATE/ NB_SPIN_STATE
 
-      INCLUDE 'coupl.inc'
+      include 'vector.inc'
+      include 'coupl.inc'
       INCLUDE 'run.inc'
 C     ICONFIG has this config number
       INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
@@ -772,9 +772,9 @@ C     ****************************************************
       INCLUDE 'maxconfigs.inc'
       INCLUDE 'nexternal.inc'
       INCLUDE 'maxamps.inc'
-      INCLUDE 'coupl.inc'
+      include 'vector.inc'
+      include 'coupl.inc'
       INCLUDE 'run.inc'
-      INCLUDE 'vector.inc'
 C     
 C     ARGUMENTS 
 C     
@@ -862,7 +862,7 @@ C
       ENDIF
 C     set the running scale 
 C     and update the couplings accordingly
-      IF (NB_PAGE.LE.1) THEN
+      IF (NB_PAGE_LOOP.LE.1) THEN
         CALL UPDATE_SCALE_COUPLING(PP, WGT)
       ENDIF
 
@@ -910,18 +910,18 @@ C     ****************************************************
       INCLUDE 'maxconfigs.inc'
       INCLUDE 'nexternal.inc'
       INCLUDE 'maxamps.inc'
-      INCLUDE 'coupl.inc'
+      include 'vector.inc'
+      include 'coupl.inc'
       INCLUDE 'run.inc'
-      INCLUDE '../../Source/vector.inc'
 C     
 C     ARGUMENTS 
 C     
-      DOUBLE PRECISION ALL_P(4*MAXDIM/3+14,NB_PAGE)
-      DOUBLE PRECISION ALL_XBK(2, NB_PAGE)
-      DOUBLE PRECISION ALL_Q2FACT(2, NB_PAGE)
-      DOUBLE PRECISION ALL_CM_RAP(NB_PAGE)
-      DOUBLE PRECISION ALL_WGT(NB_PAGE)
-      DOUBLE PRECISION ALL_OUT(NB_PAGE)
+      DOUBLE PRECISION ALL_P(4*MAXDIM/3+14,NB_PAGE_MAX)
+      DOUBLE PRECISION ALL_XBK(2, NB_PAGE_MAX)
+      DOUBLE PRECISION ALL_Q2FACT(2, NB_PAGE_MAX)
+      DOUBLE PRECISION ALL_CM_RAP(NB_PAGE_MAX)
+      DOUBLE PRECISION ALL_WGT(NB_PAGE_MAX)
+      DOUBLE PRECISION ALL_OUT(NB_PAGE_MAX)
       DOUBLE PRECISION DSIGPROC
       INTEGER ICONF,IPROC,IMIRROR,IMODE
       INTEGER SYMCONF(0:LMAXCONFIGS)
@@ -956,7 +956,7 @@ C
 C     
 C     LOCAL VARIABLES 
 C     
-      DOUBLE PRECISION ALL_P1(0:3,NEXTERNAL,NB_PAGE),XDUM
+      DOUBLE PRECISION ALL_P1(0:3,NEXTERNAL,NB_PAGE_MAX),XDUM
       INTEGER I,J,K,JC(NEXTERNAL)
       INTEGER PERMS(NEXTERNAL,LMAXCONFIGS)
       INCLUDE 'symperms.inc'
@@ -969,7 +969,7 @@ C
         ENDDO
 
 C       Set momenta according to this permutation
-        DO IVEC=1, NB_PAGE
+        DO IVEC=1, NB_PAGE_LOOP
           CALL SWITCHMOM(ALL_P(1,IVEC),ALL_P1(0,1,IVEC),PERMS(1
      $     ,MAPCONFIG(ICONFIG)),JC,NEXTERNAL)
 
@@ -985,7 +985,7 @@ C       Set momenta according to this permutation
 
 
       IF(IMIRROR.EQ.2)THEN
-        DO IVEC=1,NB_PAGE
+        DO IVEC=1,NB_PAGE_LOOP
 C         Flip momenta (rotate around x axis)
           DO I=1,NEXTERNAL
             ALL_P1(2,I, IVEC)=-ALL_P1(2,I,IVEC)
@@ -1004,7 +1004,7 @@ C         Flip beam identity
       ALL_OUT(:)=0D0
 
 C     IF (PASSCUTS(P1)) THEN
-      DO IVEC=1,NB_PAGE
+      DO IVEC=1,NB_PAGE_LOOP
         IF (IMODE.EQ.0D0.AND.NB_PASS_CUTS.LT.2**12.AND.ALL_WGT(IVEC)
      $   .NE.0D0)THEN
           NB_PASS_CUTS = NB_PASS_CUTS + 1
@@ -1017,7 +1017,7 @@ C     ENDIF
 
       IF (LAST_ICONF.NE.-1.AND.IMIRROR.EQ.2) THEN
 C       Flip back local momenta P1 if cached
-        DO IVEC=1,NB_PAGE
+        DO IVEC=1,NB_PAGE_LOOP
           DO I=1,NEXTERNAL
             ALL_P1(2,I,IVEC)=-ALL_P1(2,I,IVEC)
             ALL_P1(3,I,IVEC)=-ALL_P1(3,I,IVEC)
diff --git b/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/driver.f a/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/driver.f
index 91e1f5b4e..9ed448453 100644
--- b/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/driver.f
+++ a/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/driver.f
@@ -71,13 +71,44 @@ c      double precision xsec,xerr
 c      integer ncols,ncolflow(maxamps),ncolalt(maxamps),ic
 c      common/to_colstats/ncols,ncolflow,ncolalt,ic
 
+      include 'vector.inc'
       include 'coupl.inc'
 
+#ifdef MG5AMC_MEEXPORTER_KOKKOS
+      INCLUDE 'fbridge.inc'
+      INCLUDE 'fbridge_common.inc'
+#endif
 C-----
 C  BEGIN CODE
 C----- 
       call cpu_time(t_before)
       CUMULATED_TIMING = t_before
+
+      CALL COUNTERS_INITIALISE()
+
+#ifdef MG5AMC_MEEXPORTER_KOKKOS
+      write(*,*) 'Enter fbridge_mode'
+      read(*,*) FBRIDGE_MODE ! (CppOnly=1, FortranOnly=0, BothQuiet=-1, BothDebug=-2)
+      write(*,'(a16,i6)') ' FBRIDGE_MODE = ', FBRIDGE_MODE
+      write(*,*) 'Enter #events in a vector loop (max=',nb_page_max,',)'
+      read(*,*) nb_page_loop
+#else
+      NB_PAGE_LOOP = 32
+#endif
+      write(*,'(a16,i6)') ' NB_PAGE_LOOP = ', NB_PAGE_LOOP
+      if( nb_page_loop.gt.nb_page_max .or. nb_page_loop.le.0 ) then
+        write(*,*) 'ERROR! Invalid nb_page_loop = ', nb_page_loop
+        STOP
+      endif
+
+#ifdef MG5AMC_MEEXPORTER_KOKKOS
+      CALL FBRIDGECREATE(FBRIDGE_PBRIDGE, NB_PAGE_LOOP, NEXTERNAL, 4) ! this must be at the beginning as it initialises the KOKKOS device
+      FBRIDGE_NCBYF1 = 0
+      FBRIDGE_CBYF1SUM = 0
+      FBRIDGE_CBYF1SUM2 = 0
+      FBRIDGE_CBYF1MAX = -1D100
+      FBRIDGE_CBYF1MIN = 1D100
+#endif
 c
 c     Read process number
 c
@@ -132,7 +163,8 @@ c   If CKKW-type matching, read IS Sudakov grid
           exit
  30       issgridfile='../'//issgridfile
           if(i.eq.5)then
-            print *,'ERROR: No Sudakov grid file found in lib with ickkw=2'
+            print *,
+     &        'ERROR: No Sudakov grid file found in lib with ickkw=2'
             stop
           endif
         enddo
@@ -199,8 +231,33 @@ c      call sample_result(xsec,xerr)
 c      write(*,*) 'Final xsec: ',xsec
 
       rewind(lun)
-
       close(lun)
+
+#ifdef MG5AMC_MEEXPORTER_KOKKOS
+      CALL FBRIDGEDELETE(FBRIDGE_PBRIDGE) ! this must be at the end as it shuts down the CUDA device
+      IF( FBRIDGE_MODE .LE. -1 ) THEN ! (BothQuiet=-1 or BothDebug=-2)
+        WRITE(*,'(a,f10.8,a,e8.2)')
+     &    ' [MERATIOS] ME ratio KOKKOS/Fortran: MIN = ',
+     &    FBRIDGE_CBYF1MIN + 1, ' = 1 - ', -FBRIDGE_CBYF1MIN
+        WRITE(*,'(a,f10.8,a,e8.2)')
+     &    ' [MERATIOS] ME ratio KOKKOS/Fortran: MAX = ',
+     &    FBRIDGE_CBYF1MAX + 1, ' = 1 + ', FBRIDGE_CBYF1MAX
+        WRITE(*,'(a,i6)')
+     &    ' [MERATIOS] ME ratio KOKKOS/Fortran: NENTRIES = ',
+     &    FBRIDGE_NCBYF1
+c        WRITE(*,'(a,e8.2)')
+c    &    ' [MERATIOS] ME ratio KOKKOS/Fortran - 1: AVG = ',
+c    &    FBRIDGE_CBYF1SUM / FBRIDGE_NCBYF1
+c       WRITE(*,'(a,e8.2)')
+c    &    ' [MERATIOS] ME ratio KOKKOS/Fortran - 1: STD = ',
+c    &    SQRT( FBRIDGE_CBYF1SUM2 / FBRIDGE_NCBYF1 ) ! ~standard deviation
+        WRITE(*,'(a,e8.2,a,e8.2)')
+     &    ' [MERATIOS] ME ratio KOKKOS/Fortran - 1: AVG = ',
+     &    FBRIDGE_CBYF1SUM / FBRIDGE_NCBYF1, ' +- ',
+     &    SQRT( FBRIDGE_CBYF1SUM2 ) / FBRIDGE_NCBYF1 ! ~standard error
+      ENDIF
+#endif
+      CALL COUNTERS_FINALISE()
       end
 
 c     $B$ get_user_params $B$ ! tag for MadWeight
@@ -378,7 +435,7 @@ c
       fopened=.false.
       tempname=filename 	 
       fine=index(tempname,' ') 	 
-      fine2=index(path,' ')-1	 
+c     fine2=index(path,' ')-1 ! AV remove valgrind "Conditional jump or move depends on uninitialised value(s)"
       if(fine.eq.0) fine=len(tempname)
       open(unit=lun,file=tempname,status='old',ERR=20)
       fopened=.true.
diff --git b/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/matrix1.f a/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/matrix1.f
index 613844bda..51c48c573 100644
--- b/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/matrix1.f
+++ a/epochX/kokkos/gg_tt.mad/SubProcesses/P1_gg_ttx/matrix1.f
@@ -77,7 +77,7 @@ C     GLOBAL VARIABLES
 C     
       LOGICAL INIT_MODE
       COMMON /TO_DETERMINE_ZERO_HEL/INIT_MODE
-      INCLUDE '../../Source/vector.inc'
+      include 'vector.inc'
       DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
 
       CHARACTER*101         HEL_BUFF
@@ -136,6 +136,7 @@ C     ----------
 C     BEGIN CODE
 C     ----------
 
+      call counters_smatrix1_start()
       NTRY(IMIRROR)=NTRY(IMIRROR)+1
       THIS_NTRY(IMIRROR) = THIS_NTRY(IMIRROR)+1
       DO I=1,NEXTERNAL
@@ -232,6 +233,7 @@ C       Include the Jacobian from helicity sampling
         WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
       ELSE
         ANS = 1D0
+        call counters_smatrix1_stop()
         RETURN
       ENDIF
       IF (ANS.NE.0D0.AND.(ISUM_HEL .NE. 1.OR.HEL_PICKED.EQ.-1)) THEN
@@ -276,6 +278,7 @@ C           Set right sign for ANS, based on sign of chosen helicity
         ENDIF
       ENDIF
       ANS=ANS/DBLE(IDEN)
+      call counters_smatrix1_stop()
       END
 
 
@@ -346,9 +349,9 @@ C
 C     
 C     GLOBAL VARIABLES
 C     
-      INCLUDE '../../Source/vector.inc'
       DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
-      INCLUDE 'coupl.inc'
+      include 'vector.inc'
+      include 'coupl.inc'
 
       DOUBLE PRECISION SMALL_WIDTH_TREATMENT
       COMMON/NARROW_WIDTH/SMALL_WIDTH_TREATMENT
@@ -376,6 +379,7 @@ C     1 T(2,1,3,4)
 C     ----------
 C     BEGIN CODE
 C     ----------
+      call counters_matrix1_start()
       IF (FIRST) THEN
         FIRST=.FALSE.
         IF(ZERO.NE.0D0) FK_ZERO = SIGN(MAX(ABS(ZERO), ABS(ZERO
@@ -449,6 +453,7 @@ C     JAMPs contributing to orders ALL_ORDERS=1
         ENDDO
       ENDDO
 
+      call counters_matrix1_stop()
       END
 
       SUBROUTINE PRINT_ZERO_AMP_1()
