      DOUBLE PRECISION FUNCTION DSIG1(PP,WGT,IMODE)
C     ****************************************************
C     
C     Generated by MadGraph5_aMC@NLO v. 3.4.0_lo_vect, 2022-05-06
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Process: g g > t t~ g g g WEIGHTED<=5 @1
C     
C     RETURNS DIFFERENTIAL CROSS SECTION
C     Input:
C     pp    4 momentum of external particles
C     wgt   weight from Monte Carlo
C     imode 0 run, 1 init, 2 reweight, 
C     3 finalize, 4 only PDFs,
C     5 squared amplitude only (never
C     generate events)
C     Output:
C     Amplitude squared and summed
C     ****************************************************
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INCLUDE 'genps.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'maxamps.inc'
      DOUBLE PRECISION       CONV
      PARAMETER (CONV=389379.66*1000)  !CONV TO PICOBARNS
      REAL*8     PI
      PARAMETER (PI=3.1415926D0)
C     
C     ARGUMENTS 
C     
      DOUBLE PRECISION PP(0:3,NEXTERNAL), WGT
      INTEGER IMODE
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,ITYPE,LP,IPROC
      DOUBLE PRECISION G1
      DOUBLE PRECISION G2
      DOUBLE PRECISION XPQ(-7:7),PD(0:MAXPROC)
      DOUBLE PRECISION DSIGUU,R,RCONF

      INTEGER LUN,ICONF,IFACT,NFACT
      DATA NFACT/1/
      SAVE NFACT
C     
C     STUFF FOR DRESSED EE COLLISIONS
C     
      INCLUDE '../../Source/PDF/eepdf.inc'
      DOUBLE PRECISION EE_COMP_PROD

      INTEGER I_EE
C     
C     EXTERNAL FUNCTIONS
C     
      LOGICAL PASSCUTS
      DOUBLE PRECISION ALPHAS2,REWGT,PDG2PDF,CUSTOM_BIAS
      INTEGER NEXTUNOPEN
C     
C     GLOBAL VARIABLES
C     
      INTEGER          IPSEL
      COMMON /SUBPROC/ IPSEL
C     MINCFIG has this config number
      INTEGER           MINCFIG, MAXCFIG
      COMMON/TO_CONFIGS/MINCFIG, MAXCFIG
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
C     Keep track of whether cuts already calculated for this event
      LOGICAL CUTSDONE,CUTSPASSED
      COMMON/TO_CUTSDONE/CUTSDONE,CUTSPASSED

      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      include 'vector.inc'
      include 'coupl.inc'
      INCLUDE 'run.inc'
C     Common blocks
      CHARACTER*7         PDLABEL,EPA_LABEL
      INTEGER       LHAID
      COMMON/TO_PDF/LHAID,PDLABEL,EPA_LABEL
C     jamp2 information
      DOUBLE PRECISION JAMP2(0:MAXFLOW, NB_PAGE_MAX)
      COMMON/TO_JAMPS/       JAMP2

C     
C     local
C     
      DOUBLE PRECISION P1(0:3, NEXTERNAL)
      INTEGER CHANNEL
C     
C     DATA
C     
      DATA G1/1*1D0/
      DATA G2/1*1D0/
C     ----------
C     BEGIN CODE
C     ----------
      DSIG1=0D0

      IF(IMODE.EQ.1)THEN
C       Set up process information from file symfact
        LUN=NEXTUNOPEN()
        NFACT=1
        OPEN(UNIT=LUN,FILE='../symfact.dat',STATUS='OLD',ERR=20)
        DO WHILE(.TRUE.)
          READ(LUN,*,ERR=10,END=10) RCONF, IFACT
          ICONF=INT(RCONF)
          IF(ICONF.EQ.MAPCONFIG(MINCFIG))THEN
            NFACT=IFACT
          ENDIF
        ENDDO
        DSIG1 = NFACT
 10     CLOSE(LUN)
        RETURN
 20     WRITE(*,*)'Error opening symfact.dat. No symmetry factor used.'
        RETURN
      ENDIF
C     Continue only if IMODE is 0, 4 or 5
      IF(IMODE.NE.0.AND.IMODE.NE.4.AND.IMODE.NE.5) RETURN


      IF (ABS(LPP(IB(1))).GE.1) THEN
          !LP=SIGN(1,LPP(IB(1)))
        G1=PDG2PDF(LPP(IB(1)),0, IB(1),XBK(IB(1)),DSQRT(Q2FACT(IB(1))))
      ENDIF
      IF (ABS(LPP(IB(2))).GE.1) THEN
          !LP=SIGN(1,LPP(IB(2)))
        G2=PDG2PDF(LPP(IB(2)),0, IB(2),XBK(IB(2)),DSQRT(Q2FACT(IB(2))))
      ENDIF
      PD(0) = 0D0
      IPROC = 0
      IPROC=IPROC+1  ! g g > t t~ g g g
      PD(IPROC)=G1*G2
      PD(0)=PD(0)+DABS(PD(IPROC))
      IF (IMODE.EQ.4)THEN
        DSIG1 = PD(0)
        RETURN
      ENDIF
      IF(FRAME_ID.NE.6)THEN
        CALL BOOST_TO_FRAME(PP, FRAME_ID, P1)
      ELSE
        P1 = PP
      ENDIF

      CHANNEL = SUBDIAG(1)
      CALL SMATRIX1(P1,0,CHANNEL,DSIGUU,JAMP2(0,1),1)

      IF (IMODE.EQ.5) THEN
        IF (DSIGUU.LT.1D199) THEN
          DSIG1 = DSIGUU*CONV
        ELSE
          DSIG1 = 0.0D0
        ENDIF
        RETURN
      ENDIF
C     Select a flavor combination (need to do here for right sign)
      CALL RANMAR(R)
      IPSEL=0
      DO WHILE (R.GE.0D0 .AND. IPSEL.LT.IPROC)
        IPSEL=IPSEL+1
        R=R-DABS(PD(IPSEL))/PD(0)
      ENDDO

      DSIGUU=DSIGUU*REWGT(PP)

C     Apply the bias weight specified in the run card (default is 1.0)
      DSIGUU=DSIGUU*CUSTOM_BIAS(PP,DSIGUU,1,1)

      DSIGUU=DSIGUU*NFACT

      IF (DSIGUU.LT.1D199) THEN
C       Set sign of dsig based on sign of PDF and matrix element
        DSIG1=DSIGN(CONV*PD(0)*DSIGUU,DSIGUU*PD(IPSEL))
      ELSE
        WRITE(*,*) 'Error in matrix element'
        DSIGUU=0D0
        DSIG1=0D0
      ENDIF
C     Generate events only if IMODE is 0.
      IF(IMODE.EQ.0.AND.DABS(DSIG1).GT.0D0)THEN
C       Call UNWGT to unweight and store events
        CALL UNWGT(PP,DSIG1*WGT,1,1)
      ENDIF

      END
C     
C     Functionality to handling grid
C     



      DOUBLE PRECISION FUNCTION DSIG1_VEC(ALL_PP, ALL_XBK, ALL_Q2FACT,
     $  ALL_CM_RAP, ALL_WGT,IMODE, ALL_OUT)
C     ****************************************************
C     
C     Generated by MadGraph5_aMC@NLO v. 3.4.0_lo_vect, 2022-05-06
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Process: g g > t t~ g g g WEIGHTED<=5 @1
C     
C     RETURNS DIFFERENTIAL CROSS SECTION
C     Input:
C     pp    4 momentum of external particles
C     wgt   weight from Monte Carlo
C     imode 0 run, 1 init, 2 reweight, 
C     3 finalize, 4 only PDFs,
C     5 squared amplitude only (never
C     generate events)
C     Output:
C     Amplitude squared and summed
C     ****************************************************
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      include 'vector.inc'
      include 'coupl.inc'
      INCLUDE 'genps.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'maxamps.inc'
      DOUBLE PRECISION       CONV
      PARAMETER (CONV=389379.66*1000)  !CONV TO PICOBARNS
      REAL*8     PI
      PARAMETER (PI=3.1415926D0)
C     
C     ARGUMENTS 
C     
      DOUBLE PRECISION ALL_PP(0:3,NEXTERNAL,NB_PAGE_MAX)
      DOUBLE PRECISION ALL_WGT(NB_PAGE_MAX)
      DOUBLE PRECISION ALL_XBK(2,NB_PAGE_MAX)
      DOUBLE PRECISION ALL_Q2FACT(2,NB_PAGE_MAX)
      DOUBLE PRECISION ALL_CM_RAP(NB_PAGE_MAX)
      INTEGER IMODE
      DOUBLE PRECISION ALL_OUT(NB_PAGE_MAX)
C     ----------
C     BEGIN CODE
C     ----------
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,ITYPE,LP,IPROC
      DOUBLE PRECISION G1(NB_PAGE_MAX)
      DOUBLE PRECISION G2(NB_PAGE_MAX)
      DOUBLE PRECISION XPQ(-7:7),PD(0:MAXPROC)
      DOUBLE PRECISION ALL_PD(0:MAXPROC, NB_PAGE_MAX)
      DOUBLE PRECISION DSIGUU,R,RCONF
      INTEGER LUN,ICONF,IFACT,NFACT
      DATA NFACT/1/
      SAVE NFACT
      DOUBLE PRECISION RHEL  ! random number
      INTEGER CHANNEL
C     
C     STUFF FOR DRESSED EE COLLISIONS --even if not supported for now--
C     
      INCLUDE '../../Source/PDF/eepdf.inc'
      DOUBLE PRECISION EE_COMP_PROD

      INTEGER I_EE
C     
C     EXTERNAL FUNCTIONS
C     
      LOGICAL PASSCUTS
      DOUBLE PRECISION ALPHAS2,REWGT,PDG2PDF,CUSTOM_BIAS
      INTEGER NEXTUNOPEN
      DOUBLE PRECISION DSIG1
C     
C     GLOBAL VARIABLES
C     
      INTEGER          IPSEL
      COMMON /SUBPROC/ IPSEL
C     MINCFIG has this config number
      INTEGER           MINCFIG, MAXCFIG
      COMMON/TO_CONFIGS/MINCFIG, MAXCFIG
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
C     Keep track of whether cuts already calculated for this event
      LOGICAL CUTSDONE,CUTSPASSED
      COMMON/TO_CUTSDONE/CUTSDONE,CUTSPASSED
C     jamp2 information      
      DOUBLE PRECISION JAMP2(0:MAXFLOW, NB_PAGE_MAX)
      COMMON/TO_JAMPS/       JAMP2

      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      INCLUDE 'run.inc'

      DOUBLE PRECISION P_MULTI(0:3, NEXTERNAL, NB_PAGE_MAX)
      DOUBLE PRECISION HEL_RAND(NB_PAGE_MAX)
      INTEGER SELECTED_HEL(NB_PAGE_MAX)

C     Common blocks
      CHARACTER*7         PDLABEL,EPA_LABEL
      INTEGER       LHAID
      COMMON/TO_PDF/LHAID,PDLABEL,EPA_LABEL

C     
C     local
C     
      DOUBLE PRECISION P1(0:3, NEXTERNAL)
      INTEGER IVEC

C     
C     DATA
C     
      DATA G1/NB_PAGE_MAX*1D0/
      DATA G2/NB_PAGE_MAX*1D0/
C     ----------
C     BEGIN CODE
C     ----------

      IF(IMODE.EQ.1)THEN
        NFACT = DSIG1(ALL_PP(0,1,1), ALL_WGT(1), IMODE)
        RETURN
      ENDIF

C     Continue only if IMODE is 0, 4 or 5
      IF(IMODE.NE.0.AND.IMODE.NE.4.AND.IMODE.NE.5) RETURN


      DO IVEC=1,NB_PAGE_LOOP
        IF (ABS(LPP(IB(1))).GE.1) THEN
            !LP=SIGN(1,LPP(IB(1)))
          G1(IVEC)=PDG2PDF(LPP(IB(1)),0, IB(1),ALL_XBK(IB(1),IVEC)
     $     ,DSQRT(ALL_Q2FACT(IB(1), IVEC)))
        ENDIF
        IF (ABS(LPP(IB(2))).GE.1) THEN
            !LP=SIGN(1,LPP(IB(2)))
          G2(IVEC)=PDG2PDF(LPP(IB(2)),0, IB(2),ALL_XBK(IB(2),IVEC)
     $     ,DSQRT(ALL_Q2FACT(IB(2), IVEC)))
        ENDIF
      ENDDO
      ALL_PD(0,:) = 0D0
      IPROC = 0
      IPROC=IPROC+1  ! g g > t t~ g g g
      DO IVEC=1, NB_PAGE_LOOP
        ALL_PD(IPROC,IVEC)=G1(IVEC)*G2(IVEC)
        ALL_PD(0,IVEC)=ALL_PD(0,IVEC)+DABS(ALL_PD(IPROC,IVEC))

      ENDDO


      IF (IMODE.EQ.4)THEN
        ALL_OUT(:) = ALL_PD(0,:)
        RETURN
      ENDIF

      DO IVEC=1,NB_PAGE_LOOP
C       Do not need those three here do I?	 
        XBK(:) = ALL_XBK(:,IVEC)
C       CM_RAP = ALL_CM_RAP(IVEC)
        Q2FACT(:) = ALL_Q2FACT(:, IVEC)

        IF(FRAME_ID.NE.6)THEN
          CALL BOOST_TO_FRAME(ALL_PP(0,1,IVEC), FRAME_ID, P_MULTI(0,1
     $     ,IVEC))
        ELSE
          P_MULTI(:,:,IVEC) = ALL_PP(:,:,IVEC)
        ENDIF
        CALL RANMAR(HEL_RAND(IVEC))
C       CALL SMATRIX1(P1, RHEL, channel, ALL_OUT(IVEC), JAMP2(0,
C        IVEC), IVEC)
      ENDDO
      CHANNEL = SUBDIAG(1)

C     do IVEC=1, NB_PAGE_LOOP
C     CALL SMATRIX1(p_multi(0,1,IVEC), hel_rand(ivec), channel,
C      ALL_OUT(IVEC), JAMP2(0, IVEC), IVEC)
C     enddo 
      CALL SMATRIX1_MULTI(P_MULTI, HEL_RAND,  CHANNEL, ALL_OUT ,
     $  SELECTED_HEL, JAMP2)


      DO IVEC=1,NB_PAGE_LOOP
        DSIGUU = ALL_OUT(IVEC)
        IF (IMODE.EQ.5) THEN
          IF (DSIGUU.LT.1D199) THEN
            ALL_OUT(IVEC) = DSIGUU*CONV
          ELSE
            ALL_OUT(IVEC) = 0.0D0
          ENDIF
          RETURN
        ENDIF
C       Select a flavor combination (need to do here for right sign)
        CALL RANMAR(R)
        IPSEL=0
        DO WHILE (R.GE.0D0 .AND. IPSEL.LT.IPROC)
          IPSEL=IPSEL+1
          R=R-DABS(ALL_PD(IPSEL,IVEC))/ALL_PD(0,IVEC)
        ENDDO

        XBK(:) = ALL_XBK(:,IVEC)
C       CM_RAP = ALL_CM_RAP(IVEC)
        Q2FACT(:) = ALL_Q2FACT(:, IVEC)

        IF(FRAME_ID.NE.6)THEN
          CALL BOOST_TO_FRAME(ALL_PP(0,1,IVEC), FRAME_ID, P1)
        ELSE
          P1 = ALL_PP(:,:,IVEC)
        ENDIF
        CALL RESTORE_CL_VAL_TO(IVEC)
        DSIGUU=DSIGUU*REWGT(P1)

C       Apply the bias weight specified in the run card (default is
C        1.0)
        DSIGUU=DSIGUU*CUSTOM_BIAS(P1,DSIGUU,1, IVEC)

        DSIGUU=DSIGUU*NFACT

        IF (DSIGUU.LT.1D199) THEN
C         Set sign of dsig based on sign of PDF and matrix element
          ALL_OUT(IVEC)=DSIGN(CONV*ALL_PD(0,IVEC)*DSIGUU,DSIGUU
     $     *ALL_PD(IPSEL,IVEC))
        ELSE
          WRITE(*,*) 'Error in matrix element'
          DSIGUU=0D0
          ALL_OUT(IVEC)=0D0
        ENDIF
C       Generate events only if IMODE is 0.
        IF(IMODE.EQ.0.AND.DABS(ALL_OUT(IVEC)).GT.0D0)THEN
C         Call UNWGT to unweight and store events
          CALL UNWGT(ALL_PP(0,1,IVEC), ALL_OUT(IVEC)*ALL_WGT(IVEC),1,
     $      IVEC)
        ENDIF
      ENDDO

      END
C     
C     Functionality to handling grid
C     






      SUBROUTINE PRINT_ZERO_AMP1()

      RETURN
      END


      SUBROUTINE SMATRIX1_MULTI(P_MULTI, HEL_RAND,  CHANNEL, OUT ,
     $  SELECTED_HEL, JAMP2_MULTI)

      USE OMP_LIB

      IMPLICIT NONE
      INCLUDE 'nexternal.inc'
      include 'vector.inc'
      include 'coupl.inc'
      INCLUDE 'maxamps.inc'
      DOUBLE PRECISION P_MULTI(0:3, NEXTERNAL, NB_PAGE_MAX)
      DOUBLE PRECISION HEL_RAND(NB_PAGE_MAX)
      INTEGER CHANNEL
      DOUBLE PRECISION OUT(NB_PAGE_MAX)
      INTEGER SELECTED_HEL(NB_PAGE_MAX)
      DOUBLE PRECISION JAMP2_MULTI(0:MAXFLOW, NB_PAGE_MAX)

      INTEGER IVEC
      INTEGER IEXT

      INTEGER                    ISUM_HEL
      LOGICAL                    MULTI_CHANNEL
      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL

      LOGICAL FIRST_CHID
      SAVE FIRST_CHID
      DATA FIRST_CHID/.TRUE./
      
#ifdef MG5AMC_MEEXPORTER_KOKKOS
      INCLUDE 'fbridge.inc'
      INCLUDE 'fbridge_common.inc'
      INCLUDE 'genps.inc'
      INCLUDE 'run.inc'
      DOUBLE PRECISION OUT2(NB_PAGE_MAX)
      DOUBLE PRECISION CBYF1

      INTEGER*4 NWARNINGS
      SAVE NWARNINGS
      DATA NWARNINGS/0/
      
      LOGICAL FIRST
      SAVE FIRST
      DATA FIRST/.TRUE./

      IF( FBRIDGE_MODE .LE. 0 ) THEN ! (FortranOnly=0 or BothQuiet=-1 or BothDebug=-2)
#endif
        call counters_smatrix1multi_start( -1, nb_page_loop ) ! fortran=-1
c!$OMP PARALLEL
c!$OMP DO
        DO IVEC=1, NB_PAGE_LOOP
          CALL SMATRIX1(P_MULTI(0,1,IVEC),
     &      hel_rand(IVEC),
     &      channel,
     &      out(IVEC),
C    &      selected_hel(IVEC),
     &      jamp2_multi(0,IVEC),
     &      IVEC
     &      )
        ENDDO
c!$OMP END DO
c!$OMP END PARALLEL
        call counters_smatrix1multi_stop( -1 ) ! fortran=-1
#ifdef MG5AMC_MEEXPORTER_KOKKOS
      ENDIF

      IF( FBRIDGE_MODE .EQ. 1 .OR. FBRIDGE_MODE .LT. 0 ) THEN ! (CppOnly=1 or BothQuiet=-1 or BothDebug=-2)
        IF( LIMHEL.NE.0 ) THEN
          WRITE(6,*) 'ERROR! The kokkos bridge only supports LIMHEL=0'
          STOP
        ENDIF
        IF ( FIRST ) THEN ! exclude first pass (helicity filtering) from timers (#461)
          CALL FBRIDGESEQUENCE(FBRIDGE_PBRIDGE, P_MULTI, ALL_G, OUT2, 0) ! 0: multi channel disabled for helicity filtering
          FIRST = .FALSE.
c         ! This is a workaround for https://github.com/oliviermattelaer/mg5amc_test/issues/22 (see PR #486)
          IF( FBRIDGE_MODE .EQ. 1 ) THEN ! (CppOnly=1 : SMATRIX1 is not called at all)
            CALL RESET_CUMULATIVE_VARIABLE() ! mimic 'avoid bias of the initialization' within SMATRIX1
          ENDIF
        ENDIF
        call counters_smatrix1multi_start( 0, nb_page_loop ) ! kokkos=0
        IF ( .NOT. MULTI_CHANNEL ) THEN
          CALL FBRIDGESEQUENCE(FBRIDGE_PBRIDGE,
     &      P_MULTI, ALL_G, OUT2, 0) ! 0: multi channel disabled
        ELSE
          IF( SDE_STRAT.NE.1 ) THEN
            WRITE(6,*) 'ERROR! The kokkos bridge requires SDE=1' ! multi channel single-diagram enhancement strategy
            STOP
          ENDIF
          CALL FBRIDGESEQUENCE(FBRIDGE_PBRIDGE,
     &      P_MULTI, ALL_G, OUT2, CHANNEL) ! 1-N: multi channel enabled
        ENDIF
        call counters_smatrix1multi_stop( 0 ) ! kokkos=0
      ENDIF

      IF( FBRIDGE_MODE .LT. 0 ) THEN ! (BothQuiet=-1 or BothDebug=-2)
        DO IVEC=1, NB_PAGE_LOOP
          CBYF1 = OUT2(IVEC)/OUT(IVEC) - 1
          FBRIDGE_NCBYF1 = FBRIDGE_NCBYF1 + 1
          FBRIDGE_CBYF1SUM = FBRIDGE_CBYF1SUM + CBYF1
          FBRIDGE_CBYF1SUM2 = FBRIDGE_CBYF1SUM2 + CBYF1 * CBYF1
          IF( CBYF1 .GT. FBRIDGE_CBYF1MAX ) FBRIDGE_CBYF1MAX = CBYF1
          IF( CBYF1 .LT. FBRIDGE_CBYF1MIN ) FBRIDGE_CBYF1MIN = CBYF1
          IF( FBRIDGE_MODE .EQ. -2 ) THEN ! (BothDebug=-2)
            WRITE (*,'(I2,2E16.8,F23.11)')
     &        IVEC, OUT(IVEC), OUT2(IVEC), 1+CBYF1
          ENDIF
          IF( ABS(CBYF1).GT.5E-5 .AND. NWARNINGS.LT.20 ) THEN
            NWARNINGS = NWARNINGS + 1
            WRITE (*,'(A,I2,A,I4,2E16.8,F23.11)')
     &        'WARNING! (', NWARNINGS, '/20) Deviation more than 5E-5',
     &        IVEC, OUT(IVEC), OUT2(IVEC), 1+CBYF1
          ENDIF
        END DO
      ENDIF

      IF( FBRIDGE_MODE .EQ. 1 .OR. FBRIDGE_MODE .LT. 0 ) THEN ! (CppOnly=1 or BothQuiet=-1 or BothDebug=-2)
        DO IVEC=1, NB_PAGE_LOOP
          OUT(IVEC) = OUT2(IVEC) ! use the kokkos ME instead of the fortran ME!
        END DO
      ENDIF

      IF( FBRIDGE_MODE .EQ. 1 ) THEN ! (CppOnly=1 : SMATRIX1 is not called at all, JAMP2_MULTI is not filled)
        DO IVEC=1, NB_PAGE_LOOP
          JAMP2_MULTI(0,IVEC) = 120 ! workaround for https://github.com/oliviermattelaer/mg5amc_test/issues/14
        END DO
      ENDIF
#endif

      IF ( FIRST_CHID ) THEN
        IF ( MULTI_CHANNEL ) THEN
          WRITE (*,*) 'MULTI_CHANNEL = TRUE'
        ELSE
          WRITE (*,*) 'MULTI_CHANNEL = FALSE'
        ENDIF
        WRITE (*,*) 'CHANNEL_ID =', CHANNEL
        FIRST_CHID = .FALSE.
      ENDIF

      RETURN
      END

      INTEGER FUNCTION GET_NHEL1(HEL, IPART)
C     if hel>0 return the helicity of particule ipart for the selected
C      helicity configuration
C     if hel=0 return the number of helicity state possible for that
C      particle 
      IMPLICIT NONE
      INTEGER HEL,I, IPART
      INCLUDE 'nexternal.inc'
      INTEGER ONE_NHEL(NEXTERNAL)
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=128)
      INTEGER NHEL(NEXTERNAL,0:NCOMB)
      DATA (NHEL(I,0),I=1,7) / 2, 2, 2, 2, 2, 2, 2/
      DATA (NHEL(I,   1),I=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,   2),I=1,7) /-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,   3),I=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,   4),I=1,7) /-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,   5),I=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,   6),I=1,7) /-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,   7),I=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,   8),I=1,7) /-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,   9),I=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,  10),I=1,7) /-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,  11),I=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,  12),I=1,7) /-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,  13),I=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,  14),I=1,7) /-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,  15),I=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  16),I=1,7) /-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  17),I=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  18),I=1,7) /-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  19),I=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  20),I=1,7) /-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  21),I=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  22),I=1,7) /-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  23),I=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  24),I=1,7) /-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  25),I=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  26),I=1,7) /-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  27),I=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  28),I=1,7) /-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  29),I=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  30),I=1,7) /-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  31),I=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  32),I=1,7) /-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  33),I=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  34),I=1,7) /-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  35),I=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  36),I=1,7) /-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  37),I=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  38),I=1,7) /-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  39),I=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  40),I=1,7) /-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  41),I=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,  42),I=1,7) /-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,  43),I=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,  44),I=1,7) /-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,  45),I=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,  46),I=1,7) /-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,  47),I=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  48),I=1,7) /-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  49),I=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  50),I=1,7) /-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  51),I=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  52),I=1,7) /-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  53),I=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  54),I=1,7) /-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  55),I=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  56),I=1,7) /-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  57),I=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  58),I=1,7) /-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  59),I=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  60),I=1,7) /-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  61),I=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  62),I=1,7) /-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  63),I=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  64),I=1,7) /-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  65),I=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  66),I=1,7) / 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  67),I=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  68),I=1,7) / 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  69),I=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  70),I=1,7) / 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  71),I=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  72),I=1,7) / 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  73),I=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,  74),I=1,7) / 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,  75),I=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,  76),I=1,7) / 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,  77),I=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,  78),I=1,7) / 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,  79),I=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  80),I=1,7) / 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  81),I=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  82),I=1,7) / 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  83),I=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  84),I=1,7) / 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  85),I=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  86),I=1,7) / 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  87),I=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  88),I=1,7) / 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  89),I=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  90),I=1,7) / 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  91),I=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  92),I=1,7) / 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  93),I=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  94),I=1,7) / 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  95),I=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  96),I=1,7) / 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  97),I=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  98),I=1,7) / 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  99),I=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 100),I=1,7) / 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 101),I=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 102),I=1,7) / 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 103),I=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 104),I=1,7) / 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 105),I=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 106),I=1,7) / 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 107),I=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 108),I=1,7) / 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 109),I=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 110),I=1,7) / 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 111),I=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 112),I=1,7) / 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 113),I=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 114),I=1,7) / 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 115),I=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 116),I=1,7) / 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 117),I=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 118),I=1,7) / 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 119),I=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 120),I=1,7) / 1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 121),I=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 122),I=1,7) / 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 123),I=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 124),I=1,7) / 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 125),I=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 126),I=1,7) / 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 127),I=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 128),I=1,7) / 1, 1, 1,-1, 1, 1, 1/

      GET_NHEL1 = NHEL(IPART, IABS(HEL))
      RETURN
      END


