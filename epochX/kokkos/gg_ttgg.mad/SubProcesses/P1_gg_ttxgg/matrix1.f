      SUBROUTINE SMATRIX1(P, RHEL, CHANNEL, ANS, JAMP2, IVEC)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.4.0_lo_vect, 2022-05-06
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     MadGraph5_aMC@NLO for Madevent Version
C     
C     Returns amplitude squared -- no average over initial
C      state/symmetry factor
C     and helicities
C     for the point in phase space P(0:3,NEXTERNAL)
C     
C     Process: g g > t t~ g g WEIGHTED<=4 @1
C     
      USE DISCRETESAMPLER
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INCLUDE 'genps.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=64)
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=159)
      INTEGER    NDIAGS
      PARAMETER (NDIAGS=123)
      INTEGER    THEL
      PARAMETER (THEL=2*NCOMB)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL),ANS
      DOUBLE PRECISION RHEL  ! random number for selecting helicity
      INTEGER CHANNEL  ! channel to keep for the multi-channel
      INTEGER IVEC  ! for using the correct coupling
C     
C     global (due to reading writting) 
C     
      LOGICAL GOODHEL(NCOMB,2)
      INTEGER NTRY(2)
      COMMON/BLOCK_GOODHEL/NTRY,GOODHEL

C     
C     LOCAL VARIABLES 
C     
      INTEGER CONFSUB(MAXSPROC,LMAXCONFIGS)
      INCLUDE 'config_subproc_map.inc'
      INTEGER NHEL(NEXTERNAL,NCOMB)
      INTEGER ISHEL(2)
      REAL*8 T,MATRIX1
      REAL*8 R,SUMHEL,TS(NCOMB)
      INTEGER I,IDEN
      INTEGER JC(NEXTERNAL),II
      REAL*8 HWGT, XTOT, XTRY, XREJ, XR, YFRAC(0:NCOMB)
      INTEGER NGOOD(2), IGOOD(NCOMB,2)
      INTEGER JHEL(2), J, JJ
      INTEGER THIS_NTRY(2)
      SAVE THIS_NTRY
      INTEGER NB_FAIL
      SAVE NB_FAIL
      DATA THIS_NTRY /0,0/
      DATA NB_FAIL /0/
      DOUBLE PRECISION GET_CHANNEL_CUT
      EXTERNAL GET_CHANNEL_CUT

C     
C     This is just to temporarily store the reference grid for
C      helicity of the DiscreteSampler so as to obtain its number of
C      entries with ref_helicity_grid%n_tot_entries
      TYPE(SAMPLEDDIMENSION) REF_HELICITY_GRID
C     
C     GLOBAL VARIABLES
C     
      LOGICAL INIT_MODE
      COMMON /TO_DETERMINE_ZERO_HEL/INIT_MODE
      include 'vector.inc'
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)

      CHARACTER*101         HEL_BUFF
      COMMON/TO_HELICITY/  HEL_BUFF

      INTEGER NB_SPIN_STATE_IN(2)
      COMMON /NB_HEL_STATE/ NB_SPIN_STATE_IN

      INTEGER IMIRROR, IPROC
      COMMON/TO_MIRROR/ IMIRROR,IPROC

      DOUBLE PRECISION TMIN_FOR_CHANNEL
      INTEGER SDE_STRAT  ! 1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      COMMON/TO_CHANNEL_STRAT/TMIN_FOR_CHANNEL,	SDE_STRAT

      REAL*8 POL(2)
      COMMON/TO_POLARIZATION/ POL

      DOUBLE PRECISION SMALL_WIDTH_TREATMENT
      COMMON/NARROW_WIDTH/SMALL_WIDTH_TREATMENT

      INTEGER          ISUM_HEL
      LOGICAL                    MULTI_CHANNEL
      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
      DATA XTRY, XREJ /0,0/
      DATA NGOOD /0,0/
      DATA ISHEL/0,0/
      SAVE YFRAC, IGOOD, JHEL
      DATA (NHEL(I,   1),I=1,6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,   2),I=1,6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,   3),I=1,6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,   4),I=1,6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,   5),I=1,6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,   6),I=1,6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,   7),I=1,6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,   8),I=1,6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,   9),I=1,6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  10),I=1,6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  11),I=1,6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  12),I=1,6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  13),I=1,6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  14),I=1,6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  15),I=1,6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  16),I=1,6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  17),I=1,6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  18),I=1,6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  19),I=1,6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  20),I=1,6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  21),I=1,6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  22),I=1,6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  23),I=1,6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  24),I=1,6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  25),I=1,6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  26),I=1,6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  27),I=1,6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  28),I=1,6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  29),I=1,6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  30),I=1,6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  31),I=1,6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  32),I=1,6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  33),I=1,6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,  34),I=1,6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,  35),I=1,6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  36),I=1,6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  37),I=1,6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,  38),I=1,6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,  39),I=1,6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,  40),I=1,6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,  41),I=1,6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  42),I=1,6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  43),I=1,6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  44),I=1,6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  45),I=1,6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  46),I=1,6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  47),I=1,6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  48),I=1,6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  49),I=1,6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  50),I=1,6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  51),I=1,6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  52),I=1,6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  53),I=1,6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  54),I=1,6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  55),I=1,6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  56),I=1,6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  57),I=1,6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  58),I=1,6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  59),I=1,6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  60),I=1,6) / 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  61),I=1,6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  62),I=1,6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  63),I=1,6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  64),I=1,6) / 1, 1, 1,-1, 1, 1/
      DATA IDEN/512/

C     To be able to control when the matrix<i> subroutine can add
C      entries to the grid for the MC over helicity configuration
      LOGICAL ALLOW_HELICITY_GRID_ENTRIES
      COMMON/TO_ALLOW_HELICITY_GRID_ENTRIES/ALLOW_HELICITY_GRID_ENTRIES

C     ----------
C     BEGIN CODE
C     ----------

      call counters_smatrix1_start()
      NTRY(IMIRROR)=NTRY(IMIRROR)+1
      THIS_NTRY(IMIRROR) = THIS_NTRY(IMIRROR)+1
      DO I=1,NEXTERNAL
        JC(I) = +1
      ENDDO

      IF (MULTI_CHANNEL) THEN
        DO I=1,NDIAGS
          AMP2(I)=0D0
        ENDDO
        JAMP2(0)=24
        DO I=1,INT(JAMP2(0))
          JAMP2(I)=0D0
        ENDDO
      ENDIF
      ANS = 0D0
      WRITE(HEL_BUFF,'(20I5)') (0,I=1,NEXTERNAL)
      DO I=1,NCOMB
        TS(I)=0D0
      ENDDO

        !   If the helicity grid status is 0, this means that it is not yet initialized.
        !   If HEL_PICKED==-1, this means that calls to other matrix<i> where in initialization mode as well for the helicity.
      IF ((ISHEL(IMIRROR).EQ.0.AND.ISUM_HEL.EQ.0)
     $ .OR.(DS_GET_DIM_STATUS('Helicity').EQ.0).OR.(HEL_PICKED.EQ.-1))
     $  THEN
        DO I=1,NCOMB
          IF (GOODHEL(I,IMIRROR) .OR. NTRY(IMIRROR)
     $     .LE.MAXTRIES.OR.(ISUM_HEL.NE.0).OR.THIS_NTRY(IMIRROR).LE.10)
     $      THEN
            T=MATRIX1(P ,NHEL(1,I),JC(1),I,AMP2, JAMP2, IVEC)

            IF (ISUM_HEL.NE.0.AND.DS_GET_DIM_STATUS('Helicity')
     $       .EQ.0.AND.ALLOW_HELICITY_GRID_ENTRIES) THEN
              CALL DS_ADD_ENTRY('Helicity',I,T)
            ENDIF
            ANS=ANS+DABS(T)
            TS(I)=T
          ENDIF
        ENDDO
        IF(NTRY(IMIRROR).EQ.(MAXTRIES+1)) THEN
          CALL RESET_CUMULATIVE_VARIABLE()  ! avoid biais of the initialization
        ENDIF
        IF (ISUM_HEL.NE.0) THEN
            !         We set HEL_PICKED to -1 here so that later on, the call to DS_add_point in dsample.f does not add anything to the grid since it was already done here.
          HEL_PICKED = -1
            !         For safety, hardset the helicity sampling jacobian to 0.0d0 to make sure it is not .
          HEL_JACOBIAN   = 1.0D0
            !         We don't want to re-update the helicity grid if it was already updated by another matrix<i>, so we make sure that the reference grid is empty.
          REF_HELICITY_GRID = DS_GET_DIMENSION(REF_GRID,'Helicity')
          IF((DS_GET_DIM_STATUS('Helicity').EQ.1)
     $     .AND.(REF_HELICITY_GRID%N_TOT_ENTRIES.EQ.0)) THEN
              !           If we finished the initialization we can update the grid so as to start sampling over it.
              !           However the grid will now be filled by dsample with different kind of weights (including pdf, flux, etc...) so by setting the grid_mode of the reference grid to 'initialization' we make sure it will be overwritten (as opposed to 'combined') by the running grid at the next update.
            CALL DS_UPDATE_GRID('Helicity')
            CALL DS_SET_GRID_MODE('Helicity','init')
          ENDIF
        ELSE
          JHEL(IMIRROR) = 1
          IF(NTRY(IMIRROR).LE.MAXTRIES.OR.THIS_NTRY(IMIRROR).LE.10)THEN
            DO I=1,NCOMB
              IF(INIT_MODE) THEN
                IF (DABS(TS(I)).GT.ANS*LIMHEL/NCOMB) THEN
                  PRINT *, 'Matrix Element/Good Helicity: 1 ', I,
     $              'IMIRROR', IMIRROR
                ENDIF
              ELSE IF (.NOT.GOODHEL(I,IMIRROR) .AND. (DABS(TS(I))
     $         .GT.ANS*LIMHEL/NCOMB)) THEN
                GOODHEL(I,IMIRROR)=.TRUE.
                NGOOD(IMIRROR) = NGOOD(IMIRROR) +1
                IGOOD(NGOOD(IMIRROR),IMIRROR) = I
                PRINT *,'Added good helicity ',I,TS(I)*NCOMB/ANS,' in'
     $           //' event ',NTRY(IMIRROR), 'local:',THIS_NTRY(IMIRROR)
              ENDIF
            ENDDO
          ENDIF
          IF(NTRY(IMIRROR).EQ.MAXTRIES)THEN
            ISHEL(IMIRROR)=MIN(ISUM_HEL,NGOOD(IMIRROR))
          ENDIF
        ENDIF
      ELSE IF (.NOT.INIT_MODE) THEN  ! random helicity 
C       The helicity configuration was chosen already by genps and put
C        in a common block defined in genps.inc.
        I = HEL_PICKED

        T=MATRIX1(P ,NHEL(1,I),JC(1),I,AMP2, JAMP2, IVEC)


C       Always one helicity at a time
        ANS = T
C       Include the Jacobian from helicity sampling
        ANS = ANS * HEL_JACOBIAN

        WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
      ELSE
        ANS = 1D0
        call counters_smatrix1_stop()
        RETURN
      ENDIF
      IF (ANS.NE.0D0.AND.(ISUM_HEL .NE. 1.OR.HEL_PICKED.EQ.-1)) THEN
C       CALL RANMAR(R) ! rhel passed as input
        SUMHEL=0D0
        DO I=1,NCOMB
          SUMHEL=SUMHEL+DABS(TS(I))/ANS
          IF(RHEL.LT.SUMHEL)THEN
            WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
C           Set right sign for ANS, based on sign of chosen helicity
            ANS=DSIGN(ANS,TS(I))
            GOTO 10
          ENDIF
        ENDDO
 10     CONTINUE
      ENDIF
      IF (MULTI_CHANNEL) THEN
        XTOT=0D0
        DO I=1,LMAXCONFIGS
          J = CONFSUB(1, I)
          IF (J.NE.0) THEN
            IF(SDE_STRAT.EQ.1) THEN
              AMP2(J) = AMP2(J) * GET_CHANNEL_CUT(P, I)
              XTOT=XTOT+AMP2(J)
            ELSE
              AMP2(J) = GET_CHANNEL_CUT(P, I)
              XTOT=XTOT+AMP2(J)
            ENDIF
          ENDIF
        ENDDO
        IF (XTOT.NE.0D0) THEN
          ANS=ANS*AMP2(CHANNEL)/XTOT
        ELSE IF(ANS.NE.0D0) THEN
          IF(NB_FAIL.GE.10)THEN
            WRITE(*,*) 'Problem in the multi-channeling. All amp2 are'
     $       //' zero but not the total matrix-element'

            STOP 1
          ELSE
            NB_FAIL = NB_FAIL +1
          ENDIF
        ENDIF
      ENDIF
      ANS=ANS/DBLE(IDEN)
      call counters_smatrix1_stop()
      END


      REAL*8 FUNCTION MATRIX1(P,NHEL,IC, IHEL,AMP2, JAMP2, IVEC)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.4.0_lo_vect, 2022-05-06
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: g g > t t~ g g WEIGHTED<=4 @1
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=159)
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=64)
      INCLUDE 'genps.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INTEGER    NWAVEFUNCS,     NCOLOR
      PARAMETER (NWAVEFUNCS=26, NCOLOR=24)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
      INTEGER NAMPSO, NSQAMPSO
      PARAMETER (NAMPSO=1, NSQAMPSO=1)
      LOGICAL CHOSEN_SO_CONFIGS(NSQAMPSO)
      DATA CHOSEN_SO_CONFIGS/.TRUE./
      SAVE CHOSEN_SO_CONFIGS
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
      INTEGER IHEL
      INTEGER IVEC
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,M,N
      COMPLEX*16 ZTEMP, TMP_JAMP(163)
      REAL*8 CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR,NAMPSO)
      COMPLEX*16 W(6,NWAVEFUNCS)
C     Needed for v4 models
      COMPLEX*16 DUM0,DUM1
      DATA DUM0, DUM1/(0D0, 0D0), (1D0, 0D0)/

      DOUBLE PRECISION FK_ZERO
      DOUBLE PRECISION FK_MDL_WT
      SAVE FK_ZERO
      SAVE FK_MDL_WT

      LOGICAL FIRST
      DATA FIRST /.TRUE./
      SAVE FIRST
C     
C     FUNCTION
C     
      INTEGER SQSOINDEX1
C     
C     GLOBAL VARIABLES
C     
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      include 'vector.inc'
      include 'coupl.inc'

      DOUBLE PRECISION SMALL_WIDTH_TREATMENT
      COMMON/NARROW_WIDTH/SMALL_WIDTH_TREATMENT

      LOGICAL INIT_MODE
      COMMON/TO_DETERMINE_ZERO_HEL/INIT_MODE

      LOGICAL ZEROAMP_1(NCOMB,NGRAPHS)
      COMMON/TO_ZEROAMP_1/ZEROAMP_1

      DOUBLE PRECISION TMIN_FOR_CHANNEL
      INTEGER SDE_STRAT  ! 1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      COMMON/TO_CHANNEL_STRAT/TMIN_FOR_CHANNEL,	SDE_STRAT

C     
C     COLOR DATA
C     
      DATA (CF(I,  1),I=  1,  6) /9.481481481481481D+00,
     $ -1.185185185185185D+00,-1.185185185185185D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,1.481481481481481D
     $ +00/
      DATA (CF(I,  1),I=  7, 12) /-1.185185185185185D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02,-1.851851851851852D-02,
     $ -1.851851851851852D-01/
      DATA (CF(I,  1),I= 13, 18) /1.481481481481481D-01,
     $ -1.851851851851852D-02,1.481481481481481D+00,
     $ -1.851851851851852D-01,1.314814814814815D+00,1.148148148148148D
     $ +00/
      DATA (CF(I,  1),I= 19, 24) /-1.851851851851852D-02,
     $ -1.851851851851852D-01,-1.851851851851852D-01
     $ ,1.148148148148148D+00,1.148148148148148D+00,
     $ -5.185185185185185D-01/
C     1 T(1,2,5,6,3,4)
      DATA (CF(I,  2),I=  1,  6) /-1.185185185185185D+00
     $ ,9.481481481481481D+00,1.481481481481481D-01,1.481481481481481D
     $ +00,-1.185185185185185D+00,1.481481481481481D-01/
      DATA (CF(I,  2),I=  7, 12) /1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02/
      DATA (CF(I,  2),I= 13, 18) /-1.851851851851852D-02,
     $ -1.851851851851852D-01,-1.851851851851852D-01
     $ ,1.148148148148148D+00,1.148148148148148D+00,
     $ -5.185185185185185D-01/
      DATA (CF(I,  2),I= 19, 24) /1.481481481481481D-01,
     $ -1.851851851851852D-02,1.481481481481481D+00,
     $ -1.851851851851852D-01,1.314814814814815D+00,1.148148148148148D
     $ +00/
C     1 T(1,2,6,5,3,4)
      DATA (CF(I,  3),I=  1,  6) /-1.185185185185185D+00
     $ ,1.481481481481481D-01,9.481481481481481D+00,
     $ -1.185185185185185D+00,1.481481481481481D+00,1.481481481481481D
     $ -01/
      DATA (CF(I,  3),I=  7, 12) /1.481481481481481D-01,
     $ -1.851851851851852D-02,1.481481481481481D+00,
     $ -1.851851851851852D-01,1.314814814814815D+00,1.148148148148148D
     $ +00/
      DATA (CF(I,  3),I= 13, 18) /-1.185185185185185D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02,-1.851851851851852D-02,
     $ -1.851851851851852D-01/
      DATA (CF(I,  3),I= 19, 24) /-1.851851851851852D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,
     $ -5.185185185185185D-01,-1.851851851851852D-01
     $ ,1.148148148148148D+00/
C     1 T(1,5,2,6,3,4)
      DATA (CF(I,  4),I=  1,  6) /1.481481481481481D-01
     $ ,1.481481481481481D+00,-1.185185185185185D+00
     $ ,9.481481481481481D+00,1.481481481481481D-01,
     $ -1.185185185185185D+00/
      DATA (CF(I,  4),I=  7, 12) /-1.851851851851852D-02,
     $ -1.851851851851852D-01,-1.851851851851852D-01
     $ ,1.148148148148148D+00,1.148148148148148D+00,
     $ -5.185185185185185D-01/
      DATA (CF(I,  4),I= 13, 18) /1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02/
      DATA (CF(I,  4),I= 19, 24) /-1.851851851851852D-02
     $ ,1.481481481481481D-01,1.314814814814815D+00,1.148148148148148D
     $ +00,1.481481481481481D+00,-1.851851851851852D-01/
C     1 T(1,5,6,2,3,4)
      DATA (CF(I,  5),I=  1,  6) /1.481481481481481D-01,
     $ -1.185185185185185D+00,1.481481481481481D+00,1.481481481481481D
     $ -01,9.481481481481481D+00,-1.185185185185185D+00/
      DATA (CF(I,  5),I=  7, 12) /-1.851851851851852D-02
     $ ,1.481481481481481D-01,1.314814814814815D+00,1.148148148148148D
     $ +00,1.481481481481481D+00,-1.851851851851852D-01/
      DATA (CF(I,  5),I= 13, 18) /-1.851851851851852D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,
     $ -5.185185185185185D-01,-1.851851851851852D-01
     $ ,1.148148148148148D+00/
      DATA (CF(I,  5),I= 19, 24) /-1.185185185185185D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02,-1.851851851851852D-02,
     $ -1.851851851851852D-01/
C     1 T(1,6,2,5,3,4)
      DATA (CF(I,  6),I=  1,  6) /1.481481481481481D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.185185185185185D+00
     $ ,9.481481481481481D+00/
      DATA (CF(I,  6),I=  7, 12) /-1.851851851851852D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,
     $ -5.185185185185185D-01,-1.851851851851852D-01
     $ ,1.148148148148148D+00/
      DATA (CF(I,  6),I= 13, 18) /-1.851851851851852D-02
     $ ,1.481481481481481D-01,1.314814814814815D+00,1.148148148148148D
     $ +00,1.481481481481481D+00,-1.851851851851852D-01/
      DATA (CF(I,  6),I= 19, 24) /1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02/
C     1 T(1,6,5,2,3,4)
      DATA (CF(I,  7),I=  1,  6) /-1.185185185185185D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02,-1.851851851851852D-02,
     $ -1.851851851851852D-01/
      DATA (CF(I,  7),I=  7, 12) /9.481481481481481D+00,
     $ -1.185185185185185D+00,-1.185185185185185D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,1.481481481481481D
     $ +00/
      DATA (CF(I,  7),I= 13, 18) /1.481481481481481D+00,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,1.314814814814815D
     $ +00/
      DATA (CF(I,  7),I= 19, 24) /-1.851851851851852D-01
     $ ,1.148148148148148D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01,-5.185185185185185D-01
     $ ,1.148148148148148D+00/
C     1 T(2,1,5,6,3,4)
      DATA (CF(I,  8),I=  1,  6) /1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02/
      DATA (CF(I,  8),I=  7, 12) /-1.185185185185185D+00
     $ ,9.481481481481481D+00,1.481481481481481D-01,1.481481481481481D
     $ +00,-1.185185185185185D+00,1.481481481481481D-01/
      DATA (CF(I,  8),I= 13, 18) /-1.851851851851852D-01
     $ ,1.148148148148148D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01,-5.185185185185185D-01
     $ ,1.148148148148148D+00/
      DATA (CF(I,  8),I= 19, 24) /1.481481481481481D+00,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,1.314814814814815D
     $ +00/
C     1 T(2,1,6,5,3,4)
      DATA (CF(I,  9),I=  1,  6) /1.481481481481481D-01,
     $ -1.851851851851852D-02,1.481481481481481D+00,
     $ -1.851851851851852D-01,1.314814814814815D+00,1.148148148148148D
     $ +00/
      DATA (CF(I,  9),I=  7, 12) /-1.185185185185185D+00
     $ ,1.481481481481481D-01,9.481481481481481D+00,
     $ -1.185185185185185D+00,1.481481481481481D+00,1.481481481481481D
     $ -01/
      DATA (CF(I,  9),I= 13, 18) /1.481481481481481D-01,
     $ -1.851851851851852D-02,-1.185185185185185D+00
     $ ,1.481481481481481D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02/
      DATA (CF(I,  9),I= 19, 24) /1.148148148148148D+00,
     $ -5.185185185185185D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,
     $ -1.851851851851852D-01/
C     1 T(2,5,1,6,3,4)
      DATA (CF(I, 10),I=  1,  6) /-1.851851851851852D-02,
     $ -1.851851851851852D-01,-1.851851851851852D-01
     $ ,1.148148148148148D+00,1.148148148148148D+00,
     $ -5.185185185185185D-01/
      DATA (CF(I, 10),I=  7, 12) /1.481481481481481D-01
     $ ,1.481481481481481D+00,-1.185185185185185D+00
     $ ,9.481481481481481D+00,1.481481481481481D-01,
     $ -1.185185185185185D+00/
      DATA (CF(I, 10),I= 13, 18) /-1.851851851851852D-02,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01/
      DATA (CF(I, 10),I= 19, 24) /1.314814814814815D+00
     $ ,1.148148148148148D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01,-1.851851851851852D-01
     $ ,1.481481481481481D+00/
C     1 T(2,5,6,1,3,4)
      DATA (CF(I, 11),I=  1,  6) /-1.851851851851852D-02
     $ ,1.481481481481481D-01,1.314814814814815D+00,1.148148148148148D
     $ +00,1.481481481481481D+00,-1.851851851851852D-01/
      DATA (CF(I, 11),I=  7, 12) /1.481481481481481D-01,
     $ -1.185185185185185D+00,1.481481481481481D+00,1.481481481481481D
     $ -01,9.481481481481481D+00,-1.185185185185185D+00/
      DATA (CF(I, 11),I= 13, 18) /1.148148148148148D+00,
     $ -5.185185185185185D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,
     $ -1.851851851851852D-01/
      DATA (CF(I, 11),I= 19, 24) /1.481481481481481D-01,
     $ -1.851851851851852D-02,-1.185185185185185D+00
     $ ,1.481481481481481D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02/
C     1 T(2,6,1,5,3,4)
      DATA (CF(I, 12),I=  1,  6) /-1.851851851851852D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,
     $ -5.185185185185185D-01,-1.851851851851852D-01
     $ ,1.148148148148148D+00/
      DATA (CF(I, 12),I=  7, 12) /1.481481481481481D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.185185185185185D+00
     $ ,9.481481481481481D+00/
      DATA (CF(I, 12),I= 13, 18) /1.314814814814815D+00
     $ ,1.148148148148148D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01,-1.851851851851852D-01
     $ ,1.481481481481481D+00/
      DATA (CF(I, 12),I= 19, 24) /-1.851851851851852D-02,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01/
C     1 T(2,6,5,1,3,4)
      DATA (CF(I, 13),I=  1,  6) /1.481481481481481D-01,
     $ -1.851851851851852D-02,-1.185185185185185D+00
     $ ,1.481481481481481D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02/
      DATA (CF(I, 13),I=  7, 12) /1.481481481481481D+00,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,1.314814814814815D
     $ +00/
      DATA (CF(I, 13),I= 13, 18) /9.481481481481481D+00,
     $ -1.185185185185185D+00,-1.185185185185185D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,1.481481481481481D
     $ +00/
      DATA (CF(I, 13),I= 19, 24) /1.148148148148148D+00,
     $ -1.851851851851852D-01,-5.185185185185185D-01
     $ ,1.148148148148148D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01/
C     1 T(5,1,2,6,3,4)
      DATA (CF(I, 14),I=  1,  6) /-1.851851851851852D-02,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01/
      DATA (CF(I, 14),I=  7, 12) /-1.851851851851852D-01
     $ ,1.148148148148148D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01,-5.185185185185185D-01
     $ ,1.148148148148148D+00/
      DATA (CF(I, 14),I= 13, 18) /-1.185185185185185D+00
     $ ,9.481481481481481D+00,1.481481481481481D-01,1.481481481481481D
     $ +00,-1.185185185185185D+00,1.481481481481481D-01/
      DATA (CF(I, 14),I= 19, 24) /-1.851851851851852D-01
     $ ,1.481481481481481D+00,1.148148148148148D+00,1.314814814814815D
     $ +00,1.481481481481481D-01,-1.851851851851852D-02/
C     1 T(5,1,6,2,3,4)
      DATA (CF(I, 15),I=  1,  6) /1.481481481481481D+00,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,1.314814814814815D
     $ +00/
      DATA (CF(I, 15),I=  7, 12) /1.481481481481481D-01,
     $ -1.851851851851852D-02,-1.185185185185185D+00
     $ ,1.481481481481481D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02/
      DATA (CF(I, 15),I= 13, 18) /-1.185185185185185D+00
     $ ,1.481481481481481D-01,9.481481481481481D+00,
     $ -1.185185185185185D+00,1.481481481481481D+00,1.481481481481481D
     $ -01/
      DATA (CF(I, 15),I= 19, 24) /-5.185185185185185D-01
     $ ,1.148148148148148D+00,1.148148148148148D+00,
     $ -1.851851851851852D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02/
C     1 T(5,2,1,6,3,4)
      DATA (CF(I, 16),I=  1,  6) /-1.851851851851852D-01
     $ ,1.148148148148148D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01,-5.185185185185185D-01
     $ ,1.148148148148148D+00/
      DATA (CF(I, 16),I=  7, 12) /-1.851851851851852D-02,
     $ -1.851851851851852D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01/
      DATA (CF(I, 16),I= 13, 18) /1.481481481481481D-01
     $ ,1.481481481481481D+00,-1.185185185185185D+00
     $ ,9.481481481481481D+00,1.481481481481481D-01,
     $ -1.185185185185185D+00/
      DATA (CF(I, 16),I= 19, 24) /1.148148148148148D+00
     $ ,1.314814814814815D+00,-1.851851851851852D-01
     $ ,1.481481481481481D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01/
C     1 T(5,2,6,1,3,4)
      DATA (CF(I, 17),I=  1,  6) /1.314814814814815D+00
     $ ,1.148148148148148D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01,-1.851851851851852D-01
     $ ,1.481481481481481D+00/
      DATA (CF(I, 17),I=  7, 12) /1.148148148148148D+00,
     $ -5.185185185185185D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,
     $ -1.851851851851852D-01/
      DATA (CF(I, 17),I= 13, 18) /1.481481481481481D-01,
     $ -1.185185185185185D+00,1.481481481481481D+00,1.481481481481481D
     $ -01,9.481481481481481D+00,-1.185185185185185D+00/
      DATA (CF(I, 17),I= 19, 24) /-1.851851851851852D-02
     $ ,1.481481481481481D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02,-1.185185185185185D+00
     $ ,1.481481481481481D-01/
C     1 T(5,6,1,2,3,4)
      DATA (CF(I, 18),I=  1,  6) /1.148148148148148D+00,
     $ -5.185185185185185D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02,1.148148148148148D+00,
     $ -1.851851851851852D-01/
      DATA (CF(I, 18),I=  7, 12) /1.314814814814815D+00
     $ ,1.148148148148148D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01,-1.851851851851852D-01
     $ ,1.481481481481481D+00/
      DATA (CF(I, 18),I= 13, 18) /1.481481481481481D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.185185185185185D+00
     $ ,9.481481481481481D+00/
      DATA (CF(I, 18),I= 19, 24) /-1.851851851851852D-01,
     $ -1.851851851851852D-02,-1.851851851851852D-02
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00/
C     1 T(5,6,2,1,3,4)
      DATA (CF(I, 19),I=  1,  6) /-1.851851851851852D-02
     $ ,1.481481481481481D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02,-1.185185185185185D+00
     $ ,1.481481481481481D-01/
      DATA (CF(I, 19),I=  7, 12) /-1.851851851851852D-01
     $ ,1.481481481481481D+00,1.148148148148148D+00,1.314814814814815D
     $ +00,1.481481481481481D-01,-1.851851851851852D-02/
      DATA (CF(I, 19),I= 13, 18) /1.148148148148148D+00,
     $ -1.851851851851852D-01,-5.185185185185185D-01
     $ ,1.148148148148148D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01/
      DATA (CF(I, 19),I= 19, 24) /9.481481481481481D+00,
     $ -1.185185185185185D+00,-1.185185185185185D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,1.481481481481481D
     $ +00/
C     1 T(6,1,2,5,3,4)
      DATA (CF(I, 20),I=  1,  6) /-1.851851851851852D-01,
     $ -1.851851851851852D-02,-1.851851851851852D-02
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00/
      DATA (CF(I, 20),I=  7, 12) /1.148148148148148D+00,
     $ -1.851851851851852D-01,-5.185185185185185D-01
     $ ,1.148148148148148D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01/
      DATA (CF(I, 20),I= 13, 18) /-1.851851851851852D-01
     $ ,1.481481481481481D+00,1.148148148148148D+00,1.314814814814815D
     $ +00,1.481481481481481D-01,-1.851851851851852D-02/
      DATA (CF(I, 20),I= 19, 24) /-1.185185185185185D+00
     $ ,9.481481481481481D+00,1.481481481481481D-01,1.481481481481481D
     $ +00,-1.185185185185185D+00,1.481481481481481D-01/
C     1 T(6,1,5,2,3,4)
      DATA (CF(I, 21),I=  1,  6) /-1.851851851851852D-01
     $ ,1.481481481481481D+00,1.148148148148148D+00,1.314814814814815D
     $ +00,1.481481481481481D-01,-1.851851851851852D-02/
      DATA (CF(I, 21),I=  7, 12) /-1.851851851851852D-02
     $ ,1.481481481481481D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02,-1.185185185185185D+00
     $ ,1.481481481481481D-01/
      DATA (CF(I, 21),I= 13, 18) /-5.185185185185185D-01
     $ ,1.148148148148148D+00,1.148148148148148D+00,
     $ -1.851851851851852D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02/
      DATA (CF(I, 21),I= 19, 24) /-1.185185185185185D+00
     $ ,1.481481481481481D-01,9.481481481481481D+00,
     $ -1.185185185185185D+00,1.481481481481481D+00,1.481481481481481D
     $ -01/
C     1 T(6,2,1,5,3,4)
      DATA (CF(I, 22),I=  1,  6) /1.148148148148148D+00,
     $ -1.851851851851852D-01,-5.185185185185185D-01
     $ ,1.148148148148148D+00,-1.851851851851852D-02,
     $ -1.851851851851852D-01/
      DATA (CF(I, 22),I=  7, 12) /-1.851851851851852D-01,
     $ -1.851851851851852D-02,-1.851851851851852D-02
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00/
      DATA (CF(I, 22),I= 13, 18) /1.148148148148148D+00
     $ ,1.314814814814815D+00,-1.851851851851852D-01
     $ ,1.481481481481481D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01/
      DATA (CF(I, 22),I= 19, 24) /1.481481481481481D-01
     $ ,1.481481481481481D+00,-1.185185185185185D+00
     $ ,9.481481481481481D+00,1.481481481481481D-01,
     $ -1.185185185185185D+00/
C     1 T(6,2,5,1,3,4)
      DATA (CF(I, 23),I=  1,  6) /1.148148148148148D+00
     $ ,1.314814814814815D+00,-1.851851851851852D-01
     $ ,1.481481481481481D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01/
      DATA (CF(I, 23),I=  7, 12) /-5.185185185185185D-01
     $ ,1.148148148148148D+00,1.148148148148148D+00,
     $ -1.851851851851852D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02/
      DATA (CF(I, 23),I= 13, 18) /-1.851851851851852D-02
     $ ,1.481481481481481D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02,-1.185185185185185D+00
     $ ,1.481481481481481D-01/
      DATA (CF(I, 23),I= 19, 24) /1.481481481481481D-01,
     $ -1.185185185185185D+00,1.481481481481481D+00,1.481481481481481D
     $ -01,9.481481481481481D+00,-1.185185185185185D+00/
C     1 T(6,5,1,2,3,4)
      DATA (CF(I, 24),I=  1,  6) /-5.185185185185185D-01
     $ ,1.148148148148148D+00,1.148148148148148D+00,
     $ -1.851851851851852D-01,-1.851851851851852D-01,
     $ -1.851851851851852D-02/
      DATA (CF(I, 24),I=  7, 12) /1.148148148148148D+00
     $ ,1.314814814814815D+00,-1.851851851851852D-01
     $ ,1.481481481481481D+00,-1.851851851851852D-02
     $ ,1.481481481481481D-01/
      DATA (CF(I, 24),I= 13, 18) /-1.851851851851852D-01,
     $ -1.851851851851852D-02,-1.851851851851852D-02
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00/
      DATA (CF(I, 24),I= 19, 24) /1.481481481481481D+00
     $ ,1.481481481481481D-01,1.481481481481481D-01,
     $ -1.185185185185185D+00,-1.185185185185185D+00
     $ ,9.481481481481481D+00/
C     1 T(6,5,2,1,3,4)
C     ----------
C     BEGIN CODE
C     ----------
      call counters_matrix1_start()
      IF (FIRST) THEN
        FIRST=.FALSE.
        IF(ZERO.NE.0D0) FK_ZERO = SIGN(MAX(ABS(ZERO), ABS(ZERO
     $   *SMALL_WIDTH_TREATMENT)), ZERO)
        IF(MDL_WT.NE.0D0) FK_MDL_WT = SIGN(MAX(ABS(MDL_WT), ABS(MDL_MT
     $   *SMALL_WIDTH_TREATMENT)), MDL_WT)

        IF(INIT_MODE) THEN
          ZEROAMP_1(:,:) = .TRUE.
        ENDIF
      ENDIF


      CALL VXXXXX(P(0,1),ZERO,NHEL(1),-1*IC(1),W(1,1))
      CALL VXXXXX(P(0,2),ZERO,NHEL(2),-1*IC(2),W(1,2))
      CALL OXXXXX(P(0,3),MDL_MT,NHEL(3),+1*IC(3),W(1,3))
      CALL IXXXXX(P(0,4),MDL_MT,NHEL(4),-1*IC(4),W(1,4))
      CALL VXXXXX(P(0,5),ZERO,NHEL(5),+1*IC(5),W(1,5))
      CALL VXXXXX(P(0,6),ZERO,NHEL(6),+1*IC(6),W(1,6))
      CALL VVV1P0_1(W(1,1),W(1,2),GC_10(IVEC),ZERO, FK_ZERO,W(1,7))
      CALL FFV1P0_3(W(1,4),W(1,3),GC_11(IVEC),ZERO, FK_ZERO,W(1,8))
C     Amplitude(s) for diagram number 1
      CALL VVVV1_0(W(1,7),W(1,8),W(1,5),W(1,6),GC_12(IVEC),AMP(1))
      CALL VVVV3_0(W(1,7),W(1,8),W(1,5),W(1,6),GC_12(IVEC),AMP(2))
      CALL VVVV4_0(W(1,7),W(1,8),W(1,5),W(1,6),GC_12(IVEC),AMP(3))
      CALL VVV1P0_1(W(1,7),W(1,5),GC_10(IVEC),ZERO, FK_ZERO,W(1,9))
C     Amplitude(s) for diagram number 2
      CALL VVV1_0(W(1,8),W(1,6),W(1,9),GC_10(IVEC),AMP(4))
      CALL VVV1P0_1(W(1,7),W(1,6),GC_10(IVEC),ZERO, FK_ZERO,W(1,10))
C     Amplitude(s) for diagram number 3
      CALL VVV1_0(W(1,8),W(1,5),W(1,10),GC_10(IVEC),AMP(5))
      CALL VVV1P0_1(W(1,5),W(1,6),GC_10(IVEC),ZERO, FK_ZERO,W(1,11))
C     Amplitude(s) for diagram number 4
      CALL VVV1_0(W(1,7),W(1,8),W(1,11),GC_10(IVEC),AMP(6))
      CALL FFV1_1(W(1,3),W(1,5),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,12))
      CALL FFV1_2(W(1,4),W(1,7),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,13))
C     Amplitude(s) for diagram number 5
      CALL FFV1_0(W(1,13),W(1,12),W(1,6),GC_11(IVEC),AMP(7))
C     Amplitude(s) for diagram number 6
      CALL FFV1_0(W(1,4),W(1,12),W(1,10),GC_11(IVEC),AMP(8))
      CALL FFV1_2(W(1,4),W(1,6),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,14))
C     Amplitude(s) for diagram number 7
      CALL FFV1_0(W(1,14),W(1,12),W(1,7),GC_11(IVEC),AMP(9))
      CALL FFV1_1(W(1,3),W(1,6),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,15))
C     Amplitude(s) for diagram number 8
      CALL FFV1_0(W(1,13),W(1,15),W(1,5),GC_11(IVEC),AMP(10))
C     Amplitude(s) for diagram number 9
      CALL FFV1_0(W(1,4),W(1,15),W(1,9),GC_11(IVEC),AMP(11))
      CALL FFV1_2(W(1,4),W(1,5),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,16))
C     Amplitude(s) for diagram number 10
      CALL FFV1_0(W(1,16),W(1,15),W(1,7),GC_11(IVEC),AMP(12))
      CALL FFV1_1(W(1,3),W(1,7),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,17))
C     Amplitude(s) for diagram number 11
      CALL FFV1_0(W(1,16),W(1,17),W(1,6),GC_11(IVEC),AMP(13))
C     Amplitude(s) for diagram number 12
      CALL FFV1_0(W(1,16),W(1,3),W(1,10),GC_11(IVEC),AMP(14))
C     Amplitude(s) for diagram number 13
      CALL FFV1_0(W(1,14),W(1,17),W(1,5),GC_11(IVEC),AMP(15))
C     Amplitude(s) for diagram number 14
      CALL FFV1_0(W(1,14),W(1,3),W(1,9),GC_11(IVEC),AMP(16))
C     Amplitude(s) for diagram number 15
      CALL FFV1_0(W(1,4),W(1,17),W(1,11),GC_11(IVEC),AMP(17))
C     Amplitude(s) for diagram number 16
      CALL FFV1_0(W(1,13),W(1,3),W(1,11),GC_11(IVEC),AMP(18))
      CALL FFV1_1(W(1,3),W(1,1),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,13))
      CALL FFV1_2(W(1,4),W(1,2),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,17))
      CALL FFV1_1(W(1,13),W(1,5),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,9))
C     Amplitude(s) for diagram number 17
      CALL FFV1_0(W(1,17),W(1,9),W(1,6),GC_11(IVEC),AMP(19))
      CALL FFV1_1(W(1,13),W(1,6),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,10))
C     Amplitude(s) for diagram number 18
      CALL FFV1_0(W(1,17),W(1,10),W(1,5),GC_11(IVEC),AMP(20))
C     Amplitude(s) for diagram number 19
      CALL FFV1_0(W(1,17),W(1,13),W(1,11),GC_11(IVEC),AMP(21))
      CALL VVV1P0_1(W(1,2),W(1,5),GC_10(IVEC),ZERO, FK_ZERO,W(1,7))
      CALL FFV1P0_3(W(1,4),W(1,13),GC_11(IVEC),ZERO, FK_ZERO,W(1,18))
C     Amplitude(s) for diagram number 20
      CALL VVV1_0(W(1,7),W(1,6),W(1,18),GC_10(IVEC),AMP(22))
C     Amplitude(s) for diagram number 21
      CALL FFV1_0(W(1,4),W(1,10),W(1,7),GC_11(IVEC),AMP(23))
C     Amplitude(s) for diagram number 22
      CALL FFV1_0(W(1,14),W(1,13),W(1,7),GC_11(IVEC),AMP(24))
      CALL VVV1P0_1(W(1,2),W(1,6),GC_10(IVEC),ZERO, FK_ZERO,W(1,19))
C     Amplitude(s) for diagram number 23
      CALL VVV1_0(W(1,19),W(1,5),W(1,18),GC_10(IVEC),AMP(25))
C     Amplitude(s) for diagram number 24
      CALL FFV1_0(W(1,4),W(1,9),W(1,19),GC_11(IVEC),AMP(26))
C     Amplitude(s) for diagram number 25
      CALL FFV1_0(W(1,16),W(1,13),W(1,19),GC_11(IVEC),AMP(27))
      CALL FFV1_1(W(1,13),W(1,2),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,20))
C     Amplitude(s) for diagram number 26
      CALL FFV1_0(W(1,16),W(1,20),W(1,6),GC_11(IVEC),AMP(28))
C     Amplitude(s) for diagram number 27
      CALL FFV1_0(W(1,16),W(1,10),W(1,2),GC_11(IVEC),AMP(29))
C     Amplitude(s) for diagram number 28
      CALL FFV1_0(W(1,14),W(1,20),W(1,5),GC_11(IVEC),AMP(30))
C     Amplitude(s) for diagram number 29
      CALL FFV1_0(W(1,14),W(1,9),W(1,2),GC_11(IVEC),AMP(31))
C     Amplitude(s) for diagram number 30
      CALL FFV1_0(W(1,4),W(1,20),W(1,11),GC_11(IVEC),AMP(32))
C     Amplitude(s) for diagram number 31
      CALL VVV1_0(W(1,2),W(1,11),W(1,18),GC_10(IVEC),AMP(33))
      CALL VVVV1P0_1(W(1,2),W(1,5),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,18))
      CALL VVVV3P0_1(W(1,2),W(1,5),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,20))
      CALL VVVV4P0_1(W(1,2),W(1,5),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,9))
C     Amplitude(s) for diagram number 32
      CALL FFV1_0(W(1,4),W(1,13),W(1,18),GC_11(IVEC),AMP(34))
      CALL FFV1_0(W(1,4),W(1,13),W(1,20),GC_11(IVEC),AMP(35))
      CALL FFV1_0(W(1,4),W(1,13),W(1,9),GC_11(IVEC),AMP(36))
      CALL FFV1_2(W(1,4),W(1,1),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,13))
      CALL FFV1_1(W(1,3),W(1,2),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,10))
      CALL FFV1_2(W(1,13),W(1,5),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,21))
C     Amplitude(s) for diagram number 33
      CALL FFV1_0(W(1,21),W(1,10),W(1,6),GC_11(IVEC),AMP(37))
      CALL FFV1_2(W(1,13),W(1,6),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,22))
C     Amplitude(s) for diagram number 34
      CALL FFV1_0(W(1,22),W(1,10),W(1,5),GC_11(IVEC),AMP(38))
C     Amplitude(s) for diagram number 35
      CALL FFV1_0(W(1,13),W(1,10),W(1,11),GC_11(IVEC),AMP(39))
      CALL FFV1P0_3(W(1,13),W(1,3),GC_11(IVEC),ZERO, FK_ZERO,W(1,23))
C     Amplitude(s) for diagram number 36
      CALL VVV1_0(W(1,7),W(1,6),W(1,23),GC_10(IVEC),AMP(40))
C     Amplitude(s) for diagram number 37
      CALL FFV1_0(W(1,22),W(1,3),W(1,7),GC_11(IVEC),AMP(41))
C     Amplitude(s) for diagram number 38
      CALL FFV1_0(W(1,13),W(1,15),W(1,7),GC_11(IVEC),AMP(42))
C     Amplitude(s) for diagram number 39
      CALL VVV1_0(W(1,19),W(1,5),W(1,23),GC_10(IVEC),AMP(43))
C     Amplitude(s) for diagram number 40
      CALL FFV1_0(W(1,21),W(1,3),W(1,19),GC_11(IVEC),AMP(44))
C     Amplitude(s) for diagram number 41
      CALL FFV1_0(W(1,13),W(1,12),W(1,19),GC_11(IVEC),AMP(45))
      CALL FFV1_2(W(1,13),W(1,2),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,24))
C     Amplitude(s) for diagram number 42
      CALL FFV1_0(W(1,24),W(1,12),W(1,6),GC_11(IVEC),AMP(46))
C     Amplitude(s) for diagram number 43
      CALL FFV1_0(W(1,22),W(1,12),W(1,2),GC_11(IVEC),AMP(47))
C     Amplitude(s) for diagram number 44
      CALL FFV1_0(W(1,24),W(1,15),W(1,5),GC_11(IVEC),AMP(48))
C     Amplitude(s) for diagram number 45
      CALL FFV1_0(W(1,21),W(1,15),W(1,2),GC_11(IVEC),AMP(49))
C     Amplitude(s) for diagram number 46
      CALL FFV1_0(W(1,24),W(1,3),W(1,11),GC_11(IVEC),AMP(50))
C     Amplitude(s) for diagram number 47
      CALL VVV1_0(W(1,2),W(1,11),W(1,23),GC_10(IVEC),AMP(51))
C     Amplitude(s) for diagram number 48
      CALL FFV1_0(W(1,13),W(1,3),W(1,18),GC_11(IVEC),AMP(52))
      CALL FFV1_0(W(1,13),W(1,3),W(1,20),GC_11(IVEC),AMP(53))
      CALL FFV1_0(W(1,13),W(1,3),W(1,9),GC_11(IVEC),AMP(54))
      CALL VVV1P0_1(W(1,1),W(1,5),GC_10(IVEC),ZERO, FK_ZERO,W(1,13))
      CALL FFV1_2(W(1,4),W(1,13),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,23))
C     Amplitude(s) for diagram number 49
      CALL FFV1_0(W(1,23),W(1,10),W(1,6),GC_11(IVEC),AMP(55))
      CALL VVV1P0_1(W(1,13),W(1,6),GC_10(IVEC),ZERO, FK_ZERO,W(1,24))
C     Amplitude(s) for diagram number 50
      CALL FFV1_0(W(1,4),W(1,10),W(1,24),GC_11(IVEC),AMP(56))
C     Amplitude(s) for diagram number 51
      CALL FFV1_0(W(1,14),W(1,10),W(1,13),GC_11(IVEC),AMP(57))
      CALL FFV1_1(W(1,3),W(1,13),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,21))
C     Amplitude(s) for diagram number 52
      CALL FFV1_0(W(1,17),W(1,21),W(1,6),GC_11(IVEC),AMP(58))
C     Amplitude(s) for diagram number 53
      CALL FFV1_0(W(1,17),W(1,3),W(1,24),GC_11(IVEC),AMP(59))
C     Amplitude(s) for diagram number 54
      CALL FFV1_0(W(1,17),W(1,15),W(1,13),GC_11(IVEC),AMP(60))
C     Amplitude(s) for diagram number 55
      CALL FFV1_0(W(1,4),W(1,21),W(1,19),GC_11(IVEC),AMP(61))
C     Amplitude(s) for diagram number 56
      CALL FFV1_0(W(1,23),W(1,3),W(1,19),GC_11(IVEC),AMP(62))
C     Amplitude(s) for diagram number 57
      CALL VVV1_0(W(1,13),W(1,19),W(1,8),GC_10(IVEC),AMP(63))
C     Amplitude(s) for diagram number 58
      CALL VVVV1_0(W(1,13),W(1,2),W(1,8),W(1,6),GC_12(IVEC),AMP(64))
      CALL VVVV3_0(W(1,13),W(1,2),W(1,8),W(1,6),GC_12(IVEC),AMP(65))
      CALL VVVV4_0(W(1,13),W(1,2),W(1,8),W(1,6),GC_12(IVEC),AMP(66))
      CALL VVV1P0_1(W(1,13),W(1,2),GC_10(IVEC),ZERO, FK_ZERO,W(1,22))
C     Amplitude(s) for diagram number 59
      CALL VVV1_0(W(1,8),W(1,6),W(1,22),GC_10(IVEC),AMP(67))
C     Amplitude(s) for diagram number 60
      CALL VVV1_0(W(1,2),W(1,8),W(1,24),GC_10(IVEC),AMP(68))
C     Amplitude(s) for diagram number 61
      CALL FFV1_0(W(1,4),W(1,15),W(1,22),GC_11(IVEC),AMP(69))
C     Amplitude(s) for diagram number 62
      CALL FFV1_0(W(1,23),W(1,15),W(1,2),GC_11(IVEC),AMP(70))
C     Amplitude(s) for diagram number 63
      CALL FFV1_0(W(1,14),W(1,3),W(1,22),GC_11(IVEC),AMP(71))
C     Amplitude(s) for diagram number 64
      CALL FFV1_0(W(1,14),W(1,21),W(1,2),GC_11(IVEC),AMP(72))
      CALL VVV1P0_1(W(1,1),W(1,6),GC_10(IVEC),ZERO, FK_ZERO,W(1,21))
      CALL FFV1_2(W(1,4),W(1,21),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,22))
C     Amplitude(s) for diagram number 65
      CALL FFV1_0(W(1,22),W(1,10),W(1,5),GC_11(IVEC),AMP(73))
      CALL VVV1P0_1(W(1,21),W(1,5),GC_10(IVEC),ZERO, FK_ZERO,W(1,23))
C     Amplitude(s) for diagram number 66
      CALL FFV1_0(W(1,4),W(1,10),W(1,23),GC_11(IVEC),AMP(74))
C     Amplitude(s) for diagram number 67
      CALL FFV1_0(W(1,16),W(1,10),W(1,21),GC_11(IVEC),AMP(75))
      CALL FFV1_1(W(1,3),W(1,21),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,24))
C     Amplitude(s) for diagram number 68
      CALL FFV1_0(W(1,17),W(1,24),W(1,5),GC_11(IVEC),AMP(76))
C     Amplitude(s) for diagram number 69
      CALL FFV1_0(W(1,17),W(1,3),W(1,23),GC_11(IVEC),AMP(77))
C     Amplitude(s) for diagram number 70
      CALL FFV1_0(W(1,17),W(1,12),W(1,21),GC_11(IVEC),AMP(78))
C     Amplitude(s) for diagram number 71
      CALL FFV1_0(W(1,4),W(1,24),W(1,7),GC_11(IVEC),AMP(79))
C     Amplitude(s) for diagram number 72
      CALL FFV1_0(W(1,22),W(1,3),W(1,7),GC_11(IVEC),AMP(80))
C     Amplitude(s) for diagram number 73
      CALL VVV1_0(W(1,21),W(1,7),W(1,8),GC_10(IVEC),AMP(81))
C     Amplitude(s) for diagram number 74
      CALL VVVV1_0(W(1,21),W(1,2),W(1,8),W(1,5),GC_12(IVEC),AMP(82))
      CALL VVVV3_0(W(1,21),W(1,2),W(1,8),W(1,5),GC_12(IVEC),AMP(83))
      CALL VVVV4_0(W(1,21),W(1,2),W(1,8),W(1,5),GC_12(IVEC),AMP(84))
      CALL VVV1P0_1(W(1,21),W(1,2),GC_10(IVEC),ZERO, FK_ZERO,W(1,13))
C     Amplitude(s) for diagram number 75
      CALL VVV1_0(W(1,8),W(1,5),W(1,13),GC_10(IVEC),AMP(85))
C     Amplitude(s) for diagram number 76
      CALL VVV1_0(W(1,2),W(1,8),W(1,23),GC_10(IVEC),AMP(86))
C     Amplitude(s) for diagram number 77
      CALL FFV1_0(W(1,4),W(1,12),W(1,13),GC_11(IVEC),AMP(87))
C     Amplitude(s) for diagram number 78
      CALL FFV1_0(W(1,22),W(1,12),W(1,2),GC_11(IVEC),AMP(88))
C     Amplitude(s) for diagram number 79
      CALL FFV1_0(W(1,16),W(1,3),W(1,13),GC_11(IVEC),AMP(89))
C     Amplitude(s) for diagram number 80
      CALL FFV1_0(W(1,16),W(1,24),W(1,2),GC_11(IVEC),AMP(90))
      CALL FFV1_1(W(1,10),W(1,1),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,24))
C     Amplitude(s) for diagram number 81
      CALL FFV1_0(W(1,16),W(1,24),W(1,6),GC_11(IVEC),AMP(91))
      CALL FFV1_2(W(1,16),W(1,1),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,13))
C     Amplitude(s) for diagram number 82
      CALL FFV1_0(W(1,13),W(1,10),W(1,6),GC_11(IVEC),AMP(92))
C     Amplitude(s) for diagram number 83
      CALL FFV1_0(W(1,14),W(1,24),W(1,5),GC_11(IVEC),AMP(93))
      CALL FFV1_2(W(1,14),W(1,1),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,22))
C     Amplitude(s) for diagram number 84
      CALL FFV1_0(W(1,22),W(1,10),W(1,5),GC_11(IVEC),AMP(94))
C     Amplitude(s) for diagram number 85
      CALL FFV1_0(W(1,4),W(1,24),W(1,11),GC_11(IVEC),AMP(95))
      CALL VVV1P0_1(W(1,1),W(1,11),GC_10(IVEC),ZERO, FK_ZERO,W(1,24))
C     Amplitude(s) for diagram number 86
      CALL FFV1_0(W(1,4),W(1,10),W(1,24),GC_11(IVEC),AMP(96))
      CALL FFV1_2(W(1,17),W(1,1),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,23))
C     Amplitude(s) for diagram number 87
      CALL FFV1_0(W(1,23),W(1,12),W(1,6),GC_11(IVEC),AMP(97))
      CALL FFV1_1(W(1,12),W(1,1),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,21))
C     Amplitude(s) for diagram number 88
      CALL FFV1_0(W(1,17),W(1,21),W(1,6),GC_11(IVEC),AMP(98))
C     Amplitude(s) for diagram number 89
      CALL FFV1_0(W(1,23),W(1,15),W(1,5),GC_11(IVEC),AMP(99))
      CALL FFV1_1(W(1,15),W(1,1),GC_11(IVEC),MDL_MT, FK_MDL_WT,W(1,25))
C     Amplitude(s) for diagram number 90
      CALL FFV1_0(W(1,17),W(1,25),W(1,5),GC_11(IVEC),AMP(100))
C     Amplitude(s) for diagram number 91
      CALL FFV1_0(W(1,23),W(1,3),W(1,11),GC_11(IVEC),AMP(101))
C     Amplitude(s) for diagram number 92
      CALL FFV1_0(W(1,17),W(1,3),W(1,24),GC_11(IVEC),AMP(102))
C     Amplitude(s) for diagram number 93
      CALL VVVV1_0(W(1,1),W(1,7),W(1,8),W(1,6),GC_12(IVEC),AMP(103))
      CALL VVVV3_0(W(1,1),W(1,7),W(1,8),W(1,6),GC_12(IVEC),AMP(104))
      CALL VVVV4_0(W(1,1),W(1,7),W(1,8),W(1,6),GC_12(IVEC),AMP(105))
      CALL VVV1P0_1(W(1,1),W(1,7),GC_10(IVEC),ZERO, FK_ZERO,W(1,23))
C     Amplitude(s) for diagram number 94
      CALL VVV1_0(W(1,8),W(1,6),W(1,23),GC_10(IVEC),AMP(106))
      CALL VVV1P0_1(W(1,1),W(1,8),GC_10(IVEC),ZERO, FK_ZERO,W(1,26))
C     Amplitude(s) for diagram number 95
      CALL VVV1_0(W(1,7),W(1,6),W(1,26),GC_10(IVEC),AMP(107))
C     Amplitude(s) for diagram number 96
      CALL FFV1_0(W(1,4),W(1,15),W(1,23),GC_11(IVEC),AMP(108))
C     Amplitude(s) for diagram number 97
      CALL FFV1_0(W(1,4),W(1,25),W(1,7),GC_11(IVEC),AMP(109))
C     Amplitude(s) for diagram number 98
      CALL FFV1_0(W(1,14),W(1,3),W(1,23),GC_11(IVEC),AMP(110))
C     Amplitude(s) for diagram number 99
      CALL FFV1_0(W(1,22),W(1,3),W(1,7),GC_11(IVEC),AMP(111))
C     Amplitude(s) for diagram number 100
      CALL VVVV1_0(W(1,1),W(1,19),W(1,8),W(1,5),GC_12(IVEC),AMP(112))
      CALL VVVV3_0(W(1,1),W(1,19),W(1,8),W(1,5),GC_12(IVEC),AMP(113))
      CALL VVVV4_0(W(1,1),W(1,19),W(1,8),W(1,5),GC_12(IVEC),AMP(114))
      CALL VVV1P0_1(W(1,1),W(1,19),GC_10(IVEC),ZERO, FK_ZERO,W(1,7))
C     Amplitude(s) for diagram number 101
      CALL VVV1_0(W(1,8),W(1,5),W(1,7),GC_10(IVEC),AMP(115))
C     Amplitude(s) for diagram number 102
      CALL VVV1_0(W(1,19),W(1,5),W(1,26),GC_10(IVEC),AMP(116))
C     Amplitude(s) for diagram number 103
      CALL FFV1_0(W(1,4),W(1,12),W(1,7),GC_11(IVEC),AMP(117))
C     Amplitude(s) for diagram number 104
      CALL FFV1_0(W(1,4),W(1,21),W(1,19),GC_11(IVEC),AMP(118))
C     Amplitude(s) for diagram number 105
      CALL FFV1_0(W(1,16),W(1,3),W(1,7),GC_11(IVEC),AMP(119))
C     Amplitude(s) for diagram number 106
      CALL FFV1_0(W(1,13),W(1,3),W(1,19),GC_11(IVEC),AMP(120))
C     Amplitude(s) for diagram number 107
      CALL VVVV1_0(W(1,1),W(1,2),W(1,8),W(1,11),GC_12(IVEC),AMP(121))
      CALL VVVV3_0(W(1,1),W(1,2),W(1,8),W(1,11),GC_12(IVEC),AMP(122))
      CALL VVVV4_0(W(1,1),W(1,2),W(1,8),W(1,11),GC_12(IVEC),AMP(123))
C     Amplitude(s) for diagram number 108
      CALL VVV1_0(W(1,2),W(1,11),W(1,26),GC_10(IVEC),AMP(124))
C     Amplitude(s) for diagram number 109
      CALL VVV1_0(W(1,2),W(1,8),W(1,24),GC_10(IVEC),AMP(125))
C     Amplitude(s) for diagram number 110
      CALL FFV1_0(W(1,14),W(1,21),W(1,2),GC_11(IVEC),AMP(126))
C     Amplitude(s) for diagram number 111
      CALL FFV1_0(W(1,22),W(1,12),W(1,2),GC_11(IVEC),AMP(127))
C     Amplitude(s) for diagram number 112
      CALL FFV1_0(W(1,16),W(1,25),W(1,2),GC_11(IVEC),AMP(128))
C     Amplitude(s) for diagram number 113
      CALL FFV1_0(W(1,13),W(1,15),W(1,2),GC_11(IVEC),AMP(129))
      CALL VVVV1P0_1(W(1,1),W(1,2),W(1,5),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,13))
      CALL VVVV3P0_1(W(1,1),W(1,2),W(1,5),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,25))
      CALL VVVV4P0_1(W(1,1),W(1,2),W(1,5),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,22))
C     Amplitude(s) for diagram number 114
      CALL VVV1_0(W(1,13),W(1,8),W(1,6),GC_10(IVEC),AMP(130))
      CALL VVV1_0(W(1,25),W(1,8),W(1,6),GC_10(IVEC),AMP(131))
      CALL VVV1_0(W(1,22),W(1,8),W(1,6),GC_10(IVEC),AMP(132))
C     Amplitude(s) for diagram number 115
      CALL FFV1_0(W(1,4),W(1,15),W(1,13),GC_11(IVEC),AMP(133))
      CALL FFV1_0(W(1,4),W(1,15),W(1,25),GC_11(IVEC),AMP(134))
      CALL FFV1_0(W(1,4),W(1,15),W(1,22),GC_11(IVEC),AMP(135))
C     Amplitude(s) for diagram number 116
      CALL FFV1_0(W(1,14),W(1,3),W(1,13),GC_11(IVEC),AMP(136))
      CALL FFV1_0(W(1,14),W(1,3),W(1,25),GC_11(IVEC),AMP(137))
      CALL FFV1_0(W(1,14),W(1,3),W(1,22),GC_11(IVEC),AMP(138))
      CALL VVVV1P0_1(W(1,1),W(1,2),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,22))
      CALL VVVV3P0_1(W(1,1),W(1,2),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,14))
      CALL VVVV4P0_1(W(1,1),W(1,2),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,25))
C     Amplitude(s) for diagram number 117
      CALL VVV1_0(W(1,22),W(1,8),W(1,5),GC_10(IVEC),AMP(139))
      CALL VVV1_0(W(1,14),W(1,8),W(1,5),GC_10(IVEC),AMP(140))
      CALL VVV1_0(W(1,25),W(1,8),W(1,5),GC_10(IVEC),AMP(141))
C     Amplitude(s) for diagram number 118
      CALL FFV1_0(W(1,4),W(1,12),W(1,22),GC_11(IVEC),AMP(142))
      CALL FFV1_0(W(1,4),W(1,12),W(1,14),GC_11(IVEC),AMP(143))
      CALL FFV1_0(W(1,4),W(1,12),W(1,25),GC_11(IVEC),AMP(144))
C     Amplitude(s) for diagram number 119
      CALL FFV1_0(W(1,16),W(1,3),W(1,22),GC_11(IVEC),AMP(145))
      CALL FFV1_0(W(1,16),W(1,3),W(1,14),GC_11(IVEC),AMP(146))
      CALL FFV1_0(W(1,16),W(1,3),W(1,25),GC_11(IVEC),AMP(147))
      CALL VVVV1P0_1(W(1,1),W(1,5),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,25))
      CALL VVVV3P0_1(W(1,1),W(1,5),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,16))
      CALL VVVV4P0_1(W(1,1),W(1,5),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,14))
C     Amplitude(s) for diagram number 120
      CALL FFV1_0(W(1,4),W(1,10),W(1,25),GC_11(IVEC),AMP(148))
      CALL FFV1_0(W(1,4),W(1,10),W(1,16),GC_11(IVEC),AMP(149))
      CALL FFV1_0(W(1,4),W(1,10),W(1,14),GC_11(IVEC),AMP(150))
C     Amplitude(s) for diagram number 121
      CALL FFV1_0(W(1,17),W(1,3),W(1,25),GC_11(IVEC),AMP(151))
      CALL FFV1_0(W(1,17),W(1,3),W(1,16),GC_11(IVEC),AMP(152))
      CALL FFV1_0(W(1,17),W(1,3),W(1,14),GC_11(IVEC),AMP(153))
C     Amplitude(s) for diagram number 122
      CALL VVV1_0(W(1,25),W(1,2),W(1,8),GC_10(IVEC),AMP(154))
      CALL VVV1_0(W(1,16),W(1,2),W(1,8),GC_10(IVEC),AMP(155))
      CALL VVV1_0(W(1,14),W(1,2),W(1,8),GC_10(IVEC),AMP(156))
C     Amplitude(s) for diagram number 123
      CALL VVV1_0(W(1,1),W(1,18),W(1,8),GC_10(IVEC),AMP(157))
      CALL VVV1_0(W(1,1),W(1,20),W(1,8),GC_10(IVEC),AMP(158))
      CALL VVV1_0(W(1,1),W(1,9),W(1,8),GC_10(IVEC),AMP(159))

      JAMP(:,:) = (0D0,0D0)
C     JAMPs contributing to orders ALL_ORDERS=1
      TMP_JAMP(15) = AMP(122) +  AMP(124)  ! used 8 times
      TMP_JAMP(14) = AMP(104) +  AMP(107)  ! used 8 times
      TMP_JAMP(13) = AMP(103) +  AMP(106)  ! used 8 times
      TMP_JAMP(12) = AMP(2) +  AMP(4)  ! used 8 times
      TMP_JAMP(11) = AMP(1) +  AMP(6)  ! used 8 times
      TMP_JAMP(10) = AMP(123) +  AMP(125)  ! used 8 times
      TMP_JAMP(9) = AMP(66) +  AMP(68)  ! used 8 times
      TMP_JAMP(8) = AMP(64) +  AMP(67)  ! used 8 times
      TMP_JAMP(7) = AMP(113) +  AMP(116)  ! used 8 times
      TMP_JAMP(6) = AMP(63) - AMP(65)  ! used 8 times
      TMP_JAMP(5) = AMP(112) +  AMP(115)  ! used 8 times
      TMP_JAMP(4) = AMP(3) +  AMP(5)  ! used 8 times
      TMP_JAMP(3) = AMP(84) +  AMP(86)  ! used 8 times
      TMP_JAMP(2) = AMP(81) - AMP(83)  ! used 8 times
      TMP_JAMP(1) = AMP(82) +  AMP(85)  ! used 8 times
      TMP_JAMP(30) = TMP_JAMP(11) +  AMP(121)  ! used 8 times
      TMP_JAMP(29) = TMP_JAMP(12) - AMP(132)  ! used 8 times
      TMP_JAMP(28) = TMP_JAMP(13) +  AMP(130)  ! used 8 times
      TMP_JAMP(27) = TMP_JAMP(14) +  AMP(159)  ! used 8 times
      TMP_JAMP(26) = TMP_JAMP(15) - AMP(157)  ! used 8 times
      TMP_JAMP(25) = TMP_JAMP(8) - AMP(131)  ! used 8 times
      TMP_JAMP(24) = TMP_JAMP(9) - AMP(156)  ! used 8 times
      TMP_JAMP(23) = TMP_JAMP(10) +  AMP(154)  ! used 8 times
      TMP_JAMP(22) = TMP_JAMP(6) +  AMP(114)  ! used 8 times
      TMP_JAMP(21) = TMP_JAMP(7) +  AMP(158)  ! used 8 times
      TMP_JAMP(20) = TMP_JAMP(4) - AMP(141)  ! used 8 times
      TMP_JAMP(19) = TMP_JAMP(5) +  AMP(139)  ! used 8 times
      TMP_JAMP(18) = TMP_JAMP(2) +  AMP(105)  ! used 8 times
      TMP_JAMP(17) = TMP_JAMP(3) - AMP(155)  ! used 8 times
      TMP_JAMP(16) = TMP_JAMP(1) - AMP(140)  ! used 8 times
      TMP_JAMP(90) = AMP(108) +  AMP(133)  ! used 4 times
      TMP_JAMP(89) = AMP(51) +  AMP(52)  ! used 4 times
      TMP_JAMP(88) = AMP(40) - AMP(54)  ! used 4 times
      TMP_JAMP(87) = AMP(11) - AMP(135)  ! used 4 times
      TMP_JAMP(86) = TMP_JAMP(26) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(51)  ! used 4 times
      TMP_JAMP(85) = TMP_JAMP(28) +  TMP_JAMP(27)  ! used 4 times
      TMP_JAMP(84) = TMP_JAMP(29) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(11)  ! used 4 times
      TMP_JAMP(83) = TMP_JAMP(30) +  TMP_JAMP(29)  ! used 4 times
      TMP_JAMP(82) = AMP(102) +  AMP(151)  ! used 4 times
      TMP_JAMP(81) = AMP(69) - AMP(134)  ! used 4 times
      TMP_JAMP(80) = AMP(59) - AMP(153)  ! used 4 times
      TMP_JAMP(79) = TMP_JAMP(23) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(102)  ! used 4 times
      TMP_JAMP(78) = TMP_JAMP(24) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(59)  ! used 4 times
      TMP_JAMP(77) = TMP_JAMP(25) + ((0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(69)  ! used 4 times
      TMP_JAMP(76) = TMP_JAMP(29) +  TMP_JAMP(25)  ! used 4 times
      TMP_JAMP(75) = TMP_JAMP(30) - TMP_JAMP(23)  ! used 4 times
      TMP_JAMP(74) = AMP(43) - AMP(53)  ! used 4 times
      TMP_JAMP(73) = TMP_JAMP(21) + ((0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(43)  ! used 4 times
      TMP_JAMP(72) = TMP_JAMP(22) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(62)  ! used 4 times
      TMP_JAMP(71) = TMP_JAMP(22) +  TMP_JAMP(21)  ! used 4 times
      TMP_JAMP(70) = TMP_JAMP(27) +  TMP_JAMP(21)  ! used 4 times
      TMP_JAMP(69) = TMP_JAMP(28) - TMP_JAMP(25)  ! used 4 times
      TMP_JAMP(68) = AMP(119) +  AMP(145)  ! used 4 times
      TMP_JAMP(67) = AMP(14) - AMP(147)  ! used 4 times
      TMP_JAMP(66) = TMP_JAMP(20) +  TMP_JAMP(19)  ! used 4 times
      TMP_JAMP(65) = TMP_JAMP(22) - TMP_JAMP(19)  ! used 4 times
      TMP_JAMP(64) = TMP_JAMP(29) +  TMP_JAMP(20)  ! used 4 times
      TMP_JAMP(63) = AMP(77) - AMP(152)  ! used 4 times
      TMP_JAMP(62) = TMP_JAMP(17) + ((0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(77)  ! used 4 times
      TMP_JAMP(61) = TMP_JAMP(18) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(79)  ! used 4 times
      TMP_JAMP(60) = TMP_JAMP(24) +  TMP_JAMP(17)  ! used 4 times
      TMP_JAMP(59) = TMP_JAMP(28) - TMP_JAMP(18)  ! used 4 times
      TMP_JAMP(58) = AMP(89) - AMP(146)  ! used 4 times
      TMP_JAMP(57) = TMP_JAMP(20) +  TMP_JAMP(16)  ! used 4 times
      TMP_JAMP(56) = AMP(117) +  AMP(142)  ! used 4 times
      TMP_JAMP(55) = AMP(8) - AMP(144)  ! used 4 times
      TMP_JAMP(54) = TMP_JAMP(19) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(117)  ! used 4 times
      TMP_JAMP(53) = TMP_JAMP(20) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(8)  ! used 4 times
      TMP_JAMP(52) = TMP_JAMP(26) - TMP_JAMP(21)  ! used 4 times
      TMP_JAMP(51) = TMP_JAMP(30) - TMP_JAMP(20)  ! used 4 times
      TMP_JAMP(50) = AMP(87) - AMP(143)  ! used 4 times
      TMP_JAMP(49) = TMP_JAMP(16) + ((0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(87)  ! used 4 times
      TMP_JAMP(48) = TMP_JAMP(23) - TMP_JAMP(17)  ! used 4 times
      TMP_JAMP(47) = TMP_JAMP(18) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(80)  ! used 4 times
      TMP_JAMP(46) = TMP_JAMP(19) - TMP_JAMP(16)  ! used 4 times
      TMP_JAMP(45) = TMP_JAMP(27) +  TMP_JAMP(18)  ! used 4 times
      TMP_JAMP(44) = TMP_JAMP(28) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(110)  ! used 4 times
      TMP_JAMP(43) = TMP_JAMP(29) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(16)  ! used 4 times
      TMP_JAMP(42) = TMP_JAMP(22) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(61)  ! used 4 times
      TMP_JAMP(41) = TMP_JAMP(24) - TMP_JAMP(22)  ! used 4 times
      TMP_JAMP(40) = TMP_JAMP(25) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(71)  ! used 4 times
      TMP_JAMP(39) = AMP(96) +  AMP(148)  ! used 4 times
      TMP_JAMP(38) = TMP_JAMP(23) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(96)  ! used 4 times
      TMP_JAMP(37) = TMP_JAMP(24) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(56)  ! used 4 times
      TMP_JAMP(36) = TMP_JAMP(26) +  TMP_JAMP(23)  ! used 4 times
      TMP_JAMP(35) = TMP_JAMP(17) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(74)  ! used 4 times
      TMP_JAMP(34) = TMP_JAMP(30) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(17)  ! used 4 times
      TMP_JAMP(33) = TMP_JAMP(26) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(33)  ! used 4 times
      TMP_JAMP(32) = TMP_JAMP(27) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(22)  ! used 4 times
      TMP_JAMP(31) = TMP_JAMP(21) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(25)  ! used 4 times
      TMP_JAMP(98) = TMP_JAMP(43) + ((0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(138)  ! used 4 times
      TMP_JAMP(97) = TMP_JAMP(44) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(136)  ! used 4 times
      TMP_JAMP(96) = TMP_JAMP(40) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(137)  ! used 4 times
      TMP_JAMP(95) = TMP_JAMP(37) + ((0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(150)  ! used 4 times
      TMP_JAMP(94) = TMP_JAMP(35) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(149)  ! used 4 times
      TMP_JAMP(93) = TMP_JAMP(32) + ((0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(36)  ! used 4 times
      TMP_JAMP(92) = TMP_JAMP(33) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(34)  ! used 4 times
      TMP_JAMP(91) = TMP_JAMP(31) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(35)  ! used 4 times
      TMP_JAMP(151) = AMP(18) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(50)  ! used 2 times
      TMP_JAMP(150) = TMP_JAMP(87) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(10)  ! used 2 times
      TMP_JAMP(149) = TMP_JAMP(90) +  TMP_JAMP(88)  ! used 2 times
      TMP_JAMP(148) = TMP_JAMP(82) - AMP(18)  ! used 2 times
      TMP_JAMP(147) = TMP_JAMP(74) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(44)  ! used 2 times
      TMP_JAMP(146) = TMP_JAMP(68) +  TMP_JAMP(67)  ! used 2 times
      TMP_JAMP(145) = TMP_JAMP(77) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(134)  ! used 2 times
      TMP_JAMP(144) = AMP(79) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(109)  ! used 2 times
      TMP_JAMP(143) = TMP_JAMP(63) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(76)  ! used 2 times
      TMP_JAMP(142) = TMP_JAMP(90) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * TMP_JAMP(59)  ! used 2 times
      TMP_JAMP(141) = TMP_JAMP(67) +  TMP_JAMP(58)  ! used 2 times
      TMP_JAMP(140) = AMP(7) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(18)  ! used 2 times
      TMP_JAMP(139) = TMP_JAMP(54) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(142)  ! used 2 times
      TMP_JAMP(138) = TMP_JAMP(55) + ((0.000000000000000D+00
     $ ,1.000000000000000D+00)) * TMP_JAMP(51)  ! used 2 times
      TMP_JAMP(137) = TMP_JAMP(89) - TMP_JAMP(74)  ! used 2 times
      TMP_JAMP(136) = TMP_JAMP(49) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(143)  ! used 2 times
      TMP_JAMP(135) = TMP_JAMP(82) - TMP_JAMP(63)  ! used 2 times
      TMP_JAMP(134) = AMP(41) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(80)  ! used 2 times
      TMP_JAMP(133) = TMP_JAMP(56) - TMP_JAMP(50)  ! used 2 times
      TMP_JAMP(132) = TMP_JAMP(88) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * TMP_JAMP(45)  ! used 2 times
      TMP_JAMP(131) = TMP_JAMP(47) +  AMP(111)  ! used 2 times
      TMP_JAMP(130) = TMP_JAMP(53) - AMP(9)  ! used 2 times
      TMP_JAMP(129) = TMP_JAMP(98) +  TMP_JAMP(97)  ! used 2 times
      TMP_JAMP(128) = AMP(58) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(61)  ! used 2 times
      TMP_JAMP(127) = TMP_JAMP(80) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * TMP_JAMP(41)  ! used 2 times
      TMP_JAMP(126) = TMP_JAMP(42) - AMP(72)  ! used 2 times
      TMP_JAMP(125) = TMP_JAMP(96) - TMP_JAMP(42)  ! used 2 times
      TMP_JAMP(124) = TMP_JAMP(98) +  TMP_JAMP(96)  ! used 2 times
      TMP_JAMP(123) = TMP_JAMP(36) - AMP(39)  ! used 2 times
      TMP_JAMP(122) = TMP_JAMP(89) - TMP_JAMP(39)  ! used 2 times
      TMP_JAMP(121) = TMP_JAMP(95) - AMP(55)  ! used 2 times
      TMP_JAMP(120) = TMP_JAMP(58) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * TMP_JAMP(46)  ! used 2 times
      TMP_JAMP(119) = TMP_JAMP(68) - TMP_JAMP(58)  ! used 2 times
      TMP_JAMP(118) = TMP_JAMP(94) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * TMP_JAMP(58)  ! used 2 times
      TMP_JAMP(117) = TMP_JAMP(95) +  TMP_JAMP(94)  ! used 2 times
      TMP_JAMP(116) = TMP_JAMP(94) - AMP(73)  ! used 2 times
      TMP_JAMP(115) = TMP_JAMP(95) +  AMP(57)  ! used 2 times
      TMP_JAMP(114) = TMP_JAMP(96) - TMP_JAMP(95)  ! used 2 times
      TMP_JAMP(113) = TMP_JAMP(97) - TMP_JAMP(96)  ! used 2 times
      TMP_JAMP(112) = TMP_JAMP(38) +  AMP(95)  ! used 2 times
      TMP_JAMP(111) = TMP_JAMP(67) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(13)  ! used 2 times
      TMP_JAMP(110) = TMP_JAMP(67) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * TMP_JAMP(34)  ! used 2 times
      TMP_JAMP(109) = TMP_JAMP(98) +  AMP(15)  ! used 2 times
      TMP_JAMP(108) = TMP_JAMP(98) +  TMP_JAMP(34)  ! used 2 times
      TMP_JAMP(107) = TMP_JAMP(61) - AMP(23)  ! used 2 times
      TMP_JAMP(106) = TMP_JAMP(93) +  TMP_JAMP(92)  ! used 2 times
      TMP_JAMP(105) = TMP_JAMP(68) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * AMP(27)  ! used 2 times
      TMP_JAMP(104) = TMP_JAMP(91) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * TMP_JAMP(68)  ! used 2 times
      TMP_JAMP(103) = TMP_JAMP(93) +  TMP_JAMP(91)  ! used 2 times
      TMP_JAMP(102) = TMP_JAMP(91) - AMP(26)  ! used 2 times
      TMP_JAMP(101) = TMP_JAMP(92) - TMP_JAMP(91)  ! used 2 times
      TMP_JAMP(100) = TMP_JAMP(97) +  TMP_JAMP(93)  ! used 2 times
      TMP_JAMP(99) = TMP_JAMP(92) +  TMP_JAMP(34)  ! used 2 times
      TMP_JAMP(163) = TMP_JAMP(149) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(42)  ! used 2 times
      TMP_JAMP(162) = TMP_JAMP(144) - TMP_JAMP(142)  ! used 2 times
      TMP_JAMP(161) = TMP_JAMP(140) + ((-0.000000000000000D+00
     $ ,1.000000000000000D+00)) * TMP_JAMP(138)  ! used 2 times
      TMP_JAMP(160) = TMP_JAMP(135) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * TMP_JAMP(48)  ! used 2 times
      TMP_JAMP(159) = TMP_JAMP(133) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * TMP_JAMP(46)  ! used 2 times
      TMP_JAMP(158) = TMP_JAMP(134) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * TMP_JAMP(132)  ! used 2 times
      TMP_JAMP(157) = TMP_JAMP(130) + ((0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(144)  ! used 2 times
      TMP_JAMP(156) = TMP_JAMP(128) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * TMP_JAMP(127)  ! used 2 times
      TMP_JAMP(155) = TMP_JAMP(123) + ((0.000000000000000D+00
     $ ,1.000000000000000D+00)) * TMP_JAMP(122)  ! used 2 times
      TMP_JAMP(154) = TMP_JAMP(112) + ((-0.000000000000000D+00,
     $ -1.000000000000000D+00)) * AMP(148)  ! used 2 times
      TMP_JAMP(153) = TMP_JAMP(100) +  AMP(24)  ! used 2 times
      TMP_JAMP(152) = TMP_JAMP(99) +  AMP(32)  ! used 2 times
      JAMP(1,1) = (-1.000000000000000D+00)*AMP(30)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(109)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(152)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(153)
      JAMP(2,1) = ((0.000000000000000D+00,1.000000000000000D+00))
     $ *AMP(27)+(-1.000000000000000D+00)*AMP(28)+((0.000000000000000D
     $ +00,1.000000000000000D+00))*TMP_JAMP(66)+((0.000000000000000D
     $ +00,1.000000000000000D+00))*TMP_JAMP(104)+TMP_JAMP(111)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(152)
      JAMP(3,1) = (-1.000000000000000D+00)*AMP(31)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*AMP(72)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(102)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(125)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(153)
      JAMP(4,1) = (-1.000000000000000D+00)*AMP(19)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*AMP(21)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*AMP(26)
     $ +AMP(151)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *TMP_JAMP(79)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *TMP_JAMP(101)+((0.000000000000000D+00,1.000000000000000D+00))
     $ *TMP_JAMP(156)
      JAMP(5,1) = (-1.000000000000000D+00)*AMP(29)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*AMP(90)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(103)
     $ +(-1.000000000000000D+00)*TMP_JAMP(105)+((0.000000000000000D+00
     $ ,-1.000000000000000D+00))*TMP_JAMP(107)+TMP_JAMP(120)
      JAMP(6,1) = (-1.000000000000000D+00)*AMP(20)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*AMP(21)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*AMP(76)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(106)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(107)
     $ +(-1.000000000000000D+00)*TMP_JAMP(160)
      JAMP(7,1) = ((0.000000000000000D+00,-1.000000000000000D+00))
     $ *AMP(15)+((0.000000000000000D+00,1.000000000000000D+00))*AMP(57)
     $ +(-1.000000000000000D+00)*AMP(93)+((0.000000000000000D+00,
     $ -1.000000000000000D+00))*TMP_JAMP(108)+((0.000000000000000D+00,
     $ -1.000000000000000D+00))*TMP_JAMP(114)+((0.000000000000000D+00
     $ ,1.000000000000000D+00))*TMP_JAMP(154)
      JAMP(8,1) = ((0.000000000000000D+00,-1.000000000000000D+00))
     $ *AMP(13)+((0.000000000000000D+00,1.000000000000000D+00))*AMP(75)
     $ +(-1.000000000000000D+00)*AMP(91)+((0.000000000000000D+00,
     $ -1.000000000000000D+00))*TMP_JAMP(57)+(-1.000000000000000D+00)
     $ *TMP_JAMP(110)+((0.000000000000000D+00,1.000000000000000D+00))
     $ *TMP_JAMP(118)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *TMP_JAMP(154)
      JAMP(9,1) = (-1.000000000000000D+00)*AMP(94)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(113)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(115)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(116)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(131)
      JAMP(10,1) = (-1.000000000000000D+00)*AMP(38)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(116)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(155)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(158)
      JAMP(11,1) = ((0.000000000000000D+00,1.000000000000000D+00))
     $ *AMP(55)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *AMP(75)+(-1.000000000000000D+00)*AMP(92)+((0.000000000000000D
     $ +00,1.000000000000000D+00))*AMP(120)+((0.000000000000000D+00,
     $ -1.000000000000000D+00))*TMP_JAMP(46)+((0.000000000000000D+00
     $ ,1.000000000000000D+00))*TMP_JAMP(72)+((0.000000000000000D+00,
     $ -1.000000000000000D+00))*TMP_JAMP(117)+(-1.000000000000000D+00)
     $ *TMP_JAMP(119)
      JAMP(12,1) = (-1.000000000000000D+00)*AMP(37)+(
     $ -1.000000000000000D+00)*AMP(62)+((0.000000000000000D+00,
     $ -1.000000000000000D+00))*TMP_JAMP(71)+((0.000000000000000D+00
     $ ,1.000000000000000D+00))*TMP_JAMP(121)+TMP_JAMP(147)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(155)
      JAMP(13,1) = ((0.000000000000000D+00,1.000000000000000D+00))
     $ *AMP(118)+(-1.000000000000000D+00)*AMP(126)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(124)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(126)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(139)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(157)
      JAMP(14,1) = ((0.000000000000000D+00,1.000000000000000D+00))
     $ *AMP(78)+(-1.000000000000000D+00)*AMP(98)+((0.000000000000000D
     $ +00,-1.000000000000000D+00))*AMP(118)+AMP(152)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(62)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(156)
     $ +(-1.000000000000000D+00)*TMP_JAMP(159)
      JAMP(15,1) = ((0.000000000000000D+00,1.000000000000000D+00))
     $ *AMP(88)+(-1.000000000000000D+00)*AMP(127)+((0.000000000000000D
     $ +00,1.000000000000000D+00))*TMP_JAMP(129)+((0.000000000000000D
     $ +00,-1.000000000000000D+00))*TMP_JAMP(131)+((0.000000000000000D
     $ +00,1.000000000000000D+00))*TMP_JAMP(136)+((0.000000000000000D
     $ +00,1.000000000000000D+00))*TMP_JAMP(157)
      JAMP(16,1) = ((0.000000000000000D+00,1.000000000000000D+00))
     $ *AMP(45)+(-1.000000000000000D+00)*AMP(47)+AMP(53)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*AMP(88)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(73)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(158)
     $ +(-1.000000000000000D+00)*TMP_JAMP(159)
      JAMP(17,1) = ((0.000000000000000D+00,-1.000000000000000D+00))
     $ *AMP(78)+(-1.000000000000000D+00)*AMP(97)+((0.000000000000000D
     $ +00,1.000000000000000D+00))*AMP(101)+((0.000000000000000D+00
     $ ,1.000000000000000D+00))*TMP_JAMP(136)+(-1.000000000000000D+00)
     $ *TMP_JAMP(160)+((0.000000000000000D+00,1.000000000000000D+00))
     $ *TMP_JAMP(161)
      JAMP(18,1) = ((0.000000000000000D+00,-1.000000000000000D+00))
     $ *AMP(45)+(-1.000000000000000D+00)*AMP(46)+((0.000000000000000D
     $ +00,1.000000000000000D+00))*AMP(50)+((0.000000000000000D+00
     $ ,1.000000000000000D+00))*TMP_JAMP(52)+(-1.000000000000000D+00)
     $ *TMP_JAMP(137)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *TMP_JAMP(139)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *TMP_JAMP(161)
      JAMP(19,1) = ((0.000000000000000D+00,1.000000000000000D+00))
     $ *AMP(12)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *AMP(90)+(-1.000000000000000D+00)*AMP(128)+(-1.000000000000000D
     $ +00)*AMP(135)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *TMP_JAMP(57)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *TMP_JAMP(84)+(-1.000000000000000D+00)*TMP_JAMP(141)+(
     $ -1.000000000000000D+00)*TMP_JAMP(162)
      JAMP(20,1) = ((0.000000000000000D+00,1.000000000000000D+00))
     $ *AMP(60)+(-1.000000000000000D+00)*AMP(100)+((0.000000000000000D
     $ +00,1.000000000000000D+00))*TMP_JAMP(60)+(-1.000000000000000D
     $ +00)*TMP_JAMP(80)+(-1.000000000000000D+00)*TMP_JAMP(143)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(145)
     $ +TMP_JAMP(162)
      JAMP(21,1) = ((0.000000000000000D+00,-1.000000000000000D+00))
     $ *AMP(12)+(-1.000000000000000D+00)*AMP(62)+((0.000000000000000D
     $ +00,1.000000000000000D+00))*AMP(70)+((0.000000000000000D+00,
     $ -1.000000000000000D+00))*AMP(120)+(-1.000000000000000D+00)
     $ *AMP(129)+((0.000000000000000D+00,1.000000000000000D+00))
     $ *TMP_JAMP(64)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *TMP_JAMP(65)+(-1.000000000000000D+00)*TMP_JAMP(87)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(145)
     $ +TMP_JAMP(146)
      JAMP(22,1) = (-1.000000000000000D+00)*AMP(49)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*AMP(70)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(69)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(70)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(72)
     $ +TMP_JAMP(81)+(-1.000000000000000D+00)*TMP_JAMP(147)+(
     $ -1.000000000000000D+00)*TMP_JAMP(163)
      JAMP(23,1) = ((0.000000000000000D+00,-1.000000000000000D+00))
     $ *AMP(60)+(-1.000000000000000D+00)*AMP(99)+((0.000000000000000D
     $ +00,-1.000000000000000D+00))*AMP(101)+(-1.000000000000000D+00)
     $ *AMP(153)+((0.000000000000000D+00,1.000000000000000D+00))
     $ *TMP_JAMP(75)+((0.000000000000000D+00,1.000000000000000D+00))
     $ *TMP_JAMP(76)+((0.000000000000000D+00,-1.000000000000000D+00))
     $ *TMP_JAMP(78)+(-1.000000000000000D+00)*TMP_JAMP(81)
     $ +TMP_JAMP(148)+(-1.000000000000000D+00)*TMP_JAMP(150)
      JAMP(24,1) = (-1.000000000000000D+00)*AMP(48)+AMP(52)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(83)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(85)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(86)
     $ +TMP_JAMP(150)+TMP_JAMP(151)+TMP_JAMP(163)

      IF(INIT_MODE)THEN
        DO I=1, NGRAPHS
          IF (AMP(I).NE.0) THEN
            ZEROAMP_1(IHEL,I) = .FALSE.
          ENDIF
        ENDDO
      ENDIF

      MATRIX1 = 0.D0
      DO M = 1, NAMPSO
        DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
            ZTEMP = ZTEMP + CF(J,I)*JAMP(J,M)
          ENDDO
          DO N = 1, NAMPSO

            MATRIX1 = MATRIX1 + ZTEMP*DCONJG(JAMP(I,N))

          ENDDO
        ENDDO
      ENDDO

      IF(SDE_STRAT.EQ.1)THEN
        AMP2(2)=AMP2(2)+AMP(4)*DCONJG(AMP(4))
        AMP2(3)=AMP2(3)+AMP(5)*DCONJG(AMP(5))
        AMP2(4)=AMP2(4)+AMP(6)*DCONJG(AMP(6))
        AMP2(5)=AMP2(5)+AMP(7)*DCONJG(AMP(7))
        AMP2(6)=AMP2(6)+AMP(8)*DCONJG(AMP(8))
        AMP2(7)=AMP2(7)+AMP(9)*DCONJG(AMP(9))
        AMP2(8)=AMP2(8)+AMP(10)*DCONJG(AMP(10))
        AMP2(9)=AMP2(9)+AMP(11)*DCONJG(AMP(11))
        AMP2(10)=AMP2(10)+AMP(12)*DCONJG(AMP(12))
        AMP2(11)=AMP2(11)+AMP(13)*DCONJG(AMP(13))
        AMP2(12)=AMP2(12)+AMP(14)*DCONJG(AMP(14))
        AMP2(13)=AMP2(13)+AMP(15)*DCONJG(AMP(15))
        AMP2(14)=AMP2(14)+AMP(16)*DCONJG(AMP(16))
        AMP2(15)=AMP2(15)+AMP(17)*DCONJG(AMP(17))
        AMP2(16)=AMP2(16)+AMP(18)*DCONJG(AMP(18))
        AMP2(17)=AMP2(17)+AMP(19)*DCONJG(AMP(19))
        AMP2(18)=AMP2(18)+AMP(20)*DCONJG(AMP(20))
        AMP2(19)=AMP2(19)+AMP(21)*DCONJG(AMP(21))
        AMP2(20)=AMP2(20)+AMP(22)*DCONJG(AMP(22))
        AMP2(21)=AMP2(21)+AMP(23)*DCONJG(AMP(23))
        AMP2(22)=AMP2(22)+AMP(24)*DCONJG(AMP(24))
        AMP2(23)=AMP2(23)+AMP(25)*DCONJG(AMP(25))
        AMP2(24)=AMP2(24)+AMP(26)*DCONJG(AMP(26))
        AMP2(25)=AMP2(25)+AMP(27)*DCONJG(AMP(27))
        AMP2(26)=AMP2(26)+AMP(28)*DCONJG(AMP(28))
        AMP2(27)=AMP2(27)+AMP(29)*DCONJG(AMP(29))
        AMP2(28)=AMP2(28)+AMP(30)*DCONJG(AMP(30))
        AMP2(29)=AMP2(29)+AMP(31)*DCONJG(AMP(31))
        AMP2(30)=AMP2(30)+AMP(32)*DCONJG(AMP(32))
        AMP2(31)=AMP2(31)+AMP(33)*DCONJG(AMP(33))
        AMP2(33)=AMP2(33)+AMP(37)*DCONJG(AMP(37))
        AMP2(34)=AMP2(34)+AMP(38)*DCONJG(AMP(38))
        AMP2(35)=AMP2(35)+AMP(39)*DCONJG(AMP(39))
        AMP2(36)=AMP2(36)+AMP(40)*DCONJG(AMP(40))
        AMP2(37)=AMP2(37)+AMP(41)*DCONJG(AMP(41))
        AMP2(38)=AMP2(38)+AMP(42)*DCONJG(AMP(42))
        AMP2(39)=AMP2(39)+AMP(43)*DCONJG(AMP(43))
        AMP2(40)=AMP2(40)+AMP(44)*DCONJG(AMP(44))
        AMP2(41)=AMP2(41)+AMP(45)*DCONJG(AMP(45))
        AMP2(42)=AMP2(42)+AMP(46)*DCONJG(AMP(46))
        AMP2(43)=AMP2(43)+AMP(47)*DCONJG(AMP(47))
        AMP2(44)=AMP2(44)+AMP(48)*DCONJG(AMP(48))
        AMP2(45)=AMP2(45)+AMP(49)*DCONJG(AMP(49))
        AMP2(46)=AMP2(46)+AMP(50)*DCONJG(AMP(50))
        AMP2(47)=AMP2(47)+AMP(51)*DCONJG(AMP(51))
        AMP2(49)=AMP2(49)+AMP(55)*DCONJG(AMP(55))
        AMP2(50)=AMP2(50)+AMP(56)*DCONJG(AMP(56))
        AMP2(51)=AMP2(51)+AMP(57)*DCONJG(AMP(57))
        AMP2(52)=AMP2(52)+AMP(58)*DCONJG(AMP(58))
        AMP2(53)=AMP2(53)+AMP(59)*DCONJG(AMP(59))
        AMP2(54)=AMP2(54)+AMP(60)*DCONJG(AMP(60))
        AMP2(55)=AMP2(55)+AMP(61)*DCONJG(AMP(61))
        AMP2(56)=AMP2(56)+AMP(62)*DCONJG(AMP(62))
        AMP2(57)=AMP2(57)+AMP(63)*DCONJG(AMP(63))
        AMP2(59)=AMP2(59)+AMP(67)*DCONJG(AMP(67))
        AMP2(60)=AMP2(60)+AMP(68)*DCONJG(AMP(68))
        AMP2(61)=AMP2(61)+AMP(69)*DCONJG(AMP(69))
        AMP2(62)=AMP2(62)+AMP(70)*DCONJG(AMP(70))
        AMP2(63)=AMP2(63)+AMP(71)*DCONJG(AMP(71))
        AMP2(64)=AMP2(64)+AMP(72)*DCONJG(AMP(72))
        AMP2(65)=AMP2(65)+AMP(73)*DCONJG(AMP(73))
        AMP2(66)=AMP2(66)+AMP(74)*DCONJG(AMP(74))
        AMP2(67)=AMP2(67)+AMP(75)*DCONJG(AMP(75))
        AMP2(68)=AMP2(68)+AMP(76)*DCONJG(AMP(76))
        AMP2(69)=AMP2(69)+AMP(77)*DCONJG(AMP(77))
        AMP2(70)=AMP2(70)+AMP(78)*DCONJG(AMP(78))
        AMP2(71)=AMP2(71)+AMP(79)*DCONJG(AMP(79))
        AMP2(72)=AMP2(72)+AMP(80)*DCONJG(AMP(80))
        AMP2(73)=AMP2(73)+AMP(81)*DCONJG(AMP(81))
        AMP2(75)=AMP2(75)+AMP(85)*DCONJG(AMP(85))
        AMP2(76)=AMP2(76)+AMP(86)*DCONJG(AMP(86))
        AMP2(77)=AMP2(77)+AMP(87)*DCONJG(AMP(87))
        AMP2(78)=AMP2(78)+AMP(88)*DCONJG(AMP(88))
        AMP2(79)=AMP2(79)+AMP(89)*DCONJG(AMP(89))
        AMP2(80)=AMP2(80)+AMP(90)*DCONJG(AMP(90))
        AMP2(81)=AMP2(81)+AMP(91)*DCONJG(AMP(91))
        AMP2(82)=AMP2(82)+AMP(92)*DCONJG(AMP(92))
        AMP2(83)=AMP2(83)+AMP(93)*DCONJG(AMP(93))
        AMP2(84)=AMP2(84)+AMP(94)*DCONJG(AMP(94))
        AMP2(85)=AMP2(85)+AMP(95)*DCONJG(AMP(95))
        AMP2(86)=AMP2(86)+AMP(96)*DCONJG(AMP(96))
        AMP2(87)=AMP2(87)+AMP(97)*DCONJG(AMP(97))
        AMP2(88)=AMP2(88)+AMP(98)*DCONJG(AMP(98))
        AMP2(89)=AMP2(89)+AMP(99)*DCONJG(AMP(99))
        AMP2(90)=AMP2(90)+AMP(100)*DCONJG(AMP(100))
        AMP2(91)=AMP2(91)+AMP(101)*DCONJG(AMP(101))
        AMP2(92)=AMP2(92)+AMP(102)*DCONJG(AMP(102))
        AMP2(94)=AMP2(94)+AMP(106)*DCONJG(AMP(106))
        AMP2(95)=AMP2(95)+AMP(107)*DCONJG(AMP(107))
        AMP2(96)=AMP2(96)+AMP(108)*DCONJG(AMP(108))
        AMP2(97)=AMP2(97)+AMP(109)*DCONJG(AMP(109))
        AMP2(98)=AMP2(98)+AMP(110)*DCONJG(AMP(110))
        AMP2(99)=AMP2(99)+AMP(111)*DCONJG(AMP(111))
        AMP2(101)=AMP2(101)+AMP(115)*DCONJG(AMP(115))
        AMP2(102)=AMP2(102)+AMP(116)*DCONJG(AMP(116))
        AMP2(103)=AMP2(103)+AMP(117)*DCONJG(AMP(117))
        AMP2(104)=AMP2(104)+AMP(118)*DCONJG(AMP(118))
        AMP2(105)=AMP2(105)+AMP(119)*DCONJG(AMP(119))
        AMP2(106)=AMP2(106)+AMP(120)*DCONJG(AMP(120))
        AMP2(108)=AMP2(108)+AMP(124)*DCONJG(AMP(124))
        AMP2(109)=AMP2(109)+AMP(125)*DCONJG(AMP(125))
        AMP2(110)=AMP2(110)+AMP(126)*DCONJG(AMP(126))
        AMP2(111)=AMP2(111)+AMP(127)*DCONJG(AMP(127))
        AMP2(112)=AMP2(112)+AMP(128)*DCONJG(AMP(128))
        AMP2(113)=AMP2(113)+AMP(129)*DCONJG(AMP(129))
      ENDIF

      DO I = 1, NCOLOR
        DO M = 1, NAMPSO
          DO N = 1, NAMPSO

            JAMP2(I)=JAMP2(I)+DABS(DBLE(JAMP(I,M)*DCONJG(JAMP(I,N))))

          ENDDO
        ENDDO
      ENDDO

      call counters_matrix1_stop()
      END

      SUBROUTINE PRINT_ZERO_AMP_1()

      IMPLICIT NONE
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=159)

      INTEGER    NCOMB
      PARAMETER (NCOMB=64)

      LOGICAL ZEROAMP_1(NCOMB, NGRAPHS)
      COMMON/TO_ZEROAMP_1/ZEROAMP_1

      INTEGER I,J
      LOGICAL ALL_FALSE

      DO I=1, NGRAPHS
        ALL_FALSE = .TRUE.
        DO J=1,NCOMB
          IF (.NOT.ZEROAMP_1(J, I)) THEN
            ALL_FALSE = .FALSE.
            EXIT
          ENDIF
        ENDDO
        IF (ALL_FALSE) THEN
          WRITE(*,*) 'Amplitude/ZEROAMP:', 1, I
        ELSE
          DO J=1,NCOMB
            IF (ZEROAMP_1(J, I)) THEN
              WRITE(*,*) 'HEL/ZEROAMP:', 1, J  , I
            ENDIF
          ENDDO
        ENDIF
      ENDDO

      RETURN
      END
C     Set of functions to handle the array indices of the split orders


      INTEGER FUNCTION SQSOINDEX1(ORDERINDEXA, ORDERINDEXB)
C     
C     This functions plays the role of the interference matrix. It can
C      be hardcoded or 
C     made more elegant using hashtables if its execution speed ever
C      becomes a relevant
C     factor. From two split order indices, it return the
C      corresponding index in the squared 
C     order canonical ordering.
C     
C     CONSTANTS
C     

      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=1, NSQUAREDSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERINDEXA, ORDERINDEXB
C     
C     LOCAL VARIABLES
C     
      INTEGER I, SQORDERS(NSO)
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      DATA (AMPSPLITORDERS(  1,I),I=  1,  1) /    1/
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     FUNCTION
C     
      INTEGER SOINDEX_FOR_SQUARED_ORDERS1
C     
C     BEGIN CODE
C     
      DO I=1,NSO
        SQORDERS(I)=AMPSPLITORDERS(ORDERINDEXA,I)
     $   +AMPSPLITORDERS(ORDERINDEXB,I)
      ENDDO
      SQSOINDEX1=SOINDEX_FOR_SQUARED_ORDERS1(SQORDERS)
      END

      INTEGER FUNCTION SOINDEX_FOR_SQUARED_ORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the squared
C      split orders list passed in argument which corresponds to the
C      values of the following list of couplings (and in this order).
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO, NAMPSO
      PARAMETER (NSO=1, NSQSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER SQSPLITORDERS(NSQSO,NSO)
      DATA (SQSPLITORDERS(  1,I),I=  1,  1) /    2/
      COMMON/SQPLITORDERS1/SQPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NSQSO
        DO J=1,NSO
          IF (ORDERS(J).NE.SQSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_SQUARED_ORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping in function'
      WRITE(*,*) 'SOINDEX_FOR_SQUARED_ORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

      SUBROUTINE GET_NSQSO_BORN1(NSQSO)
C     
C     Simple subroutine returning the number of squared split order
C     contributions returned when calling smatrix_split_orders 
C     

      INTEGER    NSQUAREDSO
      PARAMETER  (NSQUAREDSO=1)

      INTEGER NSQSO

      NSQSO=NSQUAREDSO

      END

C     This is the inverse subroutine of SOINDEX_FOR_SQUARED_ORDERS.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_SQUARED_ORDERS_FOR_SOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the squared
C      split order index in argument. Order values correspond to
C      following list of couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO
      PARAMETER (NSO=1, NSQSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER SQPLITORDERS(NSQSO,NSO)
      COMMON/SQPLITORDERS1/SQPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.GT.0.AND.SOINDEX.LE.NSQSO) THEN
        DO I=1,NSO
          ORDERS(I) =  SQPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function'
     $ //' GET_SQUARED_ORDERS_FOR_SOINDEX1'
      WRITE(*,*) 'Could not find squared orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This is the inverse subroutine of getting amplitude SO orders.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_ORDERS_FOR_AMPSOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the split order
C      index in argument. Order values correspond to following list of
C      couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.GT.0.AND.SOINDEX.LE.NAMPSO) THEN
        DO I=1,NSO
          ORDERS(I) =  AMPSPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function GET_ORDERS_FOR_AMPSOINDEX1'
      WRITE(*,*) 'Could not find amplitude split orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This function is not directly useful, but included for
C      completeness
      INTEGER FUNCTION SOINDEX_FOR_AMPORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the
C      amplitude split orders passed in argument which correspond to
C      the values of the following list of couplings (and in this
C      order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NAMPSO
        DO J=1,NSO
          IF (ORDERS(J).NE.AMPSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_AMPORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping function SOINDEX_FOR_AMPORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

