      SUBROUTINE SMATRIX1(P,ANS)
C     
C     Generated by MadGraph5_aMC@NLO v. 2.8.2, 2020-10-30
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     MadGraph5_aMC@NLO for Madevent Version
C     
C     Returns amplitude squared -- no average over initial
C      state/symmetry factor
C     and helicities
C     for the point in phase space P(0:3,NEXTERNAL)
C     
C     Process: g g > t t~ g g WEIGHTED<=4 @1
C     
      USE DISCRETESAMPLER
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INCLUDE 'genps.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=64)
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=159)
      INTEGER    NDIAGS
      PARAMETER (NDIAGS=123)
      INTEGER    THEL
      PARAMETER (THEL=2*NCOMB)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL),ANS
C     
C     global (due to reading writting) 
C     
      LOGICAL GOODHEL(NCOMB,2)
      INTEGER NTRY(2)
      COMMON/BLOCK_GOODHEL/NTRY,GOODHEL

C     
C     LOCAL VARIABLES 
C     
      INTEGER NHEL(NEXTERNAL,NCOMB)
      INTEGER ISHEL(2)
      REAL*8 T,MATRIX1
      REAL*8 R,SUMHEL,TS(NCOMB)
      INTEGER I,IDEN
      INTEGER JC(NEXTERNAL),II
      REAL*8 HWGT, XTOT, XTRY, XREJ, XR, YFRAC(0:NCOMB)
      INTEGER NGOOD(2), IGOOD(NCOMB,2)
      INTEGER JHEL(2), J, JJ
      INTEGER THIS_NTRY(2)
      SAVE THIS_NTRY
      INTEGER NB_FAIL
      SAVE NB_FAIL
      DATA THIS_NTRY /0,0/
      DATA NB_FAIL /0/

C     
C     This is just to temporarily store the reference grid for
C      helicity of the DiscreteSampler so as to obtain its number of
C      entries with ref_helicity_grid%n_tot_entries
      TYPE(SAMPLEDDIMENSION) REF_HELICITY_GRID
C     
C     GLOBAL VARIABLES
C     
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2

      CHARACTER*101         HEL_BUFF
      COMMON/TO_HELICITY/  HEL_BUFF

      INTEGER NB_SPIN_STATE_IN(2)
      COMMON /NB_HEL_STATE/ NB_SPIN_STATE_IN

      INTEGER IMIRROR
      COMMON/TO_MIRROR/ IMIRROR

      REAL*8 POL(2)
      COMMON/TO_POLARIZATION/ POL

      DOUBLE PRECISION SMALL_WIDTH_TREATMENT
      COMMON/NARROW_WIDTH/SMALL_WIDTH_TREATMENT

      INTEGER          ISUM_HEL
      LOGICAL                    MULTI_CHANNEL
      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      DATA XTRY, XREJ /0,0/
      DATA NGOOD /0,0/
      DATA ISHEL/0,0/
      SAVE YFRAC, IGOOD, JHEL
      DATA (NHEL(I,   1),I=1,6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,   2),I=1,6) /-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,   3),I=1,6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,   4),I=1,6) /-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,   5),I=1,6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,   6),I=1,6) /-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,   7),I=1,6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,   8),I=1,6) /-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,   9),I=1,6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  10),I=1,6) /-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  11),I=1,6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  12),I=1,6) /-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  13),I=1,6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  14),I=1,6) /-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  15),I=1,6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  16),I=1,6) /-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  17),I=1,6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  18),I=1,6) /-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  19),I=1,6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  20),I=1,6) /-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  21),I=1,6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  22),I=1,6) /-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  23),I=1,6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  24),I=1,6) /-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  25),I=1,6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  26),I=1,6) /-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  27),I=1,6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  28),I=1,6) /-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  29),I=1,6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  30),I=1,6) /-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  31),I=1,6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  32),I=1,6) /-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  33),I=1,6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,  34),I=1,6) / 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,  35),I=1,6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  36),I=1,6) / 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  37),I=1,6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,  38),I=1,6) / 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,  39),I=1,6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,  40),I=1,6) / 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,  41),I=1,6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  42),I=1,6) / 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  43),I=1,6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  44),I=1,6) / 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  45),I=1,6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  46),I=1,6) / 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  47),I=1,6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  48),I=1,6) / 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  49),I=1,6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  50),I=1,6) / 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  51),I=1,6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  52),I=1,6) / 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  53),I=1,6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  54),I=1,6) / 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  55),I=1,6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  56),I=1,6) / 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  57),I=1,6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  58),I=1,6) / 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  59),I=1,6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  60),I=1,6) / 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  61),I=1,6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  62),I=1,6) / 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  63),I=1,6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  64),I=1,6) / 1, 1, 1,-1, 1, 1/
      DATA IDEN/512/

C     To be able to control when the matrix<i> subroutine can add
C      entries to the grid for the MC over helicity configuration
      LOGICAL ALLOW_HELICITY_GRID_ENTRIES
      COMMON/TO_ALLOW_HELICITY_GRID_ENTRIES/ALLOW_HELICITY_GRID_ENTRIES

C     ----------
C     BEGIN CODE
C     ----------
      call counters_smatrix1_start()
      NTRY(IMIRROR)=NTRY(IMIRROR)+1
      THIS_NTRY(IMIRROR) = THIS_NTRY(IMIRROR)+1
      DO I=1,NEXTERNAL
        JC(I) = +1
      ENDDO

      IF (MULTI_CHANNEL) THEN
        DO I=1,NDIAGS
          AMP2(I)=0D0
        ENDDO
        JAMP2(0)=24
        DO I=1,INT(JAMP2(0))
          JAMP2(I)=0D0
        ENDDO
      ENDIF
      ANS = 0D0
      WRITE(HEL_BUFF,'(20I5)') (0,I=1,NEXTERNAL)
      DO I=1,NCOMB
        TS(I)=0D0
      ENDDO

        !   If the helicity grid status is 0, this means that it is not yet initialized.
        !   If HEL_PICKED==-1, this means that calls to other matrix<i> where in initialization mode as well for the helicity.
      IF ((ISHEL(IMIRROR).EQ.0.AND.ISUM_HEL.EQ.0)
     $ .OR.(DS_GET_DIM_STATUS('Helicity').EQ.0).OR.(HEL_PICKED.EQ.-1))
     $  THEN
        DO I=1,NCOMB
          IF (GOODHEL(I,IMIRROR) .OR. NTRY(IMIRROR)
     $     .LE.MAXTRIES.OR.(ISUM_HEL.NE.0).OR.THIS_NTRY(IMIRROR).LE.2)
     $      THEN
            T=MATRIX1(P ,NHEL(1,I),JC(1))
            DO JJ=1,NINCOMING
              IF(POL(JJ).NE.1D0.AND.NHEL(JJ,I).EQ.INT(SIGN(1D0,POL(JJ))
     $         )) THEN
                T=T*ABS(POL(JJ))*NB_SPIN_STATE_IN(JJ)/2D0  ! NB_SPIN_STATE(JJ)/2d0 is added for polarised beam
              ELSE IF(POL(JJ).NE.1D0)THEN
                T=T*(2D0-ABS(POL(JJ)))*NB_SPIN_STATE_IN(JJ)/2D0
              ENDIF
            ENDDO
            IF (ISUM_HEL.NE.0.AND.DS_GET_DIM_STATUS('Helicity')
     $       .EQ.0.AND.ALLOW_HELICITY_GRID_ENTRIES) THEN
              CALL DS_ADD_ENTRY('Helicity',I,T)
            ENDIF
            ANS=ANS+DABS(T)
            TS(I)=T
          ENDIF
        ENDDO
        IF(NTRY(IMIRROR).EQ.(MAXTRIES+1)) THEN
          CALL RESET_CUMULATIVE_VARIABLE()  ! avoid biais of the initialization
        ENDIF
        IF (ISUM_HEL.NE.0) THEN
            !         We set HEL_PICKED to -1 here so that later on, the call to DS_add_point in dsample.f does not add anything to the grid since it was already done here.
          HEL_PICKED = -1
            !         For safety, hardset the helicity sampling jacobian to 0.0d0 to make sure it is not .
          HEL_JACOBIAN   = 1.0D0
            !         We don't want to re-update the helicity grid if it was already updated by another matrix<i>, so we make sure that the reference grid is empty.
          REF_HELICITY_GRID = DS_GET_DIMENSION(REF_GRID,'Helicity')
          IF((DS_GET_DIM_STATUS('Helicity').EQ.1)
     $     .AND.(REF_HELICITY_GRID%N_TOT_ENTRIES.EQ.0)) THEN
              !           If we finished the initialization we can update the grid so as to start sampling over it.
              !           However the grid will now be filled by dsample with different kind of weights (including pdf, flux, etc...) so by setting the grid_mode of the reference grid to 'initialization' we make sure it will be overwritten (as opposed to 'combined') by the running grid at the next update.
            CALL DS_UPDATE_GRID('Helicity')
            CALL DS_SET_GRID_MODE('Helicity','init')
          ENDIF
        ELSE
          JHEL(IMIRROR) = 1
          IF(NTRY(IMIRROR).LE.MAXTRIES.OR.THIS_NTRY(IMIRROR).LE.2)THEN
            DO I=1,NCOMB
              IF (.NOT.GOODHEL(I,IMIRROR) .AND. (DABS(TS(I)).GT.ANS
     $         *LIMHEL/NCOMB)) THEN
                GOODHEL(I,IMIRROR)=.TRUE.
                NGOOD(IMIRROR) = NGOOD(IMIRROR) +1
                IGOOD(NGOOD(IMIRROR),IMIRROR) = I
                PRINT *,'Added good helicity ',I,TS(I)*NCOMB/ANS,' in'
     $           //' event ',NTRY(IMIRROR), 'local:',THIS_NTRY(IMIRROR)
              ENDIF
            ENDDO
          ENDIF
          IF(NTRY(IMIRROR).EQ.MAXTRIES)THEN
            ISHEL(IMIRROR)=MIN(ISUM_HEL,NGOOD(IMIRROR))
          ENDIF
        ENDIF
      ELSE  ! random helicity 
C       The helicity configuration was chosen already by genps and put
C        in a common block defined in genps.inc.
        I = HEL_PICKED

        T=MATRIX1(P ,NHEL(1,I),JC(1))

        DO JJ=1,NINCOMING
          IF(POL(JJ).NE.1D0.AND.NHEL(JJ,I).EQ.INT(SIGN(1D0,POL(JJ))))
     $      THEN
            T=T*ABS(POL(JJ))
          ELSE IF(POL(JJ).NE.1D0)THEN
            T=T*(2D0-ABS(POL(JJ)))
          ENDIF
        ENDDO
C       Always one helicity at a time
        ANS = T
C       Include the Jacobian from helicity sampling
        ANS = ANS * HEL_JACOBIAN

        WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
      ENDIF
      IF (ANS.NE.0D0.AND.(ISUM_HEL .NE. 1.OR.HEL_PICKED.EQ.-1)) THEN
        CALL RANMAR(R)
        SUMHEL=0D0
        DO I=1,NCOMB
          SUMHEL=SUMHEL+DABS(TS(I))/ANS
          IF(R.LT.SUMHEL)THEN
            WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
C           Set right sign for ANS, based on sign of chosen helicity
            ANS=DSIGN(ANS,TS(I))
            GOTO 10
          ENDIF
        ENDDO
 10     CONTINUE
      ENDIF
      IF (MULTI_CHANNEL) THEN
        XTOT=0D0
        DO I=1,NDIAGS
          XTOT=XTOT+AMP2(I)
        ENDDO
        IF (XTOT.NE.0D0) THEN
          ANS=ANS*AMP2(SUBDIAG(1))/XTOT
        ELSE IF(ANS.NE.0D0) THEN
          IF(NB_FAIL.GE.10)THEN
            WRITE(*,*) 'Problem in the multi-channeling. All amp2 are'
     $       //' zero but not the total matrix-element'

            STOP 1
          ELSE
            NB_FAIL = NB_FAIL +1
          ENDIF
        ENDIF
      ENDIF
      ANS=ANS/DBLE(IDEN)
      call counters_smatrix1_stop()
      END


      REAL*8 FUNCTION MATRIX1(P,NHEL,IC)
C     
C     Generated by MadGraph5_aMC@NLO v. 2.8.2, 2020-10-30
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: g g > t t~ g g WEIGHTED<=4 @1
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=159)
      INCLUDE 'genps.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INTEGER    NWAVEFUNCS,     NCOLOR
      PARAMETER (NWAVEFUNCS=26, NCOLOR=24)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
      INTEGER NAMPSO, NSQAMPSO
      PARAMETER (NAMPSO=1, NSQAMPSO=1)
      LOGICAL CHOSEN_SO_CONFIGS(NSQAMPSO)
      DATA CHOSEN_SO_CONFIGS/.TRUE./
      SAVE CHOSEN_SO_CONFIGS
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,M,N
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR,NAMPSO)
      COMPLEX*16 W(6,NWAVEFUNCS)
C     Needed for v4 models
      COMPLEX*16 DUM0,DUM1
      DATA DUM0, DUM1/(0D0, 0D0), (1D0, 0D0)/

      DOUBLE PRECISION FK_ZERO
      DOUBLE PRECISION FK_MDL_WT
      SAVE FK_ZERO
      SAVE FK_MDL_WT

      LOGICAL FIRST
      DATA FIRST /.TRUE./
      SAVE FIRST
C     
C     FUNCTION
C     
      INTEGER SQSOINDEX1
C     
C     GLOBAL VARIABLES
C     
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2
      INCLUDE 'coupl.inc'

      DOUBLE PRECISION SMALL_WIDTH_TREATMENT
      COMMON/NARROW_WIDTH/SMALL_WIDTH_TREATMENT
C     
C     COLOR DATA
C     
      DATA DENOM(1)/54/
      DATA (CF(I,  1),I=  1,  6) /  512,  -64,  -64,    8,    8,   80/
      DATA (CF(I,  1),I=  7, 12) /  -64,    8,    8,   -1,   -1,  -10/
      DATA (CF(I,  1),I= 13, 18) /    8,   -1,   80,  -10,   71,   62/
      DATA (CF(I,  1),I= 19, 24) /   -1,  -10,  -10,   62,   62,  -28/
C     1 T(1,2,5,6,3,4)
      DATA DENOM(2)/54/
      DATA (CF(I,  2),I=  1,  6) /  -64,  512,    8,   80,  -64,    8/
      DATA (CF(I,  2),I=  7, 12) /    8,  -64,   -1,  -10,    8,   -1/
      DATA (CF(I,  2),I= 13, 18) /   -1,  -10,  -10,   62,   62,  -28/
      DATA (CF(I,  2),I= 19, 24) /    8,   -1,   80,  -10,   71,   62/
C     1 T(1,2,6,5,3,4)
      DATA DENOM(3)/54/
      DATA (CF(I,  3),I=  1,  6) /  -64,    8,  512,  -64,   80,    8/
      DATA (CF(I,  3),I=  7, 12) /    8,   -1,   80,  -10,   71,   62/
      DATA (CF(I,  3),I= 13, 18) /  -64,    8,    8,   -1,   -1,  -10/
      DATA (CF(I,  3),I= 19, 24) /  -10,   -1,   62,  -28,  -10,   62/
C     1 T(1,5,2,6,3,4)
      DATA DENOM(4)/54/
      DATA (CF(I,  4),I=  1,  6) /    8,   80,  -64,  512,    8,  -64/
      DATA (CF(I,  4),I=  7, 12) /   -1,  -10,  -10,   62,   62,  -28/
      DATA (CF(I,  4),I= 13, 18) /    8,  -64,   -1,  -10,    8,   -1/
      DATA (CF(I,  4),I= 19, 24) /   -1,    8,   71,   62,   80,  -10/
C     1 T(1,5,6,2,3,4)
      DATA DENOM(5)/54/
      DATA (CF(I,  5),I=  1,  6) /    8,  -64,   80,    8,  512,  -64/
      DATA (CF(I,  5),I=  7, 12) /   -1,    8,   71,   62,   80,  -10/
      DATA (CF(I,  5),I= 13, 18) /  -10,   -1,   62,  -28,  -10,   62/
      DATA (CF(I,  5),I= 19, 24) /  -64,    8,    8,   -1,   -1,  -10/
C     1 T(1,6,2,5,3,4)
      DATA DENOM(6)/54/
      DATA (CF(I,  6),I=  1,  6) /   80,    8,    8,  -64,  -64,  512/
      DATA (CF(I,  6),I=  7, 12) /  -10,   -1,   62,  -28,  -10,   62/
      DATA (CF(I,  6),I= 13, 18) /   -1,    8,   71,   62,   80,  -10/
      DATA (CF(I,  6),I= 19, 24) /    8,  -64,   -1,  -10,    8,   -1/
C     1 T(1,6,5,2,3,4)
      DATA DENOM(7)/54/
      DATA (CF(I,  7),I=  1,  6) /  -64,    8,    8,   -1,   -1,  -10/
      DATA (CF(I,  7),I=  7, 12) /  512,  -64,  -64,    8,    8,   80/
      DATA (CF(I,  7),I= 13, 18) /   80,  -10,    8,   -1,   62,   71/
      DATA (CF(I,  7),I= 19, 24) /  -10,   62,   -1,  -10,  -28,   62/
C     1 T(2,1,5,6,3,4)
      DATA DENOM(8)/54/
      DATA (CF(I,  8),I=  1,  6) /    8,  -64,   -1,  -10,    8,   -1/
      DATA (CF(I,  8),I=  7, 12) /  -64,  512,    8,   80,  -64,    8/
      DATA (CF(I,  8),I= 13, 18) /  -10,   62,   -1,  -10,  -28,   62/
      DATA (CF(I,  8),I= 19, 24) /   80,  -10,    8,   -1,   62,   71/
C     1 T(2,1,6,5,3,4)
      DATA DENOM(9)/54/
      DATA (CF(I,  9),I=  1,  6) /    8,   -1,   80,  -10,   71,   62/
      DATA (CF(I,  9),I=  7, 12) /  -64,    8,  512,  -64,   80,    8/
      DATA (CF(I,  9),I= 13, 18) /    8,   -1,  -64,    8,  -10,   -1/
      DATA (CF(I,  9),I= 19, 24) /   62,  -28,  -10,   -1,   62,  -10/
C     1 T(2,5,1,6,3,4)
      DATA DENOM(10)/54/
      DATA (CF(I, 10),I=  1,  6) /   -1,  -10,  -10,   62,   62,  -28/
      DATA (CF(I, 10),I=  7, 12) /    8,   80,  -64,  512,    8,  -64/
      DATA (CF(I, 10),I= 13, 18) /   -1,  -10,    8,  -64,   -1,    8/
      DATA (CF(I, 10),I= 19, 24) /   71,   62,   -1,    8,  -10,   80/
C     1 T(2,5,6,1,3,4)
      DATA DENOM(11)/54/
      DATA (CF(I, 11),I=  1,  6) /   -1,    8,   71,   62,   80,  -10/
      DATA (CF(I, 11),I=  7, 12) /    8,  -64,   80,    8,  512,  -64/
      DATA (CF(I, 11),I= 13, 18) /   62,  -28,  -10,   -1,   62,  -10/
      DATA (CF(I, 11),I= 19, 24) /    8,   -1,  -64,    8,  -10,   -1/
C     1 T(2,6,1,5,3,4)
      DATA DENOM(12)/54/
      DATA (CF(I, 12),I=  1,  6) /  -10,   -1,   62,  -28,  -10,   62/
      DATA (CF(I, 12),I=  7, 12) /   80,    8,    8,  -64,  -64,  512/
      DATA (CF(I, 12),I= 13, 18) /   71,   62,   -1,    8,  -10,   80/
      DATA (CF(I, 12),I= 19, 24) /   -1,  -10,    8,  -64,   -1,    8/
C     1 T(2,6,5,1,3,4)
      DATA DENOM(13)/54/
      DATA (CF(I, 13),I=  1,  6) /    8,   -1,  -64,    8,  -10,   -1/
      DATA (CF(I, 13),I=  7, 12) /   80,  -10,    8,   -1,   62,   71/
      DATA (CF(I, 13),I= 13, 18) /  512,  -64,  -64,    8,    8,   80/
      DATA (CF(I, 13),I= 19, 24) /   62,  -10,  -28,   62,   -1,  -10/
C     1 T(5,1,2,6,3,4)
      DATA DENOM(14)/54/
      DATA (CF(I, 14),I=  1,  6) /   -1,  -10,    8,  -64,   -1,    8/
      DATA (CF(I, 14),I=  7, 12) /  -10,   62,   -1,  -10,  -28,   62/
      DATA (CF(I, 14),I= 13, 18) /  -64,  512,    8,   80,  -64,    8/
      DATA (CF(I, 14),I= 19, 24) /  -10,   80,   62,   71,    8,   -1/
C     1 T(5,1,6,2,3,4)
      DATA DENOM(15)/54/
      DATA (CF(I, 15),I=  1,  6) /   80,  -10,    8,   -1,   62,   71/
      DATA (CF(I, 15),I=  7, 12) /    8,   -1,  -64,    8,  -10,   -1/
      DATA (CF(I, 15),I= 13, 18) /  -64,    8,  512,  -64,   80,    8/
      DATA (CF(I, 15),I= 19, 24) /  -28,   62,   62,  -10,  -10,   -1/
C     1 T(5,2,1,6,3,4)
      DATA DENOM(16)/54/
      DATA (CF(I, 16),I=  1,  6) /  -10,   62,   -1,  -10,  -28,   62/
      DATA (CF(I, 16),I=  7, 12) /   -1,  -10,    8,  -64,   -1,    8/
      DATA (CF(I, 16),I= 13, 18) /    8,   80,  -64,  512,    8,  -64/
      DATA (CF(I, 16),I= 19, 24) /   62,   71,  -10,   80,   -1,    8/
C     1 T(5,2,6,1,3,4)
      DATA DENOM(17)/54/
      DATA (CF(I, 17),I=  1,  6) /   71,   62,   -1,    8,  -10,   80/
      DATA (CF(I, 17),I=  7, 12) /   62,  -28,  -10,   -1,   62,  -10/
      DATA (CF(I, 17),I= 13, 18) /    8,  -64,   80,    8,  512,  -64/
      DATA (CF(I, 17),I= 19, 24) /   -1,    8,  -10,   -1,  -64,    8/
C     1 T(5,6,1,2,3,4)
      DATA DENOM(18)/54/
      DATA (CF(I, 18),I=  1,  6) /   62,  -28,  -10,   -1,   62,  -10/
      DATA (CF(I, 18),I=  7, 12) /   71,   62,   -1,    8,  -10,   80/
      DATA (CF(I, 18),I= 13, 18) /   80,    8,    8,  -64,  -64,  512/
      DATA (CF(I, 18),I= 19, 24) /  -10,   -1,   -1,    8,    8,  -64/
C     1 T(5,6,2,1,3,4)
      DATA DENOM(19)/54/
      DATA (CF(I, 19),I=  1,  6) /   -1,    8,  -10,   -1,  -64,    8/
      DATA (CF(I, 19),I=  7, 12) /  -10,   80,   62,   71,    8,   -1/
      DATA (CF(I, 19),I= 13, 18) /   62,  -10,  -28,   62,   -1,  -10/
      DATA (CF(I, 19),I= 19, 24) /  512,  -64,  -64,    8,    8,   80/
C     1 T(6,1,2,5,3,4)
      DATA DENOM(20)/54/
      DATA (CF(I, 20),I=  1,  6) /  -10,   -1,   -1,    8,    8,  -64/
      DATA (CF(I, 20),I=  7, 12) /   62,  -10,  -28,   62,   -1,  -10/
      DATA (CF(I, 20),I= 13, 18) /  -10,   80,   62,   71,    8,   -1/
      DATA (CF(I, 20),I= 19, 24) /  -64,  512,    8,   80,  -64,    8/
C     1 T(6,1,5,2,3,4)
      DATA DENOM(21)/54/
      DATA (CF(I, 21),I=  1,  6) /  -10,   80,   62,   71,    8,   -1/
      DATA (CF(I, 21),I=  7, 12) /   -1,    8,  -10,   -1,  -64,    8/
      DATA (CF(I, 21),I= 13, 18) /  -28,   62,   62,  -10,  -10,   -1/
      DATA (CF(I, 21),I= 19, 24) /  -64,    8,  512,  -64,   80,    8/
C     1 T(6,2,1,5,3,4)
      DATA DENOM(22)/54/
      DATA (CF(I, 22),I=  1,  6) /   62,  -10,  -28,   62,   -1,  -10/
      DATA (CF(I, 22),I=  7, 12) /  -10,   -1,   -1,    8,    8,  -64/
      DATA (CF(I, 22),I= 13, 18) /   62,   71,  -10,   80,   -1,    8/
      DATA (CF(I, 22),I= 19, 24) /    8,   80,  -64,  512,    8,  -64/
C     1 T(6,2,5,1,3,4)
      DATA DENOM(23)/54/
      DATA (CF(I, 23),I=  1,  6) /   62,   71,  -10,   80,   -1,    8/
      DATA (CF(I, 23),I=  7, 12) /  -28,   62,   62,  -10,  -10,   -1/
      DATA (CF(I, 23),I= 13, 18) /   -1,    8,  -10,   -1,  -64,    8/
      DATA (CF(I, 23),I= 19, 24) /    8,  -64,   80,    8,  512,  -64/
C     1 T(6,5,1,2,3,4)
      DATA DENOM(24)/54/
      DATA (CF(I, 24),I=  1,  6) /  -28,   62,   62,  -10,  -10,   -1/
      DATA (CF(I, 24),I=  7, 12) /   62,   71,  -10,   80,   -1,    8/
      DATA (CF(I, 24),I= 13, 18) /  -10,   -1,   -1,    8,    8,  -64/
      DATA (CF(I, 24),I= 19, 24) /   80,    8,    8,  -64,  -64,  512/
C     1 T(6,5,2,1,3,4)
C     ----------
C     BEGIN CODE
C     ----------
      call counters_matrix1_start()
      IF (FIRST) THEN
        FIRST=.FALSE.
        IF(ZERO.NE.0D0) FK_ZERO = SIGN(MAX(ABS(ZERO), ABS(ZERO
     $   *SMALL_WIDTH_TREATMENT)), ZERO)
        IF(MDL_WT.NE.0D0) FK_MDL_WT = SIGN(MAX(ABS(MDL_WT), ABS(MDL_MT
     $   *SMALL_WIDTH_TREATMENT)), MDL_WT)
      ENDIF


      CALL VXXXXX(P(0,1),ZERO,NHEL(1),-1*IC(1),W(1,1))
      CALL VXXXXX(P(0,2),ZERO,NHEL(2),-1*IC(2),W(1,2))
      CALL OXXXXX(P(0,3),MDL_MT,NHEL(3),+1*IC(3),W(1,3))
      CALL IXXXXX(P(0,4),MDL_MT,NHEL(4),-1*IC(4),W(1,4))
      CALL VXXXXX(P(0,5),ZERO,NHEL(5),+1*IC(5),W(1,5))
      CALL VXXXXX(P(0,6),ZERO,NHEL(6),+1*IC(6),W(1,6))
      CALL VVV1P0_1(W(1,1),W(1,2),GC_10,ZERO, FK_ZERO,W(1,7))
      CALL FFV1P0_3(W(1,4),W(1,3),GC_11,ZERO, FK_ZERO,W(1,8))
C     Amplitude(s) for diagram number 1
      CALL VVVV1_0(W(1,7),W(1,8),W(1,5),W(1,6),GC_12,AMP(1))
      CALL VVVV3_0(W(1,7),W(1,8),W(1,5),W(1,6),GC_12,AMP(2))
      CALL VVVV4_0(W(1,7),W(1,8),W(1,5),W(1,6),GC_12,AMP(3))
      CALL VVV1P0_1(W(1,7),W(1,5),GC_10,ZERO, FK_ZERO,W(1,9))
C     Amplitude(s) for diagram number 2
      CALL VVV1_0(W(1,8),W(1,6),W(1,9),GC_10,AMP(4))
      CALL VVV1P0_1(W(1,7),W(1,6),GC_10,ZERO, FK_ZERO,W(1,10))
C     Amplitude(s) for diagram number 3
      CALL VVV1_0(W(1,8),W(1,5),W(1,10),GC_10,AMP(5))
      CALL VVV1P0_1(W(1,5),W(1,6),GC_10,ZERO, FK_ZERO,W(1,11))
C     Amplitude(s) for diagram number 4
      CALL VVV1_0(W(1,7),W(1,8),W(1,11),GC_10,AMP(6))
      CALL FFV1_1(W(1,3),W(1,5),GC_11,MDL_MT, FK_MDL_WT,W(1,12))
      CALL FFV1_2(W(1,4),W(1,7),GC_11,MDL_MT, FK_MDL_WT,W(1,13))
C     Amplitude(s) for diagram number 5
      CALL FFV1_0(W(1,13),W(1,12),W(1,6),GC_11,AMP(7))
C     Amplitude(s) for diagram number 6
      CALL FFV1_0(W(1,4),W(1,12),W(1,10),GC_11,AMP(8))
      CALL FFV1_2(W(1,4),W(1,6),GC_11,MDL_MT, FK_MDL_WT,W(1,14))
C     Amplitude(s) for diagram number 7
      CALL FFV1_0(W(1,14),W(1,12),W(1,7),GC_11,AMP(9))
      CALL FFV1_1(W(1,3),W(1,6),GC_11,MDL_MT, FK_MDL_WT,W(1,15))
C     Amplitude(s) for diagram number 8
      CALL FFV1_0(W(1,13),W(1,15),W(1,5),GC_11,AMP(10))
C     Amplitude(s) for diagram number 9
      CALL FFV1_0(W(1,4),W(1,15),W(1,9),GC_11,AMP(11))
      CALL FFV1_2(W(1,4),W(1,5),GC_11,MDL_MT, FK_MDL_WT,W(1,16))
C     Amplitude(s) for diagram number 10
      CALL FFV1_0(W(1,16),W(1,15),W(1,7),GC_11,AMP(12))
      CALL FFV1_1(W(1,3),W(1,7),GC_11,MDL_MT, FK_MDL_WT,W(1,17))
C     Amplitude(s) for diagram number 11
      CALL FFV1_0(W(1,16),W(1,17),W(1,6),GC_11,AMP(13))
C     Amplitude(s) for diagram number 12
      CALL FFV1_0(W(1,16),W(1,3),W(1,10),GC_11,AMP(14))
C     Amplitude(s) for diagram number 13
      CALL FFV1_0(W(1,14),W(1,17),W(1,5),GC_11,AMP(15))
C     Amplitude(s) for diagram number 14
      CALL FFV1_0(W(1,14),W(1,3),W(1,9),GC_11,AMP(16))
C     Amplitude(s) for diagram number 15
      CALL FFV1_0(W(1,4),W(1,17),W(1,11),GC_11,AMP(17))
C     Amplitude(s) for diagram number 16
      CALL FFV1_0(W(1,13),W(1,3),W(1,11),GC_11,AMP(18))
      CALL FFV1_1(W(1,3),W(1,1),GC_11,MDL_MT, ZERO,W(1,13))
      CALL FFV1_2(W(1,4),W(1,2),GC_11,MDL_MT, ZERO,W(1,17))
      CALL FFV1_1(W(1,13),W(1,5),GC_11,MDL_MT, ZERO,W(1,9))
C     Amplitude(s) for diagram number 17
      CALL FFV1_0(W(1,17),W(1,9),W(1,6),GC_11,AMP(19))
      CALL FFV1_1(W(1,13),W(1,6),GC_11,MDL_MT, ZERO,W(1,10))
C     Amplitude(s) for diagram number 18
      CALL FFV1_0(W(1,17),W(1,10),W(1,5),GC_11,AMP(20))
C     Amplitude(s) for diagram number 19
      CALL FFV1_0(W(1,17),W(1,13),W(1,11),GC_11,AMP(21))
      CALL VVV1P0_1(W(1,2),W(1,5),GC_10,ZERO, FK_ZERO,W(1,7))
      CALL FFV1P0_3(W(1,4),W(1,13),GC_11,ZERO, FK_ZERO,W(1,18))
C     Amplitude(s) for diagram number 20
      CALL VVV1_0(W(1,7),W(1,6),W(1,18),GC_10,AMP(22))
C     Amplitude(s) for diagram number 21
      CALL FFV1_0(W(1,4),W(1,10),W(1,7),GC_11,AMP(23))
C     Amplitude(s) for diagram number 22
      CALL FFV1_0(W(1,14),W(1,13),W(1,7),GC_11,AMP(24))
      CALL VVV1P0_1(W(1,2),W(1,6),GC_10,ZERO, FK_ZERO,W(1,19))
C     Amplitude(s) for diagram number 23
      CALL VVV1_0(W(1,19),W(1,5),W(1,18),GC_10,AMP(25))
C     Amplitude(s) for diagram number 24
      CALL FFV1_0(W(1,4),W(1,9),W(1,19),GC_11,AMP(26))
C     Amplitude(s) for diagram number 25
      CALL FFV1_0(W(1,16),W(1,13),W(1,19),GC_11,AMP(27))
      CALL FFV1_1(W(1,13),W(1,2),GC_11,MDL_MT, FK_MDL_WT,W(1,20))
C     Amplitude(s) for diagram number 26
      CALL FFV1_0(W(1,16),W(1,20),W(1,6),GC_11,AMP(28))
C     Amplitude(s) for diagram number 27
      CALL FFV1_0(W(1,16),W(1,10),W(1,2),GC_11,AMP(29))
C     Amplitude(s) for diagram number 28
      CALL FFV1_0(W(1,14),W(1,20),W(1,5),GC_11,AMP(30))
C     Amplitude(s) for diagram number 29
      CALL FFV1_0(W(1,14),W(1,9),W(1,2),GC_11,AMP(31))
C     Amplitude(s) for diagram number 30
      CALL FFV1_0(W(1,4),W(1,20),W(1,11),GC_11,AMP(32))
C     Amplitude(s) for diagram number 31
      CALL VVV1_0(W(1,2),W(1,11),W(1,18),GC_10,AMP(33))
      CALL VVVV1P0_1(W(1,2),W(1,5),W(1,6),GC_12,ZERO, FK_ZERO,W(1,18))
      CALL VVVV3P0_1(W(1,2),W(1,5),W(1,6),GC_12,ZERO, FK_ZERO,W(1,20))
      CALL VVVV4P0_1(W(1,2),W(1,5),W(1,6),GC_12,ZERO, FK_ZERO,W(1,9))
C     Amplitude(s) for diagram number 32
      CALL FFV1_0(W(1,4),W(1,13),W(1,18),GC_11,AMP(34))
      CALL FFV1_0(W(1,4),W(1,13),W(1,20),GC_11,AMP(35))
      CALL FFV1_0(W(1,4),W(1,13),W(1,9),GC_11,AMP(36))
      CALL FFV1_2(W(1,4),W(1,1),GC_11,MDL_MT, ZERO,W(1,13))
      CALL FFV1_1(W(1,3),W(1,2),GC_11,MDL_MT, ZERO,W(1,10))
      CALL FFV1_2(W(1,13),W(1,5),GC_11,MDL_MT, ZERO,W(1,21))
C     Amplitude(s) for diagram number 33
      CALL FFV1_0(W(1,21),W(1,10),W(1,6),GC_11,AMP(37))
      CALL FFV1_2(W(1,13),W(1,6),GC_11,MDL_MT, ZERO,W(1,22))
C     Amplitude(s) for diagram number 34
      CALL FFV1_0(W(1,22),W(1,10),W(1,5),GC_11,AMP(38))
C     Amplitude(s) for diagram number 35
      CALL FFV1_0(W(1,13),W(1,10),W(1,11),GC_11,AMP(39))
      CALL FFV1P0_3(W(1,13),W(1,3),GC_11,ZERO, FK_ZERO,W(1,23))
C     Amplitude(s) for diagram number 36
      CALL VVV1_0(W(1,7),W(1,6),W(1,23),GC_10,AMP(40))
C     Amplitude(s) for diagram number 37
      CALL FFV1_0(W(1,22),W(1,3),W(1,7),GC_11,AMP(41))
C     Amplitude(s) for diagram number 38
      CALL FFV1_0(W(1,13),W(1,15),W(1,7),GC_11,AMP(42))
C     Amplitude(s) for diagram number 39
      CALL VVV1_0(W(1,19),W(1,5),W(1,23),GC_10,AMP(43))
C     Amplitude(s) for diagram number 40
      CALL FFV1_0(W(1,21),W(1,3),W(1,19),GC_11,AMP(44))
C     Amplitude(s) for diagram number 41
      CALL FFV1_0(W(1,13),W(1,12),W(1,19),GC_11,AMP(45))
      CALL FFV1_2(W(1,13),W(1,2),GC_11,MDL_MT, FK_MDL_WT,W(1,24))
C     Amplitude(s) for diagram number 42
      CALL FFV1_0(W(1,24),W(1,12),W(1,6),GC_11,AMP(46))
C     Amplitude(s) for diagram number 43
      CALL FFV1_0(W(1,22),W(1,12),W(1,2),GC_11,AMP(47))
C     Amplitude(s) for diagram number 44
      CALL FFV1_0(W(1,24),W(1,15),W(1,5),GC_11,AMP(48))
C     Amplitude(s) for diagram number 45
      CALL FFV1_0(W(1,21),W(1,15),W(1,2),GC_11,AMP(49))
C     Amplitude(s) for diagram number 46
      CALL FFV1_0(W(1,24),W(1,3),W(1,11),GC_11,AMP(50))
C     Amplitude(s) for diagram number 47
      CALL VVV1_0(W(1,2),W(1,11),W(1,23),GC_10,AMP(51))
C     Amplitude(s) for diagram number 48
      CALL FFV1_0(W(1,13),W(1,3),W(1,18),GC_11,AMP(52))
      CALL FFV1_0(W(1,13),W(1,3),W(1,20),GC_11,AMP(53))
      CALL FFV1_0(W(1,13),W(1,3),W(1,9),GC_11,AMP(54))
      CALL VVV1P0_1(W(1,1),W(1,5),GC_10,ZERO, FK_ZERO,W(1,13))
      CALL FFV1_2(W(1,4),W(1,13),GC_11,MDL_MT, ZERO,W(1,23))
C     Amplitude(s) for diagram number 49
      CALL FFV1_0(W(1,23),W(1,10),W(1,6),GC_11,AMP(55))
      CALL VVV1P0_1(W(1,13),W(1,6),GC_10,ZERO, FK_ZERO,W(1,24))
C     Amplitude(s) for diagram number 50
      CALL FFV1_0(W(1,4),W(1,10),W(1,24),GC_11,AMP(56))
C     Amplitude(s) for diagram number 51
      CALL FFV1_0(W(1,14),W(1,10),W(1,13),GC_11,AMP(57))
      CALL FFV1_1(W(1,3),W(1,13),GC_11,MDL_MT, ZERO,W(1,21))
C     Amplitude(s) for diagram number 52
      CALL FFV1_0(W(1,17),W(1,21),W(1,6),GC_11,AMP(58))
C     Amplitude(s) for diagram number 53
      CALL FFV1_0(W(1,17),W(1,3),W(1,24),GC_11,AMP(59))
C     Amplitude(s) for diagram number 54
      CALL FFV1_0(W(1,17),W(1,15),W(1,13),GC_11,AMP(60))
C     Amplitude(s) for diagram number 55
      CALL FFV1_0(W(1,4),W(1,21),W(1,19),GC_11,AMP(61))
C     Amplitude(s) for diagram number 56
      CALL FFV1_0(W(1,23),W(1,3),W(1,19),GC_11,AMP(62))
C     Amplitude(s) for diagram number 57
      CALL VVV1_0(W(1,13),W(1,19),W(1,8),GC_10,AMP(63))
C     Amplitude(s) for diagram number 58
      CALL VVVV1_0(W(1,13),W(1,2),W(1,8),W(1,6),GC_12,AMP(64))
      CALL VVVV3_0(W(1,13),W(1,2),W(1,8),W(1,6),GC_12,AMP(65))
      CALL VVVV4_0(W(1,13),W(1,2),W(1,8),W(1,6),GC_12,AMP(66))
      CALL VVV1P0_1(W(1,13),W(1,2),GC_10,ZERO, FK_ZERO,W(1,22))
C     Amplitude(s) for diagram number 59
      CALL VVV1_0(W(1,8),W(1,6),W(1,22),GC_10,AMP(67))
C     Amplitude(s) for diagram number 60
      CALL VVV1_0(W(1,2),W(1,8),W(1,24),GC_10,AMP(68))
C     Amplitude(s) for diagram number 61
      CALL FFV1_0(W(1,4),W(1,15),W(1,22),GC_11,AMP(69))
C     Amplitude(s) for diagram number 62
      CALL FFV1_0(W(1,23),W(1,15),W(1,2),GC_11,AMP(70))
C     Amplitude(s) for diagram number 63
      CALL FFV1_0(W(1,14),W(1,3),W(1,22),GC_11,AMP(71))
C     Amplitude(s) for diagram number 64
      CALL FFV1_0(W(1,14),W(1,21),W(1,2),GC_11,AMP(72))
      CALL VVV1P0_1(W(1,1),W(1,6),GC_10,ZERO, FK_ZERO,W(1,21))
      CALL FFV1_2(W(1,4),W(1,21),GC_11,MDL_MT, ZERO,W(1,22))
C     Amplitude(s) for diagram number 65
      CALL FFV1_0(W(1,22),W(1,10),W(1,5),GC_11,AMP(73))
      CALL VVV1P0_1(W(1,21),W(1,5),GC_10,ZERO, FK_ZERO,W(1,23))
C     Amplitude(s) for diagram number 66
      CALL FFV1_0(W(1,4),W(1,10),W(1,23),GC_11,AMP(74))
C     Amplitude(s) for diagram number 67
      CALL FFV1_0(W(1,16),W(1,10),W(1,21),GC_11,AMP(75))
      CALL FFV1_1(W(1,3),W(1,21),GC_11,MDL_MT, ZERO,W(1,24))
C     Amplitude(s) for diagram number 68
      CALL FFV1_0(W(1,17),W(1,24),W(1,5),GC_11,AMP(76))
C     Amplitude(s) for diagram number 69
      CALL FFV1_0(W(1,17),W(1,3),W(1,23),GC_11,AMP(77))
C     Amplitude(s) for diagram number 70
      CALL FFV1_0(W(1,17),W(1,12),W(1,21),GC_11,AMP(78))
C     Amplitude(s) for diagram number 71
      CALL FFV1_0(W(1,4),W(1,24),W(1,7),GC_11,AMP(79))
C     Amplitude(s) for diagram number 72
      CALL FFV1_0(W(1,22),W(1,3),W(1,7),GC_11,AMP(80))
C     Amplitude(s) for diagram number 73
      CALL VVV1_0(W(1,21),W(1,7),W(1,8),GC_10,AMP(81))
C     Amplitude(s) for diagram number 74
      CALL VVVV1_0(W(1,21),W(1,2),W(1,8),W(1,5),GC_12,AMP(82))
      CALL VVVV3_0(W(1,21),W(1,2),W(1,8),W(1,5),GC_12,AMP(83))
      CALL VVVV4_0(W(1,21),W(1,2),W(1,8),W(1,5),GC_12,AMP(84))
      CALL VVV1P0_1(W(1,21),W(1,2),GC_10,ZERO, FK_ZERO,W(1,13))
C     Amplitude(s) for diagram number 75
      CALL VVV1_0(W(1,8),W(1,5),W(1,13),GC_10,AMP(85))
C     Amplitude(s) for diagram number 76
      CALL VVV1_0(W(1,2),W(1,8),W(1,23),GC_10,AMP(86))
C     Amplitude(s) for diagram number 77
      CALL FFV1_0(W(1,4),W(1,12),W(1,13),GC_11,AMP(87))
C     Amplitude(s) for diagram number 78
      CALL FFV1_0(W(1,22),W(1,12),W(1,2),GC_11,AMP(88))
C     Amplitude(s) for diagram number 79
      CALL FFV1_0(W(1,16),W(1,3),W(1,13),GC_11,AMP(89))
C     Amplitude(s) for diagram number 80
      CALL FFV1_0(W(1,16),W(1,24),W(1,2),GC_11,AMP(90))
      CALL FFV1_1(W(1,10),W(1,1),GC_11,MDL_MT, FK_MDL_WT,W(1,24))
C     Amplitude(s) for diagram number 81
      CALL FFV1_0(W(1,16),W(1,24),W(1,6),GC_11,AMP(91))
      CALL FFV1_2(W(1,16),W(1,1),GC_11,MDL_MT, ZERO,W(1,13))
C     Amplitude(s) for diagram number 82
      CALL FFV1_0(W(1,13),W(1,10),W(1,6),GC_11,AMP(92))
C     Amplitude(s) for diagram number 83
      CALL FFV1_0(W(1,14),W(1,24),W(1,5),GC_11,AMP(93))
      CALL FFV1_2(W(1,14),W(1,1),GC_11,MDL_MT, ZERO,W(1,22))
C     Amplitude(s) for diagram number 84
      CALL FFV1_0(W(1,22),W(1,10),W(1,5),GC_11,AMP(94))
C     Amplitude(s) for diagram number 85
      CALL FFV1_0(W(1,4),W(1,24),W(1,11),GC_11,AMP(95))
      CALL VVV1P0_1(W(1,1),W(1,11),GC_10,ZERO, FK_ZERO,W(1,24))
C     Amplitude(s) for diagram number 86
      CALL FFV1_0(W(1,4),W(1,10),W(1,24),GC_11,AMP(96))
      CALL FFV1_2(W(1,17),W(1,1),GC_11,MDL_MT, FK_MDL_WT,W(1,23))
C     Amplitude(s) for diagram number 87
      CALL FFV1_0(W(1,23),W(1,12),W(1,6),GC_11,AMP(97))
      CALL FFV1_1(W(1,12),W(1,1),GC_11,MDL_MT, ZERO,W(1,21))
C     Amplitude(s) for diagram number 88
      CALL FFV1_0(W(1,17),W(1,21),W(1,6),GC_11,AMP(98))
C     Amplitude(s) for diagram number 89
      CALL FFV1_0(W(1,23),W(1,15),W(1,5),GC_11,AMP(99))
      CALL FFV1_1(W(1,15),W(1,1),GC_11,MDL_MT, ZERO,W(1,25))
C     Amplitude(s) for diagram number 90
      CALL FFV1_0(W(1,17),W(1,25),W(1,5),GC_11,AMP(100))
C     Amplitude(s) for diagram number 91
      CALL FFV1_0(W(1,23),W(1,3),W(1,11),GC_11,AMP(101))
C     Amplitude(s) for diagram number 92
      CALL FFV1_0(W(1,17),W(1,3),W(1,24),GC_11,AMP(102))
C     Amplitude(s) for diagram number 93
      CALL VVVV1_0(W(1,1),W(1,7),W(1,8),W(1,6),GC_12,AMP(103))
      CALL VVVV3_0(W(1,1),W(1,7),W(1,8),W(1,6),GC_12,AMP(104))
      CALL VVVV4_0(W(1,1),W(1,7),W(1,8),W(1,6),GC_12,AMP(105))
      CALL VVV1P0_1(W(1,1),W(1,7),GC_10,ZERO, FK_ZERO,W(1,23))
C     Amplitude(s) for diagram number 94
      CALL VVV1_0(W(1,8),W(1,6),W(1,23),GC_10,AMP(106))
      CALL VVV1P0_1(W(1,1),W(1,8),GC_10,ZERO, FK_ZERO,W(1,26))
C     Amplitude(s) for diagram number 95
      CALL VVV1_0(W(1,7),W(1,6),W(1,26),GC_10,AMP(107))
C     Amplitude(s) for diagram number 96
      CALL FFV1_0(W(1,4),W(1,15),W(1,23),GC_11,AMP(108))
C     Amplitude(s) for diagram number 97
      CALL FFV1_0(W(1,4),W(1,25),W(1,7),GC_11,AMP(109))
C     Amplitude(s) for diagram number 98
      CALL FFV1_0(W(1,14),W(1,3),W(1,23),GC_11,AMP(110))
C     Amplitude(s) for diagram number 99
      CALL FFV1_0(W(1,22),W(1,3),W(1,7),GC_11,AMP(111))
C     Amplitude(s) for diagram number 100
      CALL VVVV1_0(W(1,1),W(1,19),W(1,8),W(1,5),GC_12,AMP(112))
      CALL VVVV3_0(W(1,1),W(1,19),W(1,8),W(1,5),GC_12,AMP(113))
      CALL VVVV4_0(W(1,1),W(1,19),W(1,8),W(1,5),GC_12,AMP(114))
      CALL VVV1P0_1(W(1,1),W(1,19),GC_10,ZERO, FK_ZERO,W(1,7))
C     Amplitude(s) for diagram number 101
      CALL VVV1_0(W(1,8),W(1,5),W(1,7),GC_10,AMP(115))
C     Amplitude(s) for diagram number 102
      CALL VVV1_0(W(1,19),W(1,5),W(1,26),GC_10,AMP(116))
C     Amplitude(s) for diagram number 103
      CALL FFV1_0(W(1,4),W(1,12),W(1,7),GC_11,AMP(117))
C     Amplitude(s) for diagram number 104
      CALL FFV1_0(W(1,4),W(1,21),W(1,19),GC_11,AMP(118))
C     Amplitude(s) for diagram number 105
      CALL FFV1_0(W(1,16),W(1,3),W(1,7),GC_11,AMP(119))
C     Amplitude(s) for diagram number 106
      CALL FFV1_0(W(1,13),W(1,3),W(1,19),GC_11,AMP(120))
C     Amplitude(s) for diagram number 107
      CALL VVVV1_0(W(1,1),W(1,2),W(1,8),W(1,11),GC_12,AMP(121))
      CALL VVVV3_0(W(1,1),W(1,2),W(1,8),W(1,11),GC_12,AMP(122))
      CALL VVVV4_0(W(1,1),W(1,2),W(1,8),W(1,11),GC_12,AMP(123))
C     Amplitude(s) for diagram number 108
      CALL VVV1_0(W(1,2),W(1,11),W(1,26),GC_10,AMP(124))
C     Amplitude(s) for diagram number 109
      CALL VVV1_0(W(1,2),W(1,8),W(1,24),GC_10,AMP(125))
C     Amplitude(s) for diagram number 110
      CALL FFV1_0(W(1,14),W(1,21),W(1,2),GC_11,AMP(126))
C     Amplitude(s) for diagram number 111
      CALL FFV1_0(W(1,22),W(1,12),W(1,2),GC_11,AMP(127))
C     Amplitude(s) for diagram number 112
      CALL FFV1_0(W(1,16),W(1,25),W(1,2),GC_11,AMP(128))
C     Amplitude(s) for diagram number 113
      CALL FFV1_0(W(1,13),W(1,15),W(1,2),GC_11,AMP(129))
      CALL VVVV1P0_1(W(1,1),W(1,2),W(1,5),GC_12,ZERO, FK_ZERO,W(1,13))
      CALL VVVV3P0_1(W(1,1),W(1,2),W(1,5),GC_12,ZERO, FK_ZERO,W(1,25))
      CALL VVVV4P0_1(W(1,1),W(1,2),W(1,5),GC_12,ZERO, FK_ZERO,W(1,22))
C     Amplitude(s) for diagram number 114
      CALL VVV1_0(W(1,13),W(1,8),W(1,6),GC_10,AMP(130))
      CALL VVV1_0(W(1,25),W(1,8),W(1,6),GC_10,AMP(131))
      CALL VVV1_0(W(1,22),W(1,8),W(1,6),GC_10,AMP(132))
C     Amplitude(s) for diagram number 115
      CALL FFV1_0(W(1,4),W(1,15),W(1,13),GC_11,AMP(133))
      CALL FFV1_0(W(1,4),W(1,15),W(1,25),GC_11,AMP(134))
      CALL FFV1_0(W(1,4),W(1,15),W(1,22),GC_11,AMP(135))
C     Amplitude(s) for diagram number 116
      CALL FFV1_0(W(1,14),W(1,3),W(1,13),GC_11,AMP(136))
      CALL FFV1_0(W(1,14),W(1,3),W(1,25),GC_11,AMP(137))
      CALL FFV1_0(W(1,14),W(1,3),W(1,22),GC_11,AMP(138))
      CALL VVVV1P0_1(W(1,1),W(1,2),W(1,6),GC_12,ZERO, FK_ZERO,W(1,22))
      CALL VVVV3P0_1(W(1,1),W(1,2),W(1,6),GC_12,ZERO, FK_ZERO,W(1,14))
      CALL VVVV4P0_1(W(1,1),W(1,2),W(1,6),GC_12,ZERO, FK_ZERO,W(1,25))
C     Amplitude(s) for diagram number 117
      CALL VVV1_0(W(1,22),W(1,8),W(1,5),GC_10,AMP(139))
      CALL VVV1_0(W(1,14),W(1,8),W(1,5),GC_10,AMP(140))
      CALL VVV1_0(W(1,25),W(1,8),W(1,5),GC_10,AMP(141))
C     Amplitude(s) for diagram number 118
      CALL FFV1_0(W(1,4),W(1,12),W(1,22),GC_11,AMP(142))
      CALL FFV1_0(W(1,4),W(1,12),W(1,14),GC_11,AMP(143))
      CALL FFV1_0(W(1,4),W(1,12),W(1,25),GC_11,AMP(144))
C     Amplitude(s) for diagram number 119
      CALL FFV1_0(W(1,16),W(1,3),W(1,22),GC_11,AMP(145))
      CALL FFV1_0(W(1,16),W(1,3),W(1,14),GC_11,AMP(146))
      CALL FFV1_0(W(1,16),W(1,3),W(1,25),GC_11,AMP(147))
      CALL VVVV1P0_1(W(1,1),W(1,5),W(1,6),GC_12,ZERO, FK_ZERO,W(1,25))
      CALL VVVV3P0_1(W(1,1),W(1,5),W(1,6),GC_12,ZERO, FK_ZERO,W(1,16))
      CALL VVVV4P0_1(W(1,1),W(1,5),W(1,6),GC_12,ZERO, FK_ZERO,W(1,14))
C     Amplitude(s) for diagram number 120
      CALL FFV1_0(W(1,4),W(1,10),W(1,25),GC_11,AMP(148))
      CALL FFV1_0(W(1,4),W(1,10),W(1,16),GC_11,AMP(149))
      CALL FFV1_0(W(1,4),W(1,10),W(1,14),GC_11,AMP(150))
C     Amplitude(s) for diagram number 121
      CALL FFV1_0(W(1,17),W(1,3),W(1,25),GC_11,AMP(151))
      CALL FFV1_0(W(1,17),W(1,3),W(1,16),GC_11,AMP(152))
      CALL FFV1_0(W(1,17),W(1,3),W(1,14),GC_11,AMP(153))
C     Amplitude(s) for diagram number 122
      CALL VVV1_0(W(1,25),W(1,2),W(1,8),GC_10,AMP(154))
      CALL VVV1_0(W(1,16),W(1,2),W(1,8),GC_10,AMP(155))
      CALL VVV1_0(W(1,14),W(1,2),W(1,8),GC_10,AMP(156))
C     Amplitude(s) for diagram number 123
      CALL VVV1_0(W(1,1),W(1,18),W(1,8),GC_10,AMP(157))
      CALL VVV1_0(W(1,1),W(1,20),W(1,8),GC_10,AMP(158))
      CALL VVV1_0(W(1,1),W(1,9),W(1,8),GC_10,AMP(159))
C     JAMPs contributing to orders ALL_ORDERS=1
      JAMP(1,1)=+IMAG1*AMP(1)+IMAG1*AMP(2)+IMAG1*AMP(4)+IMAG1*AMP(6)
     $ +IMAG1*AMP(15)+AMP(16)+AMP(17)+AMP(22)+IMAG1*AMP(24)-AMP(30)
     $ +IMAG1*AMP(32)+AMP(33)+AMP(34)-AMP(36)+IMAG1*AMP(103)+IMAG1
     $ *AMP(104)+IMAG1*AMP(106)+IMAG1*AMP(107)+AMP(110)+IMAG1*AMP(121)
     $ +IMAG1*AMP(122)+IMAG1*AMP(124)+IMAG1*AMP(130)-IMAG1*AMP(132)
     $ +AMP(136)-AMP(138)-IMAG1*AMP(157)+IMAG1*AMP(159)
      JAMP(2,1)=-IMAG1*AMP(1)+IMAG1*AMP(3)+IMAG1*AMP(5)-IMAG1*AMP(6)
     $ +IMAG1*AMP(13)+AMP(14)-AMP(17)+AMP(25)+IMAG1*AMP(27)-AMP(28)
     $ -IMAG1*AMP(32)-AMP(33)-AMP(34)-AMP(35)+IMAG1*AMP(112)+IMAG1
     $ *AMP(113)+IMAG1*AMP(115)+IMAG1*AMP(116)+AMP(119)-IMAG1*AMP(121)
     $ -IMAG1*AMP(122)-IMAG1*AMP(124)+IMAG1*AMP(139)-IMAG1*AMP(141)
     $ +AMP(145)-AMP(147)+IMAG1*AMP(157)+IMAG1*AMP(158)
      JAMP(3,1)=-AMP(22)-IMAG1*AMP(24)-AMP(25)+IMAG1*AMP(26)-AMP(31)
     $ +AMP(35)+AMP(36)+AMP(61)-IMAG1*AMP(63)+IMAG1*AMP(64)+IMAG1
     $ *AMP(65)+IMAG1*AMP(67)+AMP(71)+IMAG1*AMP(72)-IMAG1*AMP(103)
     $ -IMAG1*AMP(104)-IMAG1*AMP(106)-IMAG1*AMP(107)-AMP(110)-IMAG1
     $ *AMP(113)-IMAG1*AMP(114)-IMAG1*AMP(116)-IMAG1*AMP(130)-IMAG1
     $ *AMP(131)-AMP(136)-AMP(137)-IMAG1*AMP(158)-IMAG1*AMP(159)
      JAMP(4,1)=-AMP(19)+IMAG1*AMP(21)+AMP(25)-IMAG1*AMP(26)-AMP(33)
     $ -AMP(34)-AMP(35)+IMAG1*AMP(58)+AMP(59)-AMP(61)+IMAG1*AMP(63)
     $ -IMAG1*AMP(65)-IMAG1*AMP(66)-IMAG1*AMP(68)+AMP(102)+IMAG1
     $ *AMP(113)+IMAG1*AMP(114)+IMAG1*AMP(116)-IMAG1*AMP(122)-IMAG1
     $ *AMP(123)-IMAG1*AMP(124)-IMAG1*AMP(125)+AMP(151)-AMP(153)-IMAG1
     $ *AMP(154)+IMAG1*AMP(156)+IMAG1*AMP(157)+IMAG1*AMP(158)
      JAMP(5,1)=-AMP(22)+IMAG1*AMP(23)-AMP(25)-IMAG1*AMP(27)-AMP(29)
     $ +AMP(35)+AMP(36)+AMP(79)-IMAG1*AMP(81)+IMAG1*AMP(82)+IMAG1
     $ *AMP(83)+IMAG1*AMP(85)+AMP(89)+IMAG1*AMP(90)-IMAG1*AMP(104)
     $ -IMAG1*AMP(105)-IMAG1*AMP(107)-IMAG1*AMP(112)-IMAG1*AMP(113)
     $ -IMAG1*AMP(115)-IMAG1*AMP(116)-AMP(119)-IMAG1*AMP(139)-IMAG1
     $ *AMP(140)-AMP(145)-AMP(146)-IMAG1*AMP(158)-IMAG1*AMP(159)
      JAMP(6,1)=-AMP(20)-IMAG1*AMP(21)+AMP(22)-IMAG1*AMP(23)+AMP(33)
     $ +AMP(34)-AMP(36)+IMAG1*AMP(76)+AMP(77)-AMP(79)+IMAG1*AMP(81)
     $ -IMAG1*AMP(83)-IMAG1*AMP(84)-IMAG1*AMP(86)-AMP(102)+IMAG1
     $ *AMP(104)+IMAG1*AMP(105)+IMAG1*AMP(107)+IMAG1*AMP(122)+IMAG1
     $ *AMP(123)+IMAG1*AMP(124)+IMAG1*AMP(125)-AMP(151)-AMP(152)+IMAG1
     $ *AMP(154)+IMAG1*AMP(155)-IMAG1*AMP(157)+IMAG1*AMP(159)
      JAMP(7,1)=-IMAG1*AMP(1)-IMAG1*AMP(2)-IMAG1*AMP(4)-IMAG1*AMP(6)
     $ -IMAG1*AMP(15)-AMP(16)-AMP(17)+AMP(56)+IMAG1*AMP(57)-IMAG1
     $ *AMP(64)+IMAG1*AMP(66)-IMAG1*AMP(67)+IMAG1*AMP(68)-AMP(71)
     $ -AMP(93)+IMAG1*AMP(95)+AMP(96)-IMAG1*AMP(121)+IMAG1*AMP(123)
     $ +IMAG1*AMP(125)+IMAG1*AMP(131)+IMAG1*AMP(132)+AMP(137)+AMP(138)
     $ +AMP(148)-AMP(150)+IMAG1*AMP(154)-IMAG1*AMP(156)
      JAMP(8,1)=+IMAG1*AMP(1)-IMAG1*AMP(3)-IMAG1*AMP(5)+IMAG1*AMP(6)
     $ -IMAG1*AMP(13)-AMP(14)+AMP(17)+AMP(74)+IMAG1*AMP(75)-IMAG1
     $ *AMP(82)+IMAG1*AMP(84)-IMAG1*AMP(85)+IMAG1*AMP(86)-AMP(89)
     $ -AMP(91)-IMAG1*AMP(95)-AMP(96)+IMAG1*AMP(121)-IMAG1*AMP(123)
     $ -IMAG1*AMP(125)+IMAG1*AMP(140)+IMAG1*AMP(141)+AMP(146)+AMP(147)
     $ -AMP(148)-AMP(149)-IMAG1*AMP(154)-IMAG1*AMP(155)
      JAMP(9,1)=-AMP(56)-IMAG1*AMP(57)+IMAG1*AMP(64)-IMAG1*AMP(66)
     $ +IMAG1*AMP(67)-IMAG1*AMP(68)+AMP(71)+IMAG1*AMP(73)-AMP(74)
     $ +AMP(80)+IMAG1*AMP(81)-IMAG1*AMP(83)-IMAG1*AMP(84)-IMAG1*AMP(86)
     $ -AMP(94)-IMAG1*AMP(103)+IMAG1*AMP(105)-IMAG1*AMP(106)-AMP(110)
     $ +IMAG1*AMP(111)-IMAG1*AMP(130)-IMAG1*AMP(131)-AMP(136)-AMP(137)
     $ +AMP(149)+AMP(150)+IMAG1*AMP(155)+IMAG1*AMP(156)
      JAMP(10,1)=-AMP(38)+IMAG1*AMP(39)+AMP(40)+IMAG1*AMP(41)+AMP(51)
     $ +AMP(52)-AMP(54)-IMAG1*AMP(73)+AMP(74)-AMP(80)-IMAG1*AMP(81)
     $ +IMAG1*AMP(83)+IMAG1*AMP(84)+IMAG1*AMP(86)-AMP(96)-IMAG1
     $ *AMP(104)-IMAG1*AMP(105)-IMAG1*AMP(107)-IMAG1*AMP(122)-IMAG1
     $ *AMP(123)-IMAG1*AMP(124)-IMAG1*AMP(125)-AMP(148)-AMP(149)-IMAG1
     $ *AMP(154)-IMAG1*AMP(155)+IMAG1*AMP(157)-IMAG1*AMP(159)
      JAMP(11,1)=+IMAG1*AMP(55)-AMP(56)+AMP(62)+IMAG1*AMP(63)-IMAG1
     $ *AMP(65)-IMAG1*AMP(66)-IMAG1*AMP(68)-AMP(74)-IMAG1*AMP(75)
     $ +IMAG1*AMP(82)-IMAG1*AMP(84)+IMAG1*AMP(85)-IMAG1*AMP(86)+AMP(89)
     $ -AMP(92)-IMAG1*AMP(112)+IMAG1*AMP(114)-IMAG1*AMP(115)-AMP(119)
     $ +IMAG1*AMP(120)-IMAG1*AMP(139)-IMAG1*AMP(140)-AMP(145)-AMP(146)
     $ +AMP(149)+AMP(150)+IMAG1*AMP(155)+IMAG1*AMP(156)
      JAMP(12,1)=-AMP(37)-IMAG1*AMP(39)+AMP(43)+IMAG1*AMP(44)-AMP(51)
     $ -AMP(52)-AMP(53)-IMAG1*AMP(55)+AMP(56)-AMP(62)-IMAG1*AMP(63)
     $ +IMAG1*AMP(65)+IMAG1*AMP(66)+IMAG1*AMP(68)+AMP(96)-IMAG1
     $ *AMP(113)-IMAG1*AMP(114)-IMAG1*AMP(116)+IMAG1*AMP(122)+IMAG1
     $ *AMP(123)+IMAG1*AMP(124)+IMAG1*AMP(125)+AMP(148)-AMP(150)+IMAG1
     $ *AMP(154)-IMAG1*AMP(156)-IMAG1*AMP(157)-IMAG1*AMP(158)
      JAMP(13,1)=-IMAG1*AMP(2)-IMAG1*AMP(3)-IMAG1*AMP(4)-IMAG1*AMP(5)
     $ +AMP(8)+IMAG1*AMP(9)-AMP(16)-AMP(61)+IMAG1*AMP(63)-IMAG1*AMP(64)
     $ -IMAG1*AMP(65)-IMAG1*AMP(67)-AMP(71)-IMAG1*AMP(72)-IMAG1
     $ *AMP(112)+IMAG1*AMP(114)-IMAG1*AMP(115)+AMP(117)+IMAG1*AMP(118)
     $ -AMP(126)+IMAG1*AMP(131)+IMAG1*AMP(132)+AMP(137)+AMP(138)-IMAG1
     $ *AMP(139)+IMAG1*AMP(141)+AMP(142)-AMP(144)
      JAMP(14,1)=-IMAG1*AMP(58)-AMP(59)+AMP(61)-IMAG1*AMP(63)+IMAG1
     $ *AMP(65)+IMAG1*AMP(66)+IMAG1*AMP(68)-AMP(77)+IMAG1*AMP(78)
     $ -IMAG1*AMP(82)+IMAG1*AMP(84)-IMAG1*AMP(85)+IMAG1*AMP(86)+AMP(87)
     $ -AMP(98)+IMAG1*AMP(112)-IMAG1*AMP(114)+IMAG1*AMP(115)-AMP(117)
     $ -IMAG1*AMP(118)+IMAG1*AMP(139)+IMAG1*AMP(140)-AMP(142)-AMP(143)
     $ +AMP(152)+AMP(153)-IMAG1*AMP(155)-IMAG1*AMP(156)
      JAMP(15,1)=+IMAG1*AMP(2)+IMAG1*AMP(3)+IMAG1*AMP(4)+IMAG1*AMP(5)
     $ -AMP(8)-IMAG1*AMP(9)+AMP(16)-AMP(80)-IMAG1*AMP(81)+IMAG1*AMP(82)
     $ +IMAG1*AMP(83)+IMAG1*AMP(85)-AMP(87)+IMAG1*AMP(88)+IMAG1
     $ *AMP(103)-IMAG1*AMP(105)+IMAG1*AMP(106)+AMP(110)-IMAG1*AMP(111)
     $ -AMP(127)+IMAG1*AMP(130)-IMAG1*AMP(132)+AMP(136)-AMP(138)-IMAG1
     $ *AMP(140)-IMAG1*AMP(141)+AMP(143)+AMP(144)
      JAMP(16,1)=-AMP(40)-IMAG1*AMP(41)-AMP(43)+IMAG1*AMP(45)-AMP(47)
     $ +AMP(53)+AMP(54)+AMP(80)+IMAG1*AMP(81)-IMAG1*AMP(82)-IMAG1
     $ *AMP(83)-IMAG1*AMP(85)+AMP(87)-IMAG1*AMP(88)+IMAG1*AMP(104)
     $ +IMAG1*AMP(105)+IMAG1*AMP(107)+IMAG1*AMP(112)+IMAG1*AMP(113)
     $ +IMAG1*AMP(115)+IMAG1*AMP(116)-AMP(117)+IMAG1*AMP(139)+IMAG1
     $ *AMP(140)-AMP(142)-AMP(143)+IMAG1*AMP(158)+IMAG1*AMP(159)
      JAMP(17,1)=-IMAG1*AMP(1)+IMAG1*AMP(3)+IMAG1*AMP(5)-IMAG1*AMP(6)
     $ +IMAG1*AMP(7)-AMP(8)+AMP(18)+AMP(77)-IMAG1*AMP(78)+IMAG1*AMP(82)
     $ -IMAG1*AMP(84)+IMAG1*AMP(85)-IMAG1*AMP(86)-AMP(87)-AMP(97)
     $ +IMAG1*AMP(101)-AMP(102)-IMAG1*AMP(121)+IMAG1*AMP(123)+IMAG1
     $ *AMP(125)-IMAG1*AMP(140)-IMAG1*AMP(141)+AMP(143)+AMP(144)
     $ -AMP(151)-AMP(152)+IMAG1*AMP(154)+IMAG1*AMP(155)
      JAMP(18,1)=+IMAG1*AMP(1)-IMAG1*AMP(3)-IMAG1*AMP(5)+IMAG1*AMP(6)
     $ -IMAG1*AMP(7)+AMP(8)-AMP(18)+AMP(43)-IMAG1*AMP(45)-AMP(46)
     $ +IMAG1*AMP(50)-AMP(51)-AMP(52)-AMP(53)-IMAG1*AMP(112)-IMAG1
     $ *AMP(113)-IMAG1*AMP(115)-IMAG1*AMP(116)+AMP(117)+IMAG1*AMP(121)
     $ +IMAG1*AMP(122)+IMAG1*AMP(124)-IMAG1*AMP(139)+IMAG1*AMP(141)
     $ +AMP(142)-AMP(144)-IMAG1*AMP(157)-IMAG1*AMP(158)
      JAMP(19,1)=-IMAG1*AMP(2)-IMAG1*AMP(3)-IMAG1*AMP(4)-IMAG1*AMP(5)
     $ +AMP(11)+IMAG1*AMP(12)-AMP(14)-AMP(79)+IMAG1*AMP(81)-IMAG1
     $ *AMP(82)-IMAG1*AMP(83)-IMAG1*AMP(85)-AMP(89)-IMAG1*AMP(90)
     $ -IMAG1*AMP(103)+IMAG1*AMP(105)-IMAG1*AMP(106)+AMP(108)+IMAG1
     $ *AMP(109)-AMP(128)-IMAG1*AMP(130)+IMAG1*AMP(132)+AMP(133)
     $ -AMP(135)+IMAG1*AMP(140)+IMAG1*AMP(141)+AMP(146)+AMP(147)
      JAMP(20,1)=-AMP(59)+IMAG1*AMP(60)-IMAG1*AMP(64)+IMAG1*AMP(66)
     $ -IMAG1*AMP(67)+IMAG1*AMP(68)+AMP(69)-IMAG1*AMP(76)-AMP(77)
     $ +AMP(79)-IMAG1*AMP(81)+IMAG1*AMP(83)+IMAG1*AMP(84)+IMAG1*AMP(86)
     $ -AMP(100)+IMAG1*AMP(103)-IMAG1*AMP(105)+IMAG1*AMP(106)-AMP(108)
     $ -IMAG1*AMP(109)+IMAG1*AMP(130)+IMAG1*AMP(131)-AMP(133)-AMP(134)
     $ +AMP(152)+AMP(153)-IMAG1*AMP(155)-IMAG1*AMP(156)
      JAMP(21,1)=+IMAG1*AMP(2)+IMAG1*AMP(3)+IMAG1*AMP(4)+IMAG1*AMP(5)
     $ -AMP(11)-IMAG1*AMP(12)+AMP(14)-AMP(62)-IMAG1*AMP(63)+IMAG1
     $ *AMP(64)+IMAG1*AMP(65)+IMAG1*AMP(67)-AMP(69)+IMAG1*AMP(70)
     $ +IMAG1*AMP(112)-IMAG1*AMP(114)+IMAG1*AMP(115)+AMP(119)-IMAG1
     $ *AMP(120)-AMP(129)-IMAG1*AMP(131)-IMAG1*AMP(132)+AMP(134)
     $ +AMP(135)+IMAG1*AMP(139)-IMAG1*AMP(141)+AMP(145)-AMP(147)
      JAMP(22,1)=-AMP(40)+IMAG1*AMP(42)-AMP(43)-IMAG1*AMP(44)-AMP(49)
     $ +AMP(53)+AMP(54)+AMP(62)+IMAG1*AMP(63)-IMAG1*AMP(64)-IMAG1
     $ *AMP(65)-IMAG1*AMP(67)+AMP(69)-IMAG1*AMP(70)+IMAG1*AMP(103)
     $ +IMAG1*AMP(104)+IMAG1*AMP(106)+IMAG1*AMP(107)-AMP(108)+IMAG1
     $ *AMP(113)+IMAG1*AMP(114)+IMAG1*AMP(116)+IMAG1*AMP(130)+IMAG1
     $ *AMP(131)-AMP(133)-AMP(134)+IMAG1*AMP(158)+IMAG1*AMP(159)
      JAMP(23,1)=+IMAG1*AMP(1)+IMAG1*AMP(2)+IMAG1*AMP(4)+IMAG1*AMP(6)
     $ +IMAG1*AMP(10)-AMP(11)-AMP(18)+AMP(59)-IMAG1*AMP(60)+IMAG1
     $ *AMP(64)-IMAG1*AMP(66)+IMAG1*AMP(67)-IMAG1*AMP(68)-AMP(69)
     $ -AMP(99)-IMAG1*AMP(101)+AMP(102)+IMAG1*AMP(121)-IMAG1*AMP(123)
     $ -IMAG1*AMP(125)-IMAG1*AMP(131)-IMAG1*AMP(132)+AMP(134)+AMP(135)
     $ +AMP(151)-AMP(153)-IMAG1*AMP(154)+IMAG1*AMP(156)
      JAMP(24,1)=-IMAG1*AMP(1)-IMAG1*AMP(2)-IMAG1*AMP(4)-IMAG1*AMP(6)
     $ -IMAG1*AMP(10)+AMP(11)+AMP(18)+AMP(40)-IMAG1*AMP(42)-AMP(48)
     $ -IMAG1*AMP(50)+AMP(51)+AMP(52)-AMP(54)-IMAG1*AMP(103)-IMAG1
     $ *AMP(104)-IMAG1*AMP(106)-IMAG1*AMP(107)+AMP(108)-IMAG1*AMP(121)
     $ -IMAG1*AMP(122)-IMAG1*AMP(124)-IMAG1*AMP(130)+IMAG1*AMP(132)
     $ +AMP(133)-AMP(135)+IMAG1*AMP(157)-IMAG1*AMP(159)

      MATRIX1 = 0.D0
      DO M = 1, NAMPSO
        DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
            ZTEMP = ZTEMP + CF(J,I)*JAMP(J,M)
          ENDDO
          DO N = 1, NAMPSO
            IF (CHOSEN_SO_CONFIGS(SQSOINDEX1(M,N))) THEN
              MATRIX1 = MATRIX1 + ZTEMP*DCONJG(JAMP(I,N))/DENOM(I)
            ENDIF
          ENDDO
        ENDDO
      ENDDO

      AMP2(2)=AMP2(2)+AMP(4)*DCONJG(AMP(4))
      AMP2(3)=AMP2(3)+AMP(5)*DCONJG(AMP(5))
      AMP2(4)=AMP2(4)+AMP(6)*DCONJG(AMP(6))
      AMP2(5)=AMP2(5)+AMP(7)*DCONJG(AMP(7))
      AMP2(6)=AMP2(6)+AMP(8)*DCONJG(AMP(8))
      AMP2(7)=AMP2(7)+AMP(9)*DCONJG(AMP(9))
      AMP2(8)=AMP2(8)+AMP(10)*DCONJG(AMP(10))
      AMP2(9)=AMP2(9)+AMP(11)*DCONJG(AMP(11))
      AMP2(10)=AMP2(10)+AMP(12)*DCONJG(AMP(12))
      AMP2(11)=AMP2(11)+AMP(13)*DCONJG(AMP(13))
      AMP2(12)=AMP2(12)+AMP(14)*DCONJG(AMP(14))
      AMP2(13)=AMP2(13)+AMP(15)*DCONJG(AMP(15))
      AMP2(14)=AMP2(14)+AMP(16)*DCONJG(AMP(16))
      AMP2(15)=AMP2(15)+AMP(17)*DCONJG(AMP(17))
      AMP2(16)=AMP2(16)+AMP(18)*DCONJG(AMP(18))
      AMP2(17)=AMP2(17)+AMP(19)*DCONJG(AMP(19))
      AMP2(18)=AMP2(18)+AMP(20)*DCONJG(AMP(20))
      AMP2(19)=AMP2(19)+AMP(21)*DCONJG(AMP(21))
      AMP2(20)=AMP2(20)+AMP(22)*DCONJG(AMP(22))
      AMP2(21)=AMP2(21)+AMP(23)*DCONJG(AMP(23))
      AMP2(22)=AMP2(22)+AMP(24)*DCONJG(AMP(24))
      AMP2(23)=AMP2(23)+AMP(25)*DCONJG(AMP(25))
      AMP2(24)=AMP2(24)+AMP(26)*DCONJG(AMP(26))
      AMP2(25)=AMP2(25)+AMP(27)*DCONJG(AMP(27))
      AMP2(26)=AMP2(26)+AMP(28)*DCONJG(AMP(28))
      AMP2(27)=AMP2(27)+AMP(29)*DCONJG(AMP(29))
      AMP2(28)=AMP2(28)+AMP(30)*DCONJG(AMP(30))
      AMP2(29)=AMP2(29)+AMP(31)*DCONJG(AMP(31))
      AMP2(30)=AMP2(30)+AMP(32)*DCONJG(AMP(32))
      AMP2(31)=AMP2(31)+AMP(33)*DCONJG(AMP(33))
      AMP2(33)=AMP2(33)+AMP(37)*DCONJG(AMP(37))
      AMP2(34)=AMP2(34)+AMP(38)*DCONJG(AMP(38))
      AMP2(35)=AMP2(35)+AMP(39)*DCONJG(AMP(39))
      AMP2(36)=AMP2(36)+AMP(40)*DCONJG(AMP(40))
      AMP2(37)=AMP2(37)+AMP(41)*DCONJG(AMP(41))
      AMP2(38)=AMP2(38)+AMP(42)*DCONJG(AMP(42))
      AMP2(39)=AMP2(39)+AMP(43)*DCONJG(AMP(43))
      AMP2(40)=AMP2(40)+AMP(44)*DCONJG(AMP(44))
      AMP2(41)=AMP2(41)+AMP(45)*DCONJG(AMP(45))
      AMP2(42)=AMP2(42)+AMP(46)*DCONJG(AMP(46))
      AMP2(43)=AMP2(43)+AMP(47)*DCONJG(AMP(47))
      AMP2(44)=AMP2(44)+AMP(48)*DCONJG(AMP(48))
      AMP2(45)=AMP2(45)+AMP(49)*DCONJG(AMP(49))
      AMP2(46)=AMP2(46)+AMP(50)*DCONJG(AMP(50))
      AMP2(47)=AMP2(47)+AMP(51)*DCONJG(AMP(51))
      AMP2(49)=AMP2(49)+AMP(55)*DCONJG(AMP(55))
      AMP2(50)=AMP2(50)+AMP(56)*DCONJG(AMP(56))
      AMP2(51)=AMP2(51)+AMP(57)*DCONJG(AMP(57))
      AMP2(52)=AMP2(52)+AMP(58)*DCONJG(AMP(58))
      AMP2(53)=AMP2(53)+AMP(59)*DCONJG(AMP(59))
      AMP2(54)=AMP2(54)+AMP(60)*DCONJG(AMP(60))
      AMP2(55)=AMP2(55)+AMP(61)*DCONJG(AMP(61))
      AMP2(56)=AMP2(56)+AMP(62)*DCONJG(AMP(62))
      AMP2(57)=AMP2(57)+AMP(63)*DCONJG(AMP(63))
      AMP2(59)=AMP2(59)+AMP(67)*DCONJG(AMP(67))
      AMP2(60)=AMP2(60)+AMP(68)*DCONJG(AMP(68))
      AMP2(61)=AMP2(61)+AMP(69)*DCONJG(AMP(69))
      AMP2(62)=AMP2(62)+AMP(70)*DCONJG(AMP(70))
      AMP2(63)=AMP2(63)+AMP(71)*DCONJG(AMP(71))
      AMP2(64)=AMP2(64)+AMP(72)*DCONJG(AMP(72))
      AMP2(65)=AMP2(65)+AMP(73)*DCONJG(AMP(73))
      AMP2(66)=AMP2(66)+AMP(74)*DCONJG(AMP(74))
      AMP2(67)=AMP2(67)+AMP(75)*DCONJG(AMP(75))
      AMP2(68)=AMP2(68)+AMP(76)*DCONJG(AMP(76))
      AMP2(69)=AMP2(69)+AMP(77)*DCONJG(AMP(77))
      AMP2(70)=AMP2(70)+AMP(78)*DCONJG(AMP(78))
      AMP2(71)=AMP2(71)+AMP(79)*DCONJG(AMP(79))
      AMP2(72)=AMP2(72)+AMP(80)*DCONJG(AMP(80))
      AMP2(73)=AMP2(73)+AMP(81)*DCONJG(AMP(81))
      AMP2(75)=AMP2(75)+AMP(85)*DCONJG(AMP(85))
      AMP2(76)=AMP2(76)+AMP(86)*DCONJG(AMP(86))
      AMP2(77)=AMP2(77)+AMP(87)*DCONJG(AMP(87))
      AMP2(78)=AMP2(78)+AMP(88)*DCONJG(AMP(88))
      AMP2(79)=AMP2(79)+AMP(89)*DCONJG(AMP(89))
      AMP2(80)=AMP2(80)+AMP(90)*DCONJG(AMP(90))
      AMP2(81)=AMP2(81)+AMP(91)*DCONJG(AMP(91))
      AMP2(82)=AMP2(82)+AMP(92)*DCONJG(AMP(92))
      AMP2(83)=AMP2(83)+AMP(93)*DCONJG(AMP(93))
      AMP2(84)=AMP2(84)+AMP(94)*DCONJG(AMP(94))
      AMP2(85)=AMP2(85)+AMP(95)*DCONJG(AMP(95))
      AMP2(86)=AMP2(86)+AMP(96)*DCONJG(AMP(96))
      AMP2(87)=AMP2(87)+AMP(97)*DCONJG(AMP(97))
      AMP2(88)=AMP2(88)+AMP(98)*DCONJG(AMP(98))
      AMP2(89)=AMP2(89)+AMP(99)*DCONJG(AMP(99))
      AMP2(90)=AMP2(90)+AMP(100)*DCONJG(AMP(100))
      AMP2(91)=AMP2(91)+AMP(101)*DCONJG(AMP(101))
      AMP2(92)=AMP2(92)+AMP(102)*DCONJG(AMP(102))
      AMP2(94)=AMP2(94)+AMP(106)*DCONJG(AMP(106))
      AMP2(95)=AMP2(95)+AMP(107)*DCONJG(AMP(107))
      AMP2(96)=AMP2(96)+AMP(108)*DCONJG(AMP(108))
      AMP2(97)=AMP2(97)+AMP(109)*DCONJG(AMP(109))
      AMP2(98)=AMP2(98)+AMP(110)*DCONJG(AMP(110))
      AMP2(99)=AMP2(99)+AMP(111)*DCONJG(AMP(111))
      AMP2(101)=AMP2(101)+AMP(115)*DCONJG(AMP(115))
      AMP2(102)=AMP2(102)+AMP(116)*DCONJG(AMP(116))
      AMP2(103)=AMP2(103)+AMP(117)*DCONJG(AMP(117))
      AMP2(104)=AMP2(104)+AMP(118)*DCONJG(AMP(118))
      AMP2(105)=AMP2(105)+AMP(119)*DCONJG(AMP(119))
      AMP2(106)=AMP2(106)+AMP(120)*DCONJG(AMP(120))
      AMP2(108)=AMP2(108)+AMP(124)*DCONJG(AMP(124))
      AMP2(109)=AMP2(109)+AMP(125)*DCONJG(AMP(125))
      AMP2(110)=AMP2(110)+AMP(126)*DCONJG(AMP(126))
      AMP2(111)=AMP2(111)+AMP(127)*DCONJG(AMP(127))
      AMP2(112)=AMP2(112)+AMP(128)*DCONJG(AMP(128))
      AMP2(113)=AMP2(113)+AMP(129)*DCONJG(AMP(129))
      DO I = 1, NCOLOR
        DO M = 1, NAMPSO
          DO N = 1, NAMPSO
            IF (CHOSEN_SO_CONFIGS(SQSOINDEX1(M,N))) THEN
              JAMP2(I)=JAMP2(I)+DABS(DBLE(JAMP(I,M)*DCONJG(JAMP(I,N))))
            ENDIF
          ENDDO
        ENDDO
      ENDDO
      call counters_matrix1_stop()
      END

C     Set of functions to handle the array indices of the split orders


      INTEGER FUNCTION SQSOINDEX1(ORDERINDEXA, ORDERINDEXB)
C     
C     This functions plays the role of the interference matrix. It can
C      be hardcoded or 
C     made more elegant using hashtables if its execution speed ever
C      becomes a relevant
C     factor. From two split order indices, it return the
C      corresponding index in the squared 
C     order canonical ordering.
C     
C     CONSTANTS
C     

      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=1, NSQUAREDSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERINDEXA, ORDERINDEXB
C     
C     LOCAL VARIABLES
C     
      INTEGER I, SQORDERS(NSO)
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      DATA (AMPSPLITORDERS(  1,I),I=  1,  1) /    1/
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     FUNCTION
C     
      INTEGER SOINDEX_FOR_SQUARED_ORDERS1
C     
C     BEGIN CODE
C     
      DO I=1,NSO
        SQORDERS(I)=AMPSPLITORDERS(ORDERINDEXA,I)
     $   +AMPSPLITORDERS(ORDERINDEXB,I)
      ENDDO
      SQSOINDEX1=SOINDEX_FOR_SQUARED_ORDERS1(SQORDERS)
      END

      INTEGER FUNCTION SOINDEX_FOR_SQUARED_ORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the squared
C      split orders list passed in argument which corresponds to the
C      values of the following list of couplings (and in this order).
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO, NAMPSO
      PARAMETER (NSO=1, NSQSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER SQSPLITORDERS(NSQSO,NSO)
      DATA (SQSPLITORDERS(  1,I),I=  1,  1) /    2/
      COMMON/SQPLITORDERS1/SQPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NSQSO
        DO J=1,NSO
          IF (ORDERS(J).NE.SQSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_SQUARED_ORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping in function'
      WRITE(*,*) 'SOINDEX_FOR_SQUARED_ORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

      SUBROUTINE GET_NSQSO_BORN1(NSQSO)
C     
C     Simple subroutine returning the number of squared split order
C     contributions returned when calling smatrix_split_orders 
C     

      INTEGER    NSQUAREDSO
      PARAMETER  (NSQUAREDSO=1)

      INTEGER NSQSO

      NSQSO=NSQUAREDSO

      END

C     This is the inverse subroutine of SOINDEX_FOR_SQUARED_ORDERS.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_SQUARED_ORDERS_FOR_SOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the squared
C      split order index in argument. Order values correspond to
C      following list of couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO
      PARAMETER (NSO=1, NSQSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER SQPLITORDERS(NSQSO,NSO)
      COMMON/SQPLITORDERS1/SQPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.GT.0.AND.SOINDEX.LE.NSQSO) THEN
        DO I=1,NSO
          ORDERS(I) =  SQPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function'
     $ //' GET_SQUARED_ORDERS_FOR_SOINDEX1'
      WRITE(*,*) 'Could not find squared orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This is the inverse subroutine of getting amplitude SO orders.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_ORDERS_FOR_AMPSOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the split order
C      index in argument. Order values correspond to following list of
C      couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.GT.0.AND.SOINDEX.LE.NAMPSO) THEN
        DO I=1,NSO
          ORDERS(I) =  AMPSPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function GET_ORDERS_FOR_AMPSOINDEX1'
      WRITE(*,*) 'Could not find amplitude split orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This function is not directly useful, but included for
C      completeness
      INTEGER FUNCTION SOINDEX_FOR_AMPORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the
C      amplitude split orders passed in argument which correspond to
C      the values of the following list of couplings (and in this
C      order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NAMPSO
        DO J=1,NSO
          IF (ORDERS(J).NE.AMPSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_AMPORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping function SOINDEX_FOR_AMPORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

