diff --git b/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/auto_dsig1.f a/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/auto_dsig1.f
index 48eb2d573..cbcedf384 100644
--- b/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/auto_dsig1.f
+++ a/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/auto_dsig1.f
@@ -467,23 +467,140 @@ C
       INTEGER VECSIZE_USED
 
       INTEGER IVEC
-
-
+      INTEGER IEXT
+
+      INTEGER                    ISUM_HEL
+      LOGICAL                    MULTI_CHANNEL
+      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL
+
+      LOGICAL FIRST_CHID
+      SAVE FIRST_CHID
+      DATA FIRST_CHID/.TRUE./
+      
+#ifdef MG5AMC_MEEXPORTER_SYCL
+      INCLUDE 'coupl.inc' ! for ALL_G
+      INCLUDE 'fbridge.inc'
+      INCLUDE 'fbridge_common.inc'
+      INCLUDE 'genps.inc'
+      INCLUDE 'run.inc'
+      DOUBLE PRECISION OUT2(VECSIZE_MEMMAX)
+      INTEGER SELECTED_HEL2(VECSIZE_MEMMAX)
+      INTEGER SELECTED_COL2(VECSIZE_MEMMAX)
+      DOUBLE PRECISION CBYF1
+      INTEGER*4 NGOODHEL, NTOTHEL
+
+      INTEGER*4 NWARNINGS
+      SAVE NWARNINGS
+      DATA NWARNINGS/0/
+      
+      LOGICAL FIRST
+      SAVE FIRST
+      DATA FIRST/.TRUE./
+      
+      IF( FBRIDGE_MODE .LE. 0 ) THEN ! (FortranOnly=0 or BothQuiet=-1 or BothDebug=-2)
+#endif
+        call counters_smatrix1multi_start( -1, VECSIZE_USED ) ! fortran=-1
 !$OMP PARALLEL
 !$OMP DO
-      DO IVEC=1, VECSIZE_USED
-        CALL SMATRIX1(P_MULTI(0,1,IVEC),
-     &	                         hel_rand(IVEC),
-     &                           col_rand(IVEC),
-     &				 channel,
-     &                           IVEC,
-     &				 out(IVEC),
-     &				 selected_hel(IVEC),
-     &				 selected_col(IVEC)
-     &				 )
-      ENDDO
+        DO IVEC=1, VECSIZE_USED
+          CALL SMATRIX1(P_MULTI(0,1,IVEC),
+     &      hel_rand(IVEC),
+     &      col_rand(IVEC),
+     &      channel,
+     &      IVEC,
+     &      out(IVEC),
+     &      selected_hel(IVEC),
+     &      selected_col(IVEC)
+     &      )
+        ENDDO
 !$OMP END DO
 !$OMP END PARALLEL
+        call counters_smatrix1multi_stop( -1 ) ! fortran=-1
+#ifdef MG5AMC_MEEXPORTER_SYCL
+      ENDIF
+
+      IF( FBRIDGE_MODE .EQ. 1 .OR. FBRIDGE_MODE .LT. 0 ) THEN ! (CppOnly=1 or BothQuiet=-1 or BothDebug=-2)
+        IF( LIMHEL.NE.0 ) THEN
+          WRITE(6,*) 'ERROR! The sycl bridge only supports LIMHEL=0'
+          STOP
+        ENDIF
+        IF ( FIRST ) THEN ! exclude first pass (helicity filtering) from timers (#461)
+          CALL FBRIDGESEQUENCE(FBRIDGE_PBRIDGE, P_MULTI, ALL_G,
+     &      HEL_RAND, COL_RAND, 0, OUT2,
+     &      SELECTED_HEL2, SELECTED_COL2 ) ! 0: multi channel disabled for helicity filtering
+          FIRST = .FALSE.
+c         ! This is a workaround for https://github.com/oliviermattelaer/mg5amc_test/issues/22 (see PR #486)
+          IF( FBRIDGE_MODE .EQ. 1 ) THEN ! (CppOnly=1 : SMATRIX1 is not called at all)
+            CALL RESET_CUMULATIVE_VARIABLE() ! mimic 'avoid bias of the initialization' within SMATRIX1
+          ENDIF
+          CALL FBRIDGEGETNGOODHEL(FBRIDGE_PBRIDGE,NGOODHEL,NTOTHEL)
+          IF( NTOTHEL .NE. NCOMB ) THEN
+            WRITE(6,*) 'ERROR! Cudacpp/Fortran mismatch',
+     &        ' in total number of helicities', NTOTHEL, NCOMB
+            STOP
+          ENDIF
+          WRITE (6,*) 'NGOODHEL =', NGOODHEL
+          WRITE (6,*) 'NCOMB =', NCOMB
+        ENDIF
+        call counters_smatrix1multi_start( 0, VECSIZE_USED ) ! sycl=0
+        IF ( .NOT. MULTI_CHANNEL ) THEN
+          CALL FBRIDGESEQUENCE(FBRIDGE_PBRIDGE, P_MULTI, ALL_G,
+     &      HEL_RAND, COL_RAND, 0, OUT2,
+     &      SELECTED_HEL2, SELECTED_COL2 ) ! 0: multi channel disabled
+        ELSE
+          IF( SDE_STRAT.NE.1 ) THEN
+            WRITE(6,*) 'ERROR! The sycl bridge requires SDE=1' ! multi channel single-diagram enhancement strategy
+            STOP
+          ENDIF
+          CALL FBRIDGESEQUENCE(FBRIDGE_PBRIDGE, P_MULTI, ALL_G,
+     &      HEL_RAND, COL_RAND, CHANNEL, OUT2,
+     &      SELECTED_HEL2, SELECTED_COL2 ) ! 1-N: multi channel enabled
+        ENDIF
+        call counters_smatrix1multi_stop( 0 ) ! sycl=0
+      ENDIF
+
+      IF( FBRIDGE_MODE .LT. 0 ) THEN ! (BothQuiet=-1 or BothDebug=-2)
+        DO IVEC=1, VECSIZE_USED
+          CBYF1 = OUT2(IVEC)/OUT(IVEC) - 1
+          FBRIDGE_NCBYF1 = FBRIDGE_NCBYF1 + 1
+          FBRIDGE_CBYF1SUM = FBRIDGE_CBYF1SUM + CBYF1
+          FBRIDGE_CBYF1SUM2 = FBRIDGE_CBYF1SUM2 + CBYF1 * CBYF1
+          IF( CBYF1 .GT. FBRIDGE_CBYF1MAX ) FBRIDGE_CBYF1MAX = CBYF1
+          IF( CBYF1 .LT. FBRIDGE_CBYF1MIN ) FBRIDGE_CBYF1MIN = CBYF1
+          IF( FBRIDGE_MODE .EQ. -2 ) THEN ! (BothDebug=-2)
+            WRITE (*,'(I4,2E16.8,F23.11,I3,I3,I4,I4)')
+     &        IVEC, OUT(IVEC), OUT2(IVEC), 1+CBYF1,
+     &        SELECTED_HEL(IVEC), SELECTED_HEL2(IVEC),
+     &        SELECTED_COL(IVEC), SELECTED_COL2(IVEC)
+          ENDIF
+          IF( ABS(CBYF1).GT.5E-5 .AND. NWARNINGS.LT.20 ) THEN
+            NWARNINGS = NWARNINGS + 1
+            WRITE (*,'(A,I4,A,I4,2E16.8,F23.11)')
+     &        'WARNING! (', NWARNINGS, '/20) Deviation more than 5E-5',
+     &        IVEC, OUT(IVEC), OUT2(IVEC), 1+CBYF1
+          ENDIF
+        END DO
+      ENDIF
+
+      IF( FBRIDGE_MODE .EQ. 1 .OR. FBRIDGE_MODE .LT. 0 ) THEN ! (CppOnly=1 or BothQuiet=-1 or BothDebug=-2)
+        DO IVEC=1, VECSIZE_USED
+          OUT(IVEC) = OUT2(IVEC) ! use the sycl ME instead of the fortran ME!
+          SELECTED_HEL(IVEC) = SELECTED_HEL2(IVEC) ! use the sycl helicity instead of the fortran helicity!
+          SELECTED_COL(IVEC) = SELECTED_COL2(IVEC) ! use the sycl color instead of the fortran color!
+        END DO
+      ENDIF
+#endif
+
+      IF ( FIRST_CHID ) THEN
+        IF ( MULTI_CHANNEL ) THEN
+          WRITE (*,*) 'MULTI_CHANNEL = TRUE'
+        ELSE
+          WRITE (*,*) 'MULTI_CHANNEL = FALSE'
+        ENDIF
+        WRITE (*,*) 'CHANNEL_ID =', CHANNEL
+        FIRST_CHID = .FALSE.
+      ENDIF
+
       RETURN
       END
 
diff --git b/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/driver.f a/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/driver.f
index a76de8ec5..aae7286d2 100644
--- b/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/driver.f
+++ a/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/driver.f
@@ -74,13 +74,54 @@ c      common/to_colstats/ncols,ncolflow,ncolalt,ic
       include 'vector.inc' ! needed by coupl.inc (defines VECSIZE_MEMMAX)
       include 'coupl.inc'
       INTEGER VECSIZE_USED
-      DATA VECSIZE_USED/VECSIZE_MEMMAX/ ! can be changed at runtime
+      DATA VECSIZE_USED/VECSIZE_MEMMAX/ ! initial value
+
+#ifdef MG5AMC_MEEXPORTER_SYCL
+      INCLUDE 'fbridge.inc'
+c     INCLUDE 'fbridge_common.inc'
+#endif
+      INCLUDE 'fbridge_common.inc'
 
 C-----
 C  BEGIN CODE
 C----- 
       call cpu_time(t_before)
       CUMULATED_TIMING = t_before
+
+c#ifdef _OPENMP
+c      CALL OMPNUMTHREADS_NOT_SET_MEANS_ONE_THREAD()
+c#endif
+      CALL COUNTERS_INITIALISE()
+
+c#ifdef MG5AMC_MEEXPORTER_SYCL
+      write(*,*) 'Enter fbridge_mode'
+      read(*,*) FBRIDGE_MODE ! (CppOnly=1, FortranOnly=0, BothQuiet=-1, BothDebug=-2)
+      write(*,'(a16,i6)') ' FBRIDGE_MODE = ', FBRIDGE_MODE
+#ifndef MG5AMC_MEEXPORTER_SYCL
+      if( fbridge_mode.ne.0 ) then
+        write(*,*) 'ERROR! Invalid fbridge_mode = ', fbridge_mode
+        STOP
+      endif
+#endif
+      write(*,*) 'Enter #events in a vector loop (max=',VECSIZE_MEMMAX,',)'
+      read(*,*) VECSIZE_USED
+c#else
+c      VECSIZE_USED = 32
+c#endif
+      write(*,'(a16,i6)') ' VECSIZE_USED = ', VECSIZE_USED
+      if( VECSIZE_USED.gt.VECSIZE_MEMMAX .or. VECSIZE_USED.le.0 ) then
+        write(*,*) 'ERROR! Invalid VECSIZE_USED = ', VECSIZE_USED
+        STOP
+      endif
+
+#ifdef MG5AMC_MEEXPORTER_SYCL
+      CALL FBRIDGECREATE(FBRIDGE_PBRIDGE, VECSIZE_USED, NEXTERNAL, 4) ! this must be at the beginning as it initialises the SYCL device
+      FBRIDGE_NCBYF1 = 0
+      FBRIDGE_CBYF1SUM = 0
+      FBRIDGE_CBYF1SUM2 = 0
+      FBRIDGE_CBYF1MAX = -1D100
+      FBRIDGE_CBYF1MIN = 1D100
+#endif
 c
 c     Read process number
 c
@@ -202,8 +243,33 @@ c      call sample_result(xsec,xerr)
 c      write(*,*) 'Final xsec: ',xsec
 
       rewind(lun)
-
       close(lun)
+
+#ifdef MG5AMC_MEEXPORTER_SYCL
+      CALL FBRIDGEDELETE(FBRIDGE_PBRIDGE) ! this must be at the end as it shuts down the SYCL device
+      IF( FBRIDGE_MODE .LE. -1 ) THEN ! (BothQuiet=-1 or BothDebug=-2)
+        WRITE(*,'(a,f10.8,a,e8.2)')
+     &    ' [MERATIOS] ME ratio CudaCpp/Fortran: MIN = ',
+     &    FBRIDGE_CBYF1MIN + 1, ' = 1 - ', -FBRIDGE_CBYF1MIN
+        WRITE(*,'(a,f10.8,a,e8.2)')
+     &    ' [MERATIOS] ME ratio CudaCpp/Fortran: MAX = ',
+     &    FBRIDGE_CBYF1MAX + 1, ' = 1 + ', FBRIDGE_CBYF1MAX
+        WRITE(*,'(a,i6)')
+     &    ' [MERATIOS] ME ratio CudaCpp/Fortran: NENTRIES = ',
+     &    FBRIDGE_NCBYF1
+c        WRITE(*,'(a,e8.2)')
+c    &    ' [MERATIOS] ME ratio CudaCpp/Fortran - 1: AVG = ',
+c    &    FBRIDGE_CBYF1SUM / FBRIDGE_NCBYF1
+c       WRITE(*,'(a,e8.2)')
+c    &    ' [MERATIOS] ME ratio CudaCpp/Fortran - 1: STD = ',
+c    &    SQRT( FBRIDGE_CBYF1SUM2 / FBRIDGE_NCBYF1 ) ! ~standard deviation
+        WRITE(*,'(a,e8.2,a,e8.2)')
+     &    ' [MERATIOS] ME ratio CudaCpp/Fortran - 1: AVG = ',
+     &    FBRIDGE_CBYF1SUM / FBRIDGE_NCBYF1, ' +- ',
+     &    SQRT( FBRIDGE_CBYF1SUM2 ) / FBRIDGE_NCBYF1 ! ~standard error
+      ENDIF
+#endif
+      CALL COUNTERS_FINALISE()
       end
 
 c     $B$ get_user_params $B$ ! tag for MadWeight
@@ -381,7 +447,7 @@ c
       fopened=.false.
       tempname=filename 	 
       fine=index(tempname,' ') 	 
-      fine2=index(path,' ')-1	 
+c     fine2=index(path,' ')-1 ! AV remove valgrind "Conditional jump or move depends on uninitialised value(s)"
       if(fine.eq.0) fine=len(tempname)
       open(unit=lun,file=tempname,status='old',ERR=20)
       fopened=.true.
diff --git b/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/matrix1.f a/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/matrix1.f
index 5e888278c..2d9ce6ff3 100644
--- b/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/matrix1.f
+++ a/epochX/sycl/gg_tt.mad/SubProcesses/P1_gg_ttx/matrix1.f
@@ -72,7 +72,10 @@ C
       DATA NB_FAIL /0/
       DOUBLE PRECISION GET_CHANNEL_CUT
       EXTERNAL GET_CHANNEL_CUT
-
+C
+      INTEGER NGOODHEL(2) ! -1 if not yet retrieved and printed
+      SAVE NGOODHEL
+      DATA NGOODHEL/-1,-1/
 C     
 C     This is just to temporarily store the reference grid for
 C      helicity of the DiscreteSampler so as to obtain its number of
@@ -140,6 +143,7 @@ C     ----------
 C     BEGIN CODE
 C     ----------
 
+      call counters_smatrix1_start()
       NTRY(IMIRROR)=NTRY(IMIRROR)+1
       THIS_NTRY(IMIRROR) = THIS_NTRY(IMIRROR)+1
       DO I=1,NEXTERNAL
@@ -217,6 +221,17 @@ C     ----------
           ENDIF
           IF(NTRY(IMIRROR).EQ.MAXTRIES)THEN
             ISHEL(IMIRROR)=MIN(ISUM_HEL,NGOOD(IMIRROR))
+C           Print the number of good helicities
+            IF (NGOODHEL(IMIRROR).EQ.-1) THEN
+              NGOODHEL(IMIRROR)=0
+              DO I=1,NCOMB
+                IF (GOODHEL(I,IMIRROR)) THEN
+                  NGOODHEL(IMIRROR)=NGOODHEL(IMIRROR)+1
+                ENDIF
+              END DO
+              WRITE (6,*) 'NGOODHEL =', NGOODHEL(IMIRROR) ! no need to print imirror?
+              WRITE (6,*) 'NCOMB =', NCOMB
+            ENDIF
           ENDIF
         ENDIF
       ELSE IF (.NOT.INIT_MODE) THEN  ! random helicity 
@@ -234,6 +249,7 @@ C       Include the Jacobian from helicity sampling
         IHEL = HEL_PICKED
       ELSE
         ANS = 1D0
+        call counters_smatrix1_stop()
         RETURN
       ENDIF
       IF (ANS.NE.0D0.AND.(ISUM_HEL .NE. 1.OR.HEL_PICKED.EQ.-1)) THEN
@@ -278,9 +294,8 @@ C           Set right sign for ANS, based on sign of chosen helicity
         ENDIF
       ENDIF
       ANS=ANS/DBLE(IDEN)
-
       CALL SELECT_COLOR(RCOL, JAMP2, CHANNEL,1,  ICOL)
-
+      call counters_smatrix1_stop()
       END
 
 
@@ -381,6 +396,7 @@ C     1 T(2,1,3,4)
 C     ----------
 C     BEGIN CODE
 C     ----------
+      call counters_matrix1_start()
       IF (FIRST) THEN
         FIRST=.FALSE.
         IF(ZERO.NE.0D0) FK_ZERO = SIGN(MAX(ABS(ZERO), ABS(ZERO
@@ -454,6 +470,7 @@ C     JAMPs contributing to orders ALL_ORDERS=1
         ENDDO
       ENDDO
 
+      call counters_matrix1_stop()
       END
 
       SUBROUTINE PRINT_ZERO_AMP_1()
