Running MG5 in debug mode
************************************************************
*                                                          *
*                     W E L C O M E to                     *
*              M A D G R A P H 5 _ a M C @ N L O           *
*                                                          *
*                                                          *
*                 *                       *                *
*                   *        * *        *                  *
*                     * * * * 5 * * * *                    *
*                   *        * *        *                  *
*                 *                       *                *
*                                                          *
*         VERSION 2.9.5                 2021-08-22         *
*         BZR 2.7.0_gpu                        372         *
*                                                          *
*    The MadGraph5_aMC@NLO Development Team - Find us at   *
*    https://server06.fynu.ucl.ac.be/projects/madgraph     *
*                            and                           *
*            http://amcatnlo.web.cern.ch/amcatnlo/         *
*                                                          *
*               Type 'help' for in-line help.              *
*           Type 'tutorial' to learn how MG5 works         *
*    Type 'tutorial aMCatNLO' to learn how aMC@NLO works   *
*    Type 'tutorial MadLoop' to learn how MadLoop works    *
*                                                          *
************************************************************
load MG5 configuration from input/mg5_configuration.txt 
fastjet-config does not seem to correspond to a valid fastjet-config executable (v3+). We will use fjcore instead.
 Please set the 'fastjet'variable to the full (absolute) /PATH/TO/fastjet-config (including fastjet-config).
 MG5_aMC> set fastjet /PATH/TO/fastjet-config

lhapdf-config does not seem to correspond to a valid lhapdf-config executable. 
Please set the 'lhapdf' variable to the (absolute) /PATH/TO/lhapdf-config (including lhapdf-config).
Note that you can still compile and run aMC@NLO with the built-in PDFs
 MG5_aMC> set lhapdf /PATH/TO/lhapdf-config

None does not seem to correspond to a valid lhapdf-config executable. 
Please set the 'lhapdf' variable to the (absolute) /PATH/TO/lhapdf-config (including lhapdf-config).
Note that you can still compile and run aMC@NLO with the built-in PDFs
 MG5_aMC> set lhapdf /PATH/TO/lhapdf-config

Using default text editor "vi". Set another one in ./input/mg5_configuration.txt
Using default eps viewer "evince". Set another one in ./input/mg5_configuration.txt
Using default web browser "firefox". Set another one in ./input/mg5_configuration.txt
import /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu.mg
The import format was not given, so we guess it as command
set stdout_level DEBUG
set output information to level: 10
generate e+ e- > mu+ mu-
No model currently active, so we import the Standard Model
INFO: load particles 
INFO: load vertices 
[1;32mDEBUG: model prefixing  takes 0.004918336868286133 [0m
INFO: Restrict model sm with file models/sm/restrict_default.dat . 
INFO: Change particles name to pass to MG5 convention 
[1;32mDEBUG:  True [1;30m[misc.py at line 2192][0m [0m
Defined multiparticle p = g u c d s u~ c~ d~ s~
Defined multiparticle j = g u c d s u~ c~ d~ s~
Defined multiparticle l+ = e+ mu+
Defined multiparticle l- = e- mu-
Defined multiparticle vl = ve vm vt
Defined multiparticle vl~ = ve~ vm~ vt~
Defined multiparticle all = g u c d s u~ c~ d~ s~ a ve vm vt e- mu- ve~ vm~ vt~ e+ mu+ t b t~ b~ z w+ h w- ta- ta+
[1;32mDEBUG:  True [1;30m[misc.py at line 2192][0m [0m
INFO: Checking for minimal orders which gives processes. 
INFO: Please specify coupling orders to bypass this step. 
INFO: Trying process: e+ e- > mu+ mu- WEIGHTED<=4 @1  
INFO: Process has 2 diagrams 
1 processes with 2 diagrams generated in 0.004 s
Total: 1 processes with 2 diagrams
output standalone_sycl CODEGEN_sycl_ee_mumu
[1mOutput will be done with PLUGIN: SYCL_SA_OUTPUT[0m
[1;32mDEBUG:  Entering PLUGIN_ProcessExporter.__init__ (initialise the exporter) [1;30m[output.py at line 129][0m [0m
[1;32mDEBUG:  Entering PLUGIN_ProcessExporter.copy_template (initialise the directory) [1;30m[output.py at line 134][0m [0m
INFO: Creating subdirectories in directory /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu 
[1;34mWARNING: [Errno 2] No such file or directory: '/home/tojiro/tmp/2.7.0_gpu/PLUGIN/SYCL_SA_OUTPUT/madgraph/iolibs/template_files/gpu/MadgraphTest.h' [0m
[1;34mWARNING: [Errno 2] No such file or directory: '/home/tojiro/tmp/2.7.0_gpu/PLUGIN/SYCL_SA_OUTPUT/madgraph/iolibs/template_files/gpu/runTest.cc' [0m
INFO: Organizing processes into subprocess groups 
INFO: Generating Helas calls for process: e+ e- > mu+ mu- WEIGHTED<=4 @1 
[1;32mDEBUG:  keepordering (default): True [1;30m[output.py at line 26][0m [0m
INFO: Processing color information for process: e+ e- > mu+ mu- @1 
[1;32mDEBUG:  Entering PLUGIN_ProcessExporter.generate_subprocess_directory (create the directory) [1;30m[output.py at line 139][0m [0m
[1;32mDEBUG:    type(subproc_group)=<class 'madgraph.core.helas_objects.HelasMatrixElement'> [1;30m[output.py at line 140][0m [0m
[1;32mDEBUG:    type(fortran_model)=<class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_GPUFOHelasCallWriter'> [1;30m[output.py at line 141][0m [0m
INFO: Creating files in directory /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/SubProcesses/P1_Sigma_sm_epem_mupmum 
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.generate_process_files [1;30m[model_handling.py at line 877][0m [0m
FileWriter <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_FileWriter'> for /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/SubProcesses/P1_Sigma_sm_epem_mupmum/./CPPProcess.h
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.write_process_h_file [1;30m[model_handling.py at line 926][0m [0m
FileWriter <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_FileWriter'> for /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/SubProcesses/P1_Sigma_sm_epem_mupmum/./CPPProcess.cc
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.write_process_cc_file [1;30m[model_handling.py at line 948][0m [0m
[1;32mDEBUG: only one Matrix-element supported? [0m
INFO: Created files CPPProcess.h and CPPProcess.cc in directory /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/SubProcesses/P1_Sigma_sm_epem_mupmum/. 
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_check_sa [1;30m[model_handling.py at line 891][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_mgonGPU [1;30m[model_handling.py at line 906][0m [0m
[1;32mDEBUG:  Entering PLUGIN_OneProcessExporter.edit_processidfile [1;30m[model_handling.py at line 913][0m [0m
Generated helas calls for 1 subprocesses (2 diagrams) in 0.004 s
[1;32mDEBUG:  Entering PLUGIN_ProcessExporter.convert_model (create the model) [1;30m[output.py at line 146][0m [0m
ALOHA: aloha creates routines (starting by FFV1)
<class 'aloha.create_aloha.AbstractRoutine'> FFV1
[1;32mDEBUG:  language = [0m <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_ALOHAWriter'> [1;30m[aloha_writers.py at line 2446][0m [0m
<class 'aloha.create_aloha.AbstractRoutine'> FFV1
[1;32mDEBUG:  language = [0m <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_ALOHAWriter'> [1;30m[aloha_writers.py at line 2446][0m [0m
<class 'aloha.create_aloha.AbstractRoutine'> FFV2
[1;32mDEBUG:  language = [0m <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_ALOHAWriter'> [1;30m[aloha_writers.py at line 2446][0m [0m
<class 'aloha.create_aloha.AbstractRoutine'> FFV2
[1;32mDEBUG:  language = [0m <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_ALOHAWriter'> [1;30m[aloha_writers.py at line 2446][0m [0m
<class 'aloha.create_aloha.AbstractRoutine'> FFV4
[1;32mDEBUG:  language = [0m <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_ALOHAWriter'> [1;30m[aloha_writers.py at line 2446][0m [0m
<class 'aloha.create_aloha.AbstractRoutine'> FFV4
[1;32mDEBUG:  language = [0m <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_ALOHAWriter'> [1;30m[aloha_writers.py at line 2446][0m [0m
<class 'aloha.create_aloha.AbstractRoutine'> FFV2_4
[1;32mDEBUG:  language = [0m <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_ALOHAWriter'> [1;30m[aloha_writers.py at line 2446][0m [0m
<class 'aloha.create_aloha.AbstractRoutine'> FFV2_4
[1;32mDEBUG:  language = [0m <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_ALOHAWriter'> [1;30m[aloha_writers.py at line 2446][0m [0m
  //--------------------------------------------------------------------------

  SYCL_EXTERNAL
  inline const fptype& pIparIp4Ievt(
          const fptype* momenta1d, // input: momenta as AOSOA[npagM][npar][4][neppM]
          const int ipar,
          const int ip4,
          const size_t ievt
          ) {
    // mapping for the various schemes (AOSOA, AOS, SOA...)
    using mgOnGpu::np4;
    using mgOnGpu::npar;
    const int neppM = mgOnGpu::neppM; // AOSOA layout: constant at compile-time
    const int ipagM = ievt/neppM; // #eventpage in this iteration
    const int ieppM = ievt%neppM; // #event in the current eventpage in this iteration
    return momenta1d[ipagM*npar*np4*neppM + ipar*np4*neppM + ip4*neppM + ieppM]; // AOSOA[ipagM][ipar][ip4][ieppM]
  }

  //--------------------------------------------------------------------------
  SYCL_EXTERNAL
  void ixxxxx(
          const fptype_sv* allmomenta, // input[(npar=4)*(np4=4)*nevt]
          size_t ievt,
          const fptype fmass,
          const int nhel,              // input: -1 or +1 (helicity of fermion)
          const int nsf,               // input: +1 (particle) or -1 (antiparticle)
          cxtype_sv* fi,               // output: wavefunction[(nw6==6)]
          const int ipar               // input: particle# out of npar
          ) {
    mgDebug( 0, __FUNCTION__ );
    // +++ START EVENT LOOP (where necessary) +++
    {
      const fptype pvec1 = pIparIp4Ievt( allmomenta, ipar, 1, ievt );
      const fptype pvec2 = pIparIp4Ievt( allmomenta, ipar, 2, ievt );
      const fptype pvec3 = pIparIp4Ievt( allmomenta, ipar, 3, ievt );
      //const fptype pvec0 = fpsqrt( pvec1 * pvec1 + pvec2 * pvec2 + pvec3 * pvec3 ); // AV: BUG?! (NOT AS IN THE FORTRAN)
      const fptype pvec0 = pIparIp4Ievt( allmomenta, ipar, 0, ievt ); // AV: BUG FIX (DO AS IN THE FORTRAN)
      fi[0] = cxmake( -pvec0 * (fptype)nsf, -pvec3 * (fptype)nsf );
      fi[1] = cxmake( -pvec1 * (fptype)nsf, -pvec2 * (fptype)nsf );
      const int nh = nhel * nsf;
      if ( fmass != 0. ) {
          const fptype_sv pp = fpmin( pvec0, fpsqrt( pvec1 * pvec1 + pvec2 * pvec2 + pvec3 * pvec3 ) );
          if ( pp == 0. ) {
              // NB: Do not use "abs" for floats! It returns an integer with no build warning! Use std::abs!
              fptype sqm[2] = { fpsqrt( sycl::fabs( fmass ) ), 0. }; // possibility of negative fermion masses
              //sqm[1] = ( fmass < 0. ? -abs( sqm[0] ) : abs( sqm[0] ) ); // AV: why abs here?
              sqm[1] = ( fmass < 0. ? -sqm[0] : sqm[0] ); // AV: removed an abs here
              const int ip = ( 1 + nh ) / 2; // NB: Fortran sqm(0:1) also has indexes 0,1 as in C++
              const int im = ( 1 - nh ) / 2; // NB: Fortran sqm(0:1) also has indexes 0,1 as in C++
              fi[2] = cxmake( ip * sqm[ip], 0 );
              fi[3] = cxmake( im * nsf * sqm[ip], 0 );
              fi[4] = cxmake( ip * nsf * sqm[im], 0 );
              fi[5] = cxmake( im * sqm[im], 0 );
          } else {
              const fptype sf[2] = { fptype( 1 + nsf + ( 1 - nsf ) * nh ) * (fptype)0.5,
                                     fptype( 1 + nsf - ( 1 - nsf ) * nh ) * (fptype)0.5 };
              fptype omega[2] = { fpsqrt( pvec0 + pp ), 0. };
              omega[1] = fmass / omega[0];
              const int ip = ( 1 + nh ) / 2; // NB: Fortran is (3+nh)/2 because omega(2) has indexes 1,2 and not 0,1
              const int im = ( 1 - nh ) / 2; // NB: Fortran is (3-nh)/2 because omega(2) has indexes 1,2 and not 0,1
              const fptype sfomega[2] = { sf[0] * omega[ip], sf[1] * omega[im] };
              const fptype pp3 = fpmax( pp + pvec3, 0. );
              const cxtype chi[2] = { cxmake( fpsqrt ( pp3 * (fptype)0.5 / pp ), 0. ),
                                      ( pp3 == 0. ?
                                        cxmake( -nh, 0. ) :
                                        cxmake( nh * pvec1, pvec2 ) / fpsqrt( 2. * pp * pp3 ) ) };
              fi[2] = sfomega[0] * chi[im];
              fi[3] = sfomega[0] * chi[ip];
              fi[4] = sfomega[1] * chi[im];
              fi[5] = sfomega[1] * chi[ip];
          }
      } else {
          const fptype_sv sqp0p3 = fpternary( ( pvec1 == 0. and pvec2 == 0. and pvec3 < 0. ),
                                              fptype_sv{0}, fpsqrt( fpmax( pvec0 + pvec3, 0. ) ) * (fptype)nsf );
          const cxtype_sv chi[2] = { cxmake( sqp0p3, 0. ),
                                     cxternary( ( sqp0p3 == 0. ),
                                                cxmake( -(fptype)nhel * fpsqrt( 2. * pvec0 ), 0. ),
                                                cxmake( (fptype)nh * pvec1, pvec2 ) / sqp0p3 ) };
          if ( nh == 1 ) {
              fi[2] = cxzero_sv();
              fi[3] = cxzero_sv();
              fi[4] = chi[0];
              fi[5] = chi[1];
          } else {
              fi[2] = chi[1];
              fi[3] = chi[0];
              fi[4] = cxzero_sv();
              fi[5] = cxzero_sv();
          }
      }
    }
    // +++ END EVENT LOOP (where necessary) +++
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------
  SYCL_EXTERNAL
  void ipzxxx(
          const fptype_sv* allmomenta, // input[(npar=4)*(np4=4)*nevt]
          size_t ievt,
          //const fptype fmass,        // ASSUME fmass==0
          const int nhel,              // input: -1 or +1 (helicity of fermion)
          const int nsf,               // input: +1 (particle) or -1 (antiparticle)
          cxtype_sv* fi,               // output: wavefunction[(nw6==6)]
          const int ipar               // input: particle# out of npar
          ) {
    // ASSUMPTIONS: (FMASS == 0) and (PX == PY == 0 and E == +PZ > 0)
    mgDebug( 0, __FUNCTION__ );
    // +++ START EVENT LOOP (where necessary) +++
    {
      const fptype pvec3 = pIparIp4Ievt( allmomenta, ipar, 3, ievt );
      fi[0] = cxmake( -pvec3 * (fptype)nsf, -pvec3 * (fptype)nsf );
      fi[1] = cxzero_sv();
      const int nh = nhel * nsf;
      const cxtype_sv sqp0p3 = cxmake( fpsqrt( 2. * pvec3 ) * (fptype)nsf, 0. );
      fi[2] = fi[1];
      if( nh == 1 )
      {
        fi[3] = fi[1];
        fi[4] = sqp0p3;
      }
      else
      {
        fi[3] = sqp0p3;
        fi[4] = fi[1];
      }
      fi[5] = fi[1];
    }
    // +++ END EVENT LOOP (where necessary) +++
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------
  SYCL_EXTERNAL
  void imzxxx(
          const fptype_sv* allmomenta, // input[(npar=4)*(np4=4)*nevt]
          size_t ievt,
          //const fptype fmass,        // ASSUME fmass==0
          const int nhel,              // input: -1 or +1 (helicity of fermion)
          const int nsf,               // input: +1 (particle) or -1 (antiparticle)
          cxtype_sv* fi,               // output: wavefunction[(nw6==6)]
          const int ipar               // input: particle# out of npar
          ) {
    // ASSUMPTIONS: (FMASS == 0) and (PX == PY == 0 and E == -PZ > 0)
    mgDebug( 0, __FUNCTION__ );
    // +++ START EVENT LOOP (where necessary) +++
    {
      const fptype pvec3 = pIparIp4Ievt( allmomenta, ipar, 3, ievt );
      fi[0] = cxmake( pvec3 * (fptype)nsf, -pvec3 * (fptype)nsf );
      fi[1] = cxzero_sv();
      const int nh = nhel * nsf;
      const cxtype_sv chi = cxmake( -(fptype)nhel * fpsqrt( -2. * pvec3 ), 0. );
      fi[3] = cxzero_sv();
      fi[4] = cxzero_sv();
      if ( nh == 1 )
      {
        fi[2] = cxzero_sv();
        fi[5] = chi;
      }
      else
      {
        fi[2] = chi;
        fi[5] = cxzero_sv();
      }
    }
    // +++ END EVENT LOOP (where necessary) +++
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------
  SYCL_EXTERNAL
  void ixzxxx(
          const fptype_sv* allmomenta, // input[(npar=4)*(np4=4)*nevt]
          size_t ievt,
          //const fptype fmass,        // ASSUME fmass==0
          const int nhel,              // input: -1 or +1 (helicity of fermion)
          const int nsf,               // input: +1 (particle) or -1 (antiparticle)
          cxtype_sv* fi,               // output: wavefunction[(nw6==6)]
          const int ipar               // input: particle# out of npar
          ) {
    // ASSUMPTIONS: (FMASS == 0) and (PT > 0)
    mgDebug( 0, __FUNCTION__ );
    // +++ START EVENT LOOP (where necessary) +++
    {
      //printf( "ixzxxx: ievt=%d threadId=%d\n", ievt, threadIdx.x );
      // AV: copying by value (not by ref) seems to give the same performance in both cuda and c++
      const fptype pvec0 = pIparIp4Ievt( allmomenta, ipar, 0, ievt );
      const fptype pvec1 = pIparIp4Ievt( allmomenta, ipar, 1, ievt );
      const fptype pvec2 = pIparIp4Ievt( allmomenta, ipar, 2, ievt );
      const fptype pvec3 = pIparIp4Ievt( allmomenta, ipar, 3, ievt );
      //fi[0] = cxmake( -pvec0 * nsf, -pvec2 * nsf ); // AV: BUG! not the same as ixxxxx
      //fi[1] = cxmake( -pvec0 * nsf, -pvec1 * nsf ); // AV: BUG! not the same as ixxxxx
      fi[0] = cxmake( -pvec0 * (fptype)nsf, -pvec3 * (fptype)nsf ); // AV: BUG FIX
      fi[1] = cxmake( -pvec1 * (fptype)nsf, -pvec2 * (fptype)nsf ); // AV: BUG FIX
      const int nh = nhel * nsf;
      //const float sqp0p3 = sqrtf( pvec0 + pvec3 ) * nsf; // AV: why force a float here?
      const fptype_sv sqp0p3 = fpsqrt( pvec0 + pvec3 ) * (fptype)nsf;
      const cxtype_sv chi0 = cxmake( sqp0p3, 0. );
      const cxtype_sv chi1 = cxmake( (fptype)nh * pvec1/sqp0p3, pvec2/sqp0p3 );
      if ( nh == 1 )
      {
        fi[2] = cxzero_sv();
        fi[3] = cxzero_sv();
        fi[4] = chi0;
        fi[5] = chi1;
      }
      else
      {
        fi[2] = chi1;
        fi[3] = chi0;
        fi[4] = cxzero_sv();
        fi[5] = cxzero_sv();
      }
    }
    // +++ END EVENT LOOP (where necessary) +++
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------
  SYCL_EXTERNAL
  void vxxxxx(
          const fptype_sv* allmomenta, // input[(npar=4)*(np4=4)*nevt]
          size_t ievt,
          const fptype vmass,
          const int nhel,              // input: -1, 0 (only if vmass!=0) or +1 (helicity of vector boson)
          const int nsv,               // input: +1 (final) or -1 (initial)
          cxtype_sv* vc,               // output: wavefunction[(nw6==6)]
          const int ipar             // input: particle# out of npar
          ) {
    mgDebug( 0, __FUNCTION__ );
    // +++ START EVENT LOOP (where necessary) +++
    {
      const fptype pvec0 = pIparIp4Ievt( allmomenta, ipar, 0, ievt );
      const fptype pvec1 = pIparIp4Ievt( allmomenta, ipar, 1, ievt );
      const fptype pvec2 = pIparIp4Ievt( allmomenta, ipar, 2, ievt );
      const fptype pvec3 = pIparIp4Ievt( allmomenta, ipar, 3, ievt );

      const fptype sqh = fpsqrt( 0.5 ); 
      const fptype hel = nhel;
      vc[0] = cxmake( pvec0 * (fptype)nsv, pvec3 * (fptype)nsv );
      vc[1] = cxmake( pvec1 * (fptype)nsv, pvec2 * (fptype)nsv );
      if ( vmass != 0. ) {
          const int nsvahl = nsv * sycl::fabs( hel );
          const fptype_sv pt2 = ( pvec1 * pvec1 ) + ( pvec2 * pvec2 );
          const fptype_sv pp = fpmin( pvec0, fpsqrt( pt2 + ( pvec3 * pvec3 ) ) );
          const fptype_sv pt = fpmin( pp, fpsqrt( pt2 ) );
          const fptype hel0 = 1. - sycl::fabs( hel );
          if ( pp == 0. ) {
            vc[2] = cxmake( 0., 0. );
            vc[3] = cxmake( -hel * sqh, 0. );
            vc[4] = cxmake( 0., nsvahl * sqh );
            vc[5] = cxmake( hel0, 0. );
          } else {
              const fptype emp = pvec0 / ( vmass * pp );
              vc[2] = cxmake( hel0 * pp / vmass, 0. );
              vc[5] = cxmake( hel0 * pvec3 * emp + hel * pt / pp * sqh, 0. );
              if ( pt != 0. ) {
                  const fptype pzpt = pvec3 / ( pp * pt ) * sqh * hel;
                  vc[3] = cxmake( hel0 * pvec1 * emp - pvec1 * pzpt, -nsvahl * pvec2 / pt * sqh );
                  vc[4] = cxmake( hel0 * pvec2 * emp - pvec2 * pzpt, nsvahl * pvec1 / pt * sqh );
              } else {
                vc[3] = cxmake( -hel * sqh, 0. );
                // NB: Do not use "abs" for floats! It returns an integer with no build warning! Use std::abs!
                //vc[4] = cxmake( 0., nsvahl * ( pvec3 < 0. ? -std::abs( sqh ) : std::abs( sqh ) ) ); // AV: why abs here?
                vc[4] = cxmake( 0., nsvahl * ( pvec3 < 0. ? -sqh : sqh ) ); // AV: removed an abs here
              }
          }
      } else {
          const fptype_sv& pp = pvec0; // NB: rewrite the following  as in Fortran, using pp instead of pvec0
          const fptype_sv pt = fpsqrt( ( pvec1 * pvec1 ) + ( pvec2 * pvec2 ) );
          vc[2] = cxzero_sv();
          vc[5] = cxmake( hel * pt / pp * sqh, 0. );
          if ( pt != 0. ) {
              const fptype pzpt = pvec3 / ( pp * pt ) * sqh * hel;
              vc[3] = cxmake( -pvec1 * pzpt, -nsv * pvec2 / pt * sqh );
              vc[4] = cxmake( -pvec2 * pzpt, nsv * pvec1 / pt * sqh );
          } else {
              vc[3] = cxmake( -hel * sqh, 0. );
              // NB: Do not use "abs" for floats! It returns an integer with no build warning! Use std::abs!
              //vc[4] = cxmake( 0, nsv * ( pvec3 < 0. ? -std::abs( sqh ) : std::abs( sqh ) ) ); // AV why abs here?
              vc[4] = cxmake( 0., nsv * ( pvec3 < 0. ? -sqh : sqh ) ); // AV: removed an abs here
          }
      }
    }
    // +++ END EVENT LOOP (where necessary) +++
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------
  SYCL_EXTERNAL
  void sxxxxx(
          const fptype_sv* allmomenta, // input[(npar=4)*(np4=4)*nevt]
          size_t ievt,
          const fptype,                // WARNING: "smass" unused (missing in Fortran)
          const int,                   // WARNING: "nhel" unused (missing in Fortran) - scalar has no helicity
          const int nss,               // input: +1 (final) or -1 (initial)
          cxtype_sv sc[3],             // output: wavefunction[3] - not [6], this is for scalars
          const int ipar               // input: particle# out of npar
          ) {
    mgDebug( 0, __FUNCTION__ );
    // +++ START EVENT LOOP (where necessary) +++
    {
      const fptype pvec0 = pIparIp4Ievt( allmomenta, ipar, 0, ievt );
      const fptype pvec1 = pIparIp4Ievt( allmomenta, ipar, 1, ievt );
      const fptype pvec2 = pIparIp4Ievt( allmomenta, ipar, 2, ievt );
      const fptype pvec3 = pIparIp4Ievt( allmomenta, ipar, 3, ievt );

      sc[2] = cxmake( 1 + fptype_sv{0}, 0 );
      sc[0] = cxmake( pvec0 * (fptype)nss, pvec3 * (fptype)nss );
      sc[1] = cxmake( pvec1 * (fptype)nss, pvec2 * (fptype)nss );
    }
    // +++ END EVENT LOOP (where necessary) +++
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------
  SYCL_EXTERNAL
  void oxxxxx(
          const fptype_sv* allmomenta, // input[(npar=4)*(np4=4)*nevt]
          size_t ievt,
          const fptype fmass,
          const int nhel,              // input: -1 or +1 (helicity of fermion)
          const int nsf,               // input: +1 (particle) or -1 (antiparticle)
          cxtype_sv* fo,               // output: wavefunction[(nw6==6)]
          const int ipar               // input: particle# out of npar
          ) {
    mgDebug( 0, __FUNCTION__ );
    // +++ START EVENT LOOP (where necessary) +++
    {
      const fptype pvec0 = pIparIp4Ievt( allmomenta, ipar, 0, ievt );
      const fptype pvec1 = pIparIp4Ievt( allmomenta, ipar, 1, ievt );
      const fptype pvec2 = pIparIp4Ievt( allmomenta, ipar, 2, ievt );
      const fptype pvec3 = pIparIp4Ievt( allmomenta, ipar, 3, ievt );

      fo[0] = cxmake( pvec0 * (fptype)nsf, pvec3 * (fptype)nsf );
      fo[1] = cxmake( pvec1 * (fptype)nsf, pvec2 * (fptype)nsf );
      const int nh = nhel * nsf;
      if ( fmass != 0. ) {
          const fptype_sv pp = fpmin( pvec0, fpsqrt( ( pvec1 * pvec1 ) + ( pvec2 * pvec2 ) + ( pvec3 * pvec3 ) ) );
          if ( pp == 0. ) {
              // NB: Do not use "abs" for floats! It returns an integer with no build warning! Use std::abs!
              fptype sqm[2] = { fpsqrt( sycl::fabs( fmass ) ), 0. }; // possibility of negative fermion masses
              //sqm[1] = ( fmass < 0. ? -abs( sqm[0] ) : abs( sqm[0] ) ); // AV: why abs here?
              sqm[1] = ( fmass < 0. ? -sqm[0] : sqm[0] ); // AV: removed an abs here
              const int ip = -( ( 1 - nh ) / 2 ) * nhel; // NB: Fortran sqm(0:1) also has indexes 0,1 as in C++
              const int im = ( 1 + nh ) / 2 * nhel; // NB: Fortran sqm(0:1) also has indexes 0,1 as in C++
              fo[2] = cxmake( im * sqm[sycl::abs( ip )], 0 );
              fo[3] = cxmake( ip * nsf * sqm[sycl::abs( ip )], 0 );
              fo[4] = cxmake( im * nsf * sqm[sycl::abs( im )], 0 );
              fo[5] = cxmake( ip * sqm[sycl::abs( im )], 0 );
          } else {
              const fptype sf[2] = { fptype( 1 + nsf + ( 1 - nsf ) * nh ) * (fptype)0.5,
                                     fptype( 1 + nsf - ( 1 - nsf ) * nh ) * (fptype)0.5 };
              fptype omega[2] = { fpsqrt( pvec0 + pp ), 0. };
              omega[1] = fmass / omega[0];
              const int ip = ( 1 + nh ) / 2; // NB: Fortran is (3+nh)/2 because omega(2) has indexes 1,2 and not 0,1
              const int im = ( 1 - nh ) / 2; // NB: Fortran is (3-nh)/2 because omega(2) has indexes 1,2 and not 0,1
              const fptype sfomeg[2] = { sf[0] * omega[ip], sf[1] * omega[im] };
              const fptype pp3 = fpmax( pp + pvec3, 0. );
              const cxtype chi[2] = { cxmake( fpsqrt( pp3 * (fptype)0.5 / pp ), 0. ),
                                      ( ( pp3 == 0. ) ? cxmake( -nh, 0. )
                                        : cxmake( nh * pvec1, -pvec2 ) / fpsqrt( 2. * pp * pp3 ) ) };
              fo[2] = sfomeg[1] * chi[im];
              fo[3] = sfomeg[1] * chi[ip];
              fo[4] = sfomeg[0] * chi[im];
              fo[5] = sfomeg[0] * chi[ip];
          }
      } else {
          const fptype_sv sqp0p3 = fpternary( ( pvec1 == 0. ) and ( pvec2 == 0. ) and ( pvec3 < 0. ),
                                              0, fpsqrt( fpmax( pvec0 + pvec3, 0. ) ) * (fptype)nsf );
          const cxtype_sv chi[2] = { cxmake( sqp0p3, 0. ),
                                     cxternary( ( sqp0p3 == 0. ),
                                                cxmake( -nhel, 0. ) * fpsqrt( 2. * pvec0 ),
                                                cxmake( (fptype)nh * pvec1, -pvec2 ) / sqp0p3 ) };
          if ( nh == 1 ) {
              fo[2] = chi[0];
              fo[3] = chi[1];
              fo[4] = cxzero_sv();
              fo[5] = cxzero_sv();
          } else {
              fo[2] = cxzero_sv();
              fo[3] = cxzero_sv();
              fo[4] = chi[1];
              fo[5] = chi[0];
          }
      }
    }
    // +++ END EVENT LOOP (where necessary) +++
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------
  SYCL_EXTERNAL
  void opzxxx(
          const fptype_sv* allmomenta, // input[(npar=4)*(np4=4)*nevt]
          size_t ievt,
          const int nhel,              // input: -1 or +1 (helicity of fermion)
          const int nsf,               // input: +1 (particle) or -1 (antiparticle)
          cxtype_sv* fo,               // output: wavefunction[(nw6==6)]
          const int ipar               // input: particle# out of npar
          ) {
    // ASSUMPTIONS: (FMASS == 0) and (PX == PY == 0 and E == +PZ > 0)
    mgDebug( 0, __FUNCTION__ );
    // +++ START EVENT LOOP (where necessary) +++
    {
      const fptype pvec3 = pIparIp4Ievt( allmomenta, ipar, 3, ievt );

      fo[0] = cxmake( pvec3 * (fptype)nsf, pvec3 * (fptype)nsf );
      fo[1] = cxzero_sv();
      const int nh = nhel * nsf;
      const cxtype_sv csqp0p3 = cxmake( fpsqrt( 2. * pvec3 ) * (fptype)nsf, 0. );
      fo[3] = cxzero_sv();
      fo[4] = cxzero_sv();
      if ( nh == 1 ) {
          fo[2] = csqp0p3;
          fo[5] = cxzero_sv();
      }
      else {
          fo[2] = cxzero_sv();
          fo[5] = csqp0p3;
      }
    }
    // +++ END EVENT LOOP (where necessary) +++
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------
  SYCL_EXTERNAL
  void omzxxx(
          const fptype_sv* allmomenta, // input[(npar=4)*(np4=4)*nevt]
           size_t ievt,
           const int nhel,             // input: -1 or +1 (helicity of fermion)
           const int nsf,              // input: +1 (particle) or -1 (antiparticle)
           cxtype_sv* fo,              // output: wavefunction[(nw6==6)]
           const int ipar              // input: particle# out of npar
           ) {
    // ASSUMPTIONS: (FMASS == 0) and (PX == PY == 0 and E == -PZ > 0)
    mgDebug( 0, __FUNCTION__ );
    // +++ START EVENT LOOP (where necessary) +++
    {
      const fptype pvec3 = pIparIp4Ievt( allmomenta, ipar, 3, ievt );
      fo[0] = cxmake( -pvec3 * (fptype)nsf, pvec3 * (fptype)nsf ); // remember pvec0 == -pvec3
      fo[1] = cxzero_sv();
      const int nh = nhel * nsf;
      const cxtype_sv chi1 = cxmake( -nhel, 0. ) * fpsqrt( -2. * pvec3 );
      if ( nh == 1 ) {
          fo[2] = cxzero_sv();
          fo[3] = chi1;
          fo[4] = cxzero_sv();
          fo[5] = cxzero_sv();
      } else {
          fo[2] = cxzero_sv();
          fo[3] = cxzero_sv();
          fo[4] = chi1;
          //fo[5] = chi1; // AV: BUG!
          fo[5] = cxzero_sv(); // AV: BUG FIX
      }
    }
    // +++ END EVENT LOOP (where necessary) +++
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------
  SYCL_EXTERNAL
  void oxzxxx(
          const fptype_sv* allmomenta, // input[(npar=4)*(np4=4)*nevt]
          size_t ievt,
          //const fptype fmass,        // ASSUME fmass==0
          const int nhel,              // input: -1 or +1 (helicity of fermion)
          const int nsf,               // input: +1 (particle) or -1 (antiparticle)
          cxtype_sv* fo,               // output: wavefunction[(nw6==6)]
          const int ipar             // input: particle# out of npar
          ) {
    // ASSUMPTIONS: (FMASS == 0) and (PT > 0)
    mgDebug( 0, __FUNCTION__ );
    // +++ START EVENT LOOP (where necessary) +++
    {
      const fptype pvec0 = pIparIp4Ievt( allmomenta, ipar, 0, ievt );
      const fptype pvec1 = pIparIp4Ievt( allmomenta, ipar, 1, ievt );
      const fptype pvec2 = pIparIp4Ievt( allmomenta, ipar, 2, ievt );
      const fptype pvec3 = pIparIp4Ievt( allmomenta, ipar, 3, ievt );

      fo[0] = cxmake( pvec0 * (fptype)nsf, pvec3 * (fptype)nsf );
      fo[1] = cxmake( pvec1 * (fptype)nsf, pvec2 * (fptype)nsf );
      const int nh = nhel * nsf;
      //const float sqp0p3 = sqrtf( pvec0 + pvec3 ) * nsf; // AV: why force a float here?
      const fptype_sv sqp0p3 = fpsqrt( pvec0 + pvec3 ) * (fptype)nsf;
      const cxtype_sv chi0 = cxmake( sqp0p3, 0. );
      const cxtype_sv chi1 = cxmake( (fptype)nh * pvec1 / sqp0p3, -pvec2 / sqp0p3 );
      if ( nh == 1 ) {
          fo[2] = chi0;
          fo[3] = chi1;
          fo[4] = cxzero_sv();
          fo[5] = cxzero_sv();
      } else {
          fo[2] = cxzero_sv();
          fo[3] = cxzero_sv();
          fo[4] = chi1;
          fo[5] = chi0;
      }
    }
    // +++ END EVENT LOOP (where necessary) +++
    mgDebug( 1, __FUNCTION__ );
    return;
  }


  // Compute the output amplitude 'vertex' from the input wavefunctions F1[6], F2[6], V3[6]
  
  void FFV1_0( const cxtype_sv F1[],
               const cxtype_sv F2[],
               const cxtype_sv V3[],
               const cxtype COUP,
               cxtype_sv* vertex )
  {
    mgDebug( 0, __FUNCTION__ );
    const cxtype cI = cxmake( 0., 1. );
    const cxtype_sv TMP0 = ( F1[2] * ( F2[4] * ( V3[2] + V3[5] ) + F2[5] * ( V3[3] + cI * ( V3[4] ) ) ) + ( F1[3] * ( F2[4] * ( V3[3]- cI * ( V3[4] ) ) + F2[5] * ( V3[2] - V3[5] ) ) + ( F1[4] * ( F2[2] * ( V3[2] - V3[5] ) - F2[3] * ( V3[3] + cI * ( V3[4] ) ) ) + F1[5] * ( F2[2] * ( -V3[3] + cI * ( V3[4] ) ) + F2[3] * ( V3[2] + V3[5] ) ) ) ) );
    (*vertex) = COUP * - cI * TMP0;
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------

  // Compute the output wavefunction 'V3[6]' from the input wavefunctions F1[6], F2[6]
  
  void FFV1P0_3( const cxtype_sv F1[],
                 const cxtype_sv F2[],
                 const cxtype COUP,
                 const fptype M3,
                 const fptype W3,
                 cxtype_sv V3[] )
  {
    mgDebug( 0, __FUNCTION__ );
    const cxtype cI = cxmake( 0., 1. );
    V3[0] = + F1[0] + F2[0];
    V3[1] = + F1[1] + F2[1];
    const fptype_sv P3[4] = { -cxreal( V3[0] ), -cxreal( V3[1] ), -cximag( V3[1] ), -cximag( V3[0] ) };
    const cxtype_sv denom = COUP / ( (P3[0] * P3[0] ) - ( P3[1] * P3[1] ) - ( P3[2] * P3[2] ) - ( P3[3] * P3[3] ) - M3 * ( M3 - cI * W3 ) );
    V3[2] = denom * (- cI) * ( F1[2] * F2[4] + F1[3] * F2[5] + F1[4] * F2[2] + F1[5] * F2[3] );
    V3[3] = denom * (- cI) * ( -F1[2] * F2[5] - F1[3] * F2[4] + F1[4] * F2[3] + F1[5] * F2[2] );
    V3[4] = denom * (- cI) * ( - cI * ( F1[2] * F2[5] + F1[5] * F2[2] ) + cI * ( F1[3] * F2[4] + F1[4] * F2[3] ) );
    V3[5] = denom * (- cI) * ( -F1[2] * F2[4] - F1[5] * F2[3] + F1[3] * F2[5] + F1[4] * F2[2] );
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------

  // Compute the output amplitude 'vertex' from the input wavefunctions F1[6], F2[6], V3[6]
  
  void FFV2_0( const cxtype_sv F1[],
               const cxtype_sv F2[],
               const cxtype_sv V3[],
               const cxtype COUP,
               cxtype_sv* vertex )
  {
    mgDebug( 0, __FUNCTION__ );
    const cxtype cI = cxmake( 0., 1. );
    const cxtype_sv TMP1 = ( F1[2] * ( F2[4] * ( V3[2] + V3[5] ) + F2[5] * ( V3[3] + cI * ( V3[4] ) ) ) + F1[3] * ( F2[4] * ( V3[3]- cI * ( V3[4] ) ) + F2[5] * ( V3[2] - V3[5] ) ) );
    (*vertex) = COUP * - cI * TMP1;
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------

  // Compute the output wavefunction 'V3[6]' from the input wavefunctions F1[6], F2[6]
  
  void FFV2_3( const cxtype_sv F1[],
               const cxtype_sv F2[],
               const cxtype COUP,
               const fptype M3,
               const fptype W3,
               cxtype_sv V3[] )
  {
    mgDebug( 0, __FUNCTION__ );
    const cxtype cI = cxmake( 0., 1. );
    const fptype OM3 = ( M3 != 0. ? 1. / ( M3 * M3 ) : 0. );
    V3[0] = + F1[0] + F2[0];
    V3[1] = + F1[1] + F2[1];
    const fptype_sv P3[4] = { -cxreal( V3[0] ), -cxreal( V3[1] ), -cximag( V3[1] ), -cximag( V3[0] ) };
    const cxtype_sv TMP2 = ( F1[2] * ( F2[4] * ( P3[0] + P3[3] ) + F2[5] * ( P3[1] + cI * ( P3[2] ) ) ) + F1[3] * ( F2[4] * ( P3[1]- cI * ( P3[2] ) ) + F2[5] * ( P3[0] - P3[3] ) ) );
    const cxtype_sv denom = COUP / ( (P3[0] * P3[0] ) - ( P3[1] * P3[1] ) - ( P3[2] * P3[2] ) - ( P3[3] * P3[3] ) - M3 * ( M3 - cI * W3 ) );
    V3[2] = denom * (- cI) * ( F1[2] * F2[4] + F1[3] * F2[5] - P3[0] * OM3 * TMP2 );
    V3[3] = denom * (- cI) * ( -F1[2] * F2[5] - F1[3] * F2[4] - P3[1] * OM3 * TMP2 );
    V3[4] = denom * (- cI) * ( - cI * ( F1[2] * F2[5] ) + cI * ( F1[3] * F2[4] ) - P3[2] * OM3 * TMP2 );
    V3[5] = denom * (- cI) * ( -F1[2] * F2[4] - P3[3] * OM3 * TMP2 + F1[3] * F2[5] );
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------

  // Compute the output amplitude 'vertex' from the input wavefunctions F1[6], F2[6], V3[6]
  
  void FFV4_0( const cxtype_sv F1[],
               const cxtype_sv F2[],
               const cxtype_sv V3[],
               const cxtype COUP,
               cxtype_sv* vertex )
  {
    mgDebug( 0, __FUNCTION__ );
    const cxtype cI = cxmake( 0., 1. );
    constexpr fptype one( 1. );
    constexpr fptype two( 2. );
    const cxtype_sv TMP1 = ( F1[2] * ( F2[4] * ( V3[2] + V3[5] ) + F2[5] * ( V3[3] + cI * ( V3[4] ) ) ) + F1[3] * ( F2[4] * ( V3[3]- cI * ( V3[4] ) ) + F2[5] * ( V3[2] - V3[5] ) ) );
    const cxtype_sv TMP3 = ( F1[4] * ( F2[2] * ( V3[2] - V3[5] ) - F2[3] * ( V3[3] + cI * ( V3[4] ) ) ) + F1[5] * ( F2[2] * ( -V3[3] + cI * ( V3[4] ) ) + F2[3] * ( V3[2] + V3[5] ) ) );
    (*vertex) = COUP * (- one) * ( +cI * ( TMP1 ) + two * cI * ( TMP3 ) );
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------

  // Compute the output wavefunction 'V3[6]' from the input wavefunctions F1[6], F2[6]
  
  void FFV4_3( const cxtype_sv F1[],
               const cxtype_sv F2[],
               const cxtype COUP,
               const fptype M3,
               const fptype W3,
               cxtype_sv V3[] )
  {
    mgDebug( 0, __FUNCTION__ );
    const cxtype cI = cxmake( 0., 1. );
    const fptype OM3 = ( M3 != 0. ? 1. / ( M3 * M3 ) : 0. );
    V3[0] = + F1[0] + F2[0];
    V3[1] = + F1[1] + F2[1];
    const fptype_sv P3[4] = { -cxreal( V3[0] ), -cxreal( V3[1] ), -cximag( V3[1] ), -cximag( V3[0] ) };
    constexpr fptype two( 2. );
    constexpr fptype half( 1. / 2. );
    const cxtype_sv TMP2 = ( F1[2] * ( F2[4] * ( P3[0] + P3[3] ) + F2[5] * ( P3[1] + cI * ( P3[2] ) ) ) + F1[3] * ( F2[4] * ( P3[1]- cI * ( P3[2] ) ) + F2[5] * ( P3[0] - P3[3] ) ) );
    const cxtype_sv TMP4 = ( F1[4] * ( F2[2] * ( P3[0] - P3[3] ) - F2[3] * ( P3[1] + cI * ( P3[2] ) ) ) + F1[5] * ( F2[2] * ( -P3[1] + cI * ( P3[2] ) ) + F2[3] * ( P3[0] + P3[3] ) ) );
    const cxtype_sv denom = COUP / ( (P3[0] * P3[0] ) - ( P3[1] * P3[1] ) - ( P3[2] * P3[2] ) - ( P3[3] * P3[3] ) - M3 * ( M3 - cI * W3 ) );
    V3[2] = denom * (- two * cI) * ( OM3 * - half * P3[0] * ( TMP2 + two * ( TMP4 ) ) + ( +half * ( F1[2] * F2[4] + F1[3] * F2[5] ) + F1[4] * F2[2] + F1[5] * F2[3] ) );
    V3[3] = denom * (- two * cI) * ( OM3 * - half * P3[1] * ( TMP2 + two * ( TMP4 ) ) + ( - half * ( F1[2] * F2[5] + F1[3] * F2[4] ) + F1[4] * F2[3] + F1[5] * F2[2] ) );
    V3[4] = denom * two * cI * ( OM3 * half * P3[2] * ( TMP2 + two * ( TMP4 ) ) + ( +half * cI * ( F1[2] * F2[5] )- half * cI * ( F1[3] * F2[4] )- cI * ( F1[4] * F2[3] ) + cI * ( F1[5] * F2[2] ) ) );
    V3[5] = denom * two * cI * ( OM3 * half * P3[3] * ( TMP2 + two * ( TMP4 ) ) + ( +half * ( F1[2] * F2[4] )- half * ( F1[3] * F2[5] ) - F1[4] * F2[2] + F1[5] * F2[3] ) );
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------

  // Compute the output amplitude 'vertex' from the input wavefunctions F1[6], F2[6], V3[6]
  
  void FFV2_4_0( const cxtype_sv F1[],
                 const cxtype_sv F2[],
                 const cxtype_sv V3[],
                 const cxtype COUP1,
                 const cxtype COUP2,
                 cxtype_sv* vertex )
  {
    mgDebug( 0, __FUNCTION__ );
    const cxtype cI = cxmake( 0., 1. );
    constexpr fptype one( 1. );
    constexpr fptype two( 2. );
    const cxtype_sv TMP1 = ( F1[2] * ( F2[4] * ( V3[2] + V3[5] ) + F2[5] * ( V3[3] + cI * ( V3[4] ) ) ) + F1[3] * ( F2[4] * ( V3[3]- cI * ( V3[4] ) ) + F2[5] * ( V3[2] - V3[5] ) ) );
    const cxtype_sv TMP3 = ( F1[4] * ( F2[2] * ( V3[2] - V3[5] ) - F2[3] * ( V3[3] + cI * ( V3[4] ) ) ) + F1[5] * ( F2[2] * ( -V3[3] + cI * ( V3[4] ) ) + F2[3] * ( V3[2] + V3[5] ) ) );
    (*vertex) = (- one) * ( COUP2 * ( +cI * ( TMP1 ) + two * cI * ( TMP3 ) ) + cI * ( TMP1 * COUP1 ) );
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------

  // Compute the output wavefunction 'V3[6]' from the input wavefunctions F1[6], F2[6]
  
  void FFV2_4_3( const cxtype_sv F1[],
                 const cxtype_sv F2[],
                 const cxtype COUP1,
                 const cxtype COUP2,
                 const fptype M3,
                 const fptype W3,
                 cxtype_sv V3[] )
  {
    mgDebug( 0, __FUNCTION__ );
    const cxtype cI = cxmake( 0., 1. );
    const fptype OM3 = ( M3 != 0. ? 1. / ( M3 * M3 ) : 0. );
    V3[0] = + F1[0] + F2[0];
    V3[1] = + F1[1] + F2[1];
    const fptype_sv P3[4] = { -cxreal( V3[0] ), -cxreal( V3[1] ), -cximag( V3[1] ), -cximag( V3[0] ) };
    constexpr fptype one( 1. );
    constexpr fptype two( 2. );
    constexpr fptype half( 1. / 2. );
    const cxtype_sv TMP2 = ( F1[2] * ( F2[4] * ( P3[0] + P3[3] ) + F2[5] * ( P3[1] + cI * ( P3[2] ) ) ) + F1[3] * ( F2[4] * ( P3[1]- cI * ( P3[2] ) ) + F2[5] * ( P3[0] - P3[3] ) ) );
    const cxtype_sv TMP4 = ( F1[4] * ( F2[2] * ( P3[0] - P3[3] ) - F2[3] * ( P3[1] + cI * ( P3[2] ) ) ) + F1[5] * ( F2[2] * ( -P3[1] + cI * ( P3[2] ) ) + F2[3] * ( P3[0] + P3[3] ) ) );
    const cxtype_sv denom = one / ( (P3[0] * P3[0] ) - ( P3[1] * P3[1] ) - ( P3[2] * P3[2] ) - ( P3[3] * P3[3] ) - M3 * ( M3 - cI * W3 ) );
    V3[2] = denom * (- two * cI) * ( COUP2 * ( OM3 * - half * P3[0] * ( TMP2 + two * ( TMP4 ) ) + ( +half * ( F1[2] * F2[4] + F1[3] * F2[5] ) + F1[4] * F2[2] + F1[5] * F2[3] ) ) + half * ( COUP1 * ( F1[2] * F2[4] + F1[3] * F2[5] - P3[0] * OM3 * TMP2 ) ) );
    V3[3] = denom * (- two * cI) * ( COUP2 * ( OM3 * - half * P3[1] * ( TMP2 + two * ( TMP4 ) ) + ( - half * ( F1[2] * F2[5] + F1[3] * F2[4] ) + F1[4] * F2[3] + F1[5] * F2[2] ) )- half * ( COUP1 * ( F1[2] * F2[5] + F1[3] * F2[4] + P3[1] * OM3 * TMP2 ) ) );
    V3[4] = denom * cI * ( COUP2 * ( OM3 * P3[2] * ( TMP2 + two * ( TMP4 ) ) + ( +cI * ( F1[2] * F2[5] )- cI * ( F1[3] * F2[4] )- two * cI * ( F1[4] * F2[3] ) + two * cI * ( F1[5] * F2[2] ) ) ) + COUP1 * ( +cI * ( F1[2] * F2[5] )- cI * ( F1[3] * F2[4] ) + P3[2] * OM3 * TMP2 ) );
    V3[5] = denom * two * cI * ( COUP2 * ( OM3 * half * P3[3] * ( TMP2 + two * ( TMP4 ) ) + ( +half * ( F1[2] * F2[4] )- half * ( F1[3] * F2[5] ) - F1[4] * F2[2] + F1[5] * F2[3] ) ) + half * ( COUP1 * ( F1[2] * F2[4] + P3[3] * OM3 * TMP2 - F1[3] * F2[5] ) ) );
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------

FileWriter <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_FileWriter'> for /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/src/./HelAmps_sm.h
FileWriter <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_FileWriter'> for /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/src/./HelAmps_sm.cc
INFO: Created files HelAmps_sm.h and HelAmps_sm.cc in directory 
INFO: /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/src/. and /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/src/. 
FileWriter <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_FileWriter'> for /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/src/./Parameters_sm.h
FileWriter <class 'PLUGIN.SYCL_SA_OUTPUT.model_handling.PLUGIN_FileWriter'> for /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/src/./Parameters_sm.cc
INFO: Created files Parameters_sm.h and Parameters_sm.cc in directory 
INFO: /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/src/. and /home/tojiro/tmp/2.7.0_gpu/CODEGEN_sycl_ee_mumu/src/. 
[1;32mDEBUG:  Entering PLUGIN_ProcessExporter.finalize [1;30m[output.py at line 155][0m [0m
quit

real	0m0.961s
user	0m0.864s
sys	0m0.102s
