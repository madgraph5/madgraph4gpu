DEFAULT_CPP_COMPILER=g++
MACFLAG=
STDLIB=-lstdc++
STDLIB_FLAG=
DEFAULT_F_COMPILER=gfortran
DEFAULT_F2PY_COMPILER=f2py3.9
MG5AMC_VERSION=SpecifiedByMG5aMCAtRunTime
PYTHIA8_PATH=NotInstalled
#end_of_make_opts_variables

BIASLIBDIR=../../../lib/
BIASLIBRARY=libbias.$(libext)


# REMOVE MACFLAG IF NOT ON MAC OR FOR F2PY
UNAME := $(shell uname -s)
ifdef f2pymode
MACFLAG=
else
ifneq ($(UNAME), Darwin)
MACFLAG=
endif
endif

############################################################
# Default compiler flags
# To change optimisation level, override these as follows:
#   make CXXFLAGS="-O0 -g"
# or export them as environment variables
# For debugging Fortran, one could e.g. use:
# FCFLAGS="-g -fbounds-check -ffpe-trap=invalid,zero,overflow,underflow,denormal -Wall -fimplicit-none"
############################################################

FCFLAGS   ?= -O3 -ffast-math -fbounds-check
CXXFLAGS  ?= -O3 -ffast-math -DNDEBUG $(STDLIB_FLAG) $(MACFLAG)
NVCCFLAGS ?= -O3 -ffast-math -use_fast_math -DNDEBUG -lineinfo
LDFLAGS   ?= $(STDLIB) $(MACFLAG)

ifneq ($(FFLAGS),)
# Madgraph used to use FFLAGS, so the user probably tries to change the flags specifically for madgraph:
FCFLAGS = $(FFLAGS)
endif

# Madgraph-specific flags:
WARNFLAGS = -Wall -Wshadow -Wextra
ifeq (,$(findstring -std=,$(CXXFLAGS)))
  CXXSTANDARD= -std=c++17
endif
MG_FCFLAGS   += -fPIC -w
MG_CXXFLAGS  += -fPIC $(CXXSTANDARD) $(WARNFLAGS)
MG_NVCCFLAGS += -fPIC $(CXXSTANDARD) --forward-unknown-to-host-compiler $(WARNFLAGS)

# Set FC unless it's defined by an environment variable
ifeq ($(origin FC),default)
FC=$(DEFAULT_F_COMPILER)
endif
ifeq ($(origin F2PY), undefined)
F2PY=$(DEFAULT_F2PY_COMPILER)
endif

# Increase the number of allowed charcters in a Fortran line
ifeq ($(FC), ftn)
MG_FCFLAGS += -extend-source # for ifort type of compiler
else
VERS="$(shell $(FC) --version | grep ifort -i)"
ifeq ($(VERS), "")
MG_FCFLAGS += -ffixed-line-length-132
else
MG_FCFLAGS += -extend-source # for ifort type of compiler
endif
endif


UNAME := $(shell uname -s)

# Options: dynamic, lhapdf
# Option dynamic

ifeq ($(UNAME), Darwin)
dylibext=dylib
else
dylibext=so
endif

ifdef dynamic
ifeq ($(UNAME), Darwin)
libext=dylib
MG_FCFLAGS += -fno-common
MG_LDFLAGS += -bundle
define CREATELIB
$(FC) -dynamiclib -undefined dynamic_lookup -o $(1) $(2)
endef
else
libext=so
MG_FCFLAGS += -fPIC
MG_LDFLAGS += -shared
define CREATELIB
$(FC) $(MG_FCFLAGS) $(FCFLAGS) $(MG_LDFLAGS) $(LDFLAGS) -o $(1) $(2)
endef
endif
else
libext=a
define CREATELIB
$(AR) cru $(1) $(2)
ranlib $(1)
endef
endif

# Option lhapdf

ifneq ($(lhapdf),)
MG_CXXFLAGS += $(shell $(lhapdf) --cppflags)
alfas_functions=alfas_functions_lhapdf
llhapdf+= $(shell $(lhapdf) --cflags --libs) -lLHAPDF
else
alfas_functions=alfas_functions
llhapdf=
endif

# Helper function to check MG5 version
define CHECK_MG5AMC_VERSION
python -c 'import re; from distutils.version import StrictVersion; print StrictVersion("$(MG5AMC_VERSION)") >= StrictVersion("$(1)") if re.match("^[\d\.]+$$","$(MG5AMC_VERSION)") else True;'
endef