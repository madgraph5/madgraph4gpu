####
## Automatic creation of CI/CD for the plugin repo
## and automatic test in madgraph format style
## test can be added easily by adding a file in the directory
##  simple_cross_check
## format of the file is the cmd file to pass to the code
## two type of additional metadata line are present
## #title provide the documentation information for the unittest (docstring)
## #check RUN_NAME CROSS ERROR NB_EVENT provide the target cross-section/error/requested event


import os
import glob

curr_dir = os.path.dirname(__file__)
pjoin = os.path.join
template_runtest = """
# WARNING THIS FILE IS AUTOGENERATED -> edit test_simd_madevent.template
    def test_%(name)s(self):
        \"\"\"%(doc)s\"\"\"

        if logging.getLogger('madgraph').level <= 20:
            stdout=None
            stderr=None
        else:
            devnull =open(os.devnull,'w')
            stdout=devnull
            stderr=devnull
            
        try:
            shutil.rmtree('/tmp/MGPROCESS/')
        except Exception as error:
            pass
        
        cmd = \"\"\"%(cmd)s
                 \"\"\" %%self.run_dir

        open(pjoin(self.path, 'mg5_cmd'),'w').write(cmd)
        newenv = os.environ.copy()
        newenv[\"PYTHONPATH\"] = pjoin(MG5DIR, '..')
        subprocess.call([sys.executable, pjoin(MG5DIR, 'bin','mg5_aMC'),'-m','CUDACPP_OUTPUT', 
                         pjoin(self.path, 'mg5_cmd')], env=newenv,
                         #cwd=self.path,
                         stdout=stdout, stderr=stderr)
"""

template_onecheck = """
        self.check_parton_output(cross=%(cross)s, error=%(err)s, run_name='%(run_name)s', html=%(html)s)
        event = '%%s/Events/%(run_name)s/unweighted_events.lhe' %% self.run_dir
        if not os.path.exists(event):
            misc.gunzip(event)
        
        lhefile = lhe_parser.EventFile(event)
        nb_event = 0
        for event in lhe_parser.EventFile(event):
            event.check()
            nb_event+=1

        self.assertEqual(nb_event, %(nb_event)s)"""


def create_test_simd_madevent():

    text = "# WARNING THIS FILE IS AUTOGENERATED -> edit test_simd_madevent.template\n\n\n"
    text += open(pjoin(curr_dir, 'test_simd_madevent.template'),'r').read()

    for filename in sorted(os.listdir(pjoin(curr_dir, 'simple_cross_check'))):
        
        opt = {}
        opt['name'] = filename
        opt['cmd'] = open(pjoin(curr_dir, 'simple_cross_check',filename)).read()
        opt['doc'] = "\n".join([line[5:] for line in opt['cmd'].split('\n') if line.startswith('#title')])

        text += template_runtest % opt

        checks = [line.split() for line in opt['cmd'].split('\n') if line.startswith('#check')]
                  
        for i, check in enumerate(checks):
            _, name, cross, err, nb_event = check
            opt['run_name'] = name
            opt['cross'] = cross
            opt['err'] = err
            opt['nb_event'] = nb_event
            opt['html'] = 'True' if i==0 else 'False'
        
            text += template_onecheck % opt

    open(pjoin(curr_dir, 'test_simd_madevent.py'), 'w').write(text)

template_one_cicd="""
  %(name)s:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      
      # Runs a set of commands using the runners shell
      - name: test one of the test testIO_AcceptanceProcOutputIOTests
        run: |
            cd $GITHUB_WORKSPACE
            cd MG5aMC/mg5amcnlo/
            cp input/.mg5_configuration_default.txt input/mg5_configuration.txt
            cp Template/LO/Source/.make_opts Template/LO/Source/make_opts
            if [ -f tests/cudacpp_acceptance_tests ]; then echo 'ERROR! tests/cudacpp_acceptance_tests already exists'; exit 1; fi # should never happen
            ln -sf ../../MG5aMC_PLUGIN/CUDACPP_OUTPUT/acceptance_tests tests/cudacpp_acceptance_tests # workaround for 'relative position not supported'
            ./tests/test_manager.py -p./tests/cudacpp_acceptance_tests/ test_%(name)s 
            rm -f tests/cudacpp_acceptance_tests
"""

def create_cicd():

    text = "# WARNING THIS FILE IS AUTOGENERATED -> edit test_simd_madevent.template\n\n\n"
    text += open(pjoin(curr_dir, 'madgraph_launch.template'),'r').read()
 
    for filename in sorted(os.listdir(pjoin(curr_dir, 'simple_cross_check'))): 
        text += template_one_cicd % {'name': filename}
    
    GITDIR =pjoin(os.path.realpath(curr_dir), os.path.pardir,os.path.pardir,os.path.pardir,os.path.pardir,os.path.pardir,os.path.pardir)
    GITDIR = os.path.realpath(GITDIR) 
    open(pjoin(GITDIR, '.github', 'workflows', 'madgraph_launch_test.yml'), 'w').write(text)


if __name__ == '__main__':
    create_test_simd_madevent()
    create_cicd()


