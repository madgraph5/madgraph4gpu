diff --git b/epochX/cudacpp/gg_tt.mad/Source/genps.inc a/epochX/cudacpp/gg_tt.mad/Source/genps.inc
index a59181c70..af7e0efbc 100644
--- b/epochX/cudacpp/gg_tt.mad/Source/genps.inc
+++ a/epochX/cudacpp/gg_tt.mad/Source/genps.inc
@@ -30,7 +30,8 @@ c*************************************************************************
 c	Parameters for helicity sums in matrixN.f
 c*************************************************************************
       REAL*8 LIMHEL
-      PARAMETER(LIMHEL=1e-8) ! ME threshold for helicity filtering
+c     PARAMETER(LIMHEL=1e-8) ! ME threshold for helicity filtering (Fortran default)
+      PARAMETER(LIMHEL=0) ! ME threshold for helicity filtering (force Fortran to mimic cudacpp, see #419)
       INTEGER MAXTRIES
       PARAMETER(MAXTRIES=25)
 C     To pass the helicity configuration chosen by the DiscreteSampler to 
diff --git b/epochX/cudacpp/gg_tt.mad/Source/vector.inc a/epochX/cudacpp/gg_tt.mad/Source/vector.inc
index a6907622e..3c1e4fdf8 100644
--- b/epochX/cudacpp/gg_tt.mad/Source/vector.inc
+++ a/epochX/cudacpp/gg_tt.mad/Source/vector.inc
@@ -20,4 +20,5 @@ C     BECAUSE IT DOES NOT GO THROUGH THE CPP PREPROCESSOR
 C     (see https://github.com/madgraph5/madgraph4gpu/issues/458).
 C     
       INTEGER VECSIZE_MEMMAX
-      PARAMETER (VECSIZE_MEMMAX=16384)
+      PARAMETER (VECSIZE_MEMMAX=16384) ! NB: 16k events per GPU grid is the minimum required to fill a V100 GPU
+c     PARAMETER (VECSIZE_MEMMAX=32) ! NB: workaround for out-of-memory on Juwels: 32 is enough for no-CUDA builds (issue #498)
diff --git b/epochX/cudacpp/gg_tt.mad/SubProcesses/makefile a/epochX/cudacpp/gg_tt.mad/SubProcesses/makefile
index 6f5e1f832..e33418342 100644
--- b/epochX/cudacpp/gg_tt.mad/SubProcesses/makefile
+++ a/epochX/cudacpp/gg_tt.mad/SubProcesses/makefile
@@ -1,6 +1,19 @@
+SHELL := /bin/bash
+
 include ../../Source/make_opts
 FFLAGS+= -w
 
+# Enable the C preprocessor https://gcc.gnu.org/onlinedocs/gfortran/Preprocessing-Options.html
+FFLAGS+= -cpp 
+
+# Enable ccache if USECCACHE=1
+ifeq ($(USECCACHE)$(shell echo $(CXX) | grep ccache),1)
+  override CXX:=ccache $(CXX)
+endif
+ifeq ($(USECCACHE)$(shell echo $(FC) | grep ccache),1)
+  override FC:=ccache $(FC)
+endif
+
 # Load additional dependencies of the bias module, if present
 ifeq (,$(wildcard ../bias_dependencies))
 BIASDEPENDENCIES =
@@ -24,7 +37,26 @@ else
     MADLOOP_LIB =
 endif
 
-LINKLIBS = $(LINK_MADLOOP_LIB) $(LINK_LOOP_LIBS) -L../../lib/ -ldhelas -ldsample -lmodel -lgeneric -lpdf -lgammaUPC -lcernlib $(llhapdf) -lbias 
+LINKLIBS = $(LINK_MADLOOP_LIB) $(LINK_LOOP_LIBS) -L$(LIBDIR) -ldhelas -ldsample -lmodel -lgeneric -lpdf -lcernlib $(llhapdf) -lbias 
+
+processid_short=$(shell basename $(CURDIR) | awk -F_ '{print $$(NF-1)"_"$$NF}')
+CUDACPP_MAKEFILE=cudacpp.mk
+# NB1 Using ":=" below instead of "=" is much faster (it only runs the subprocess once instead of many times)
+# NB2 Use '|&' in CUDACPP_BUILDDIR to avoid confusing errors about googletest #507
+# NB3 Do not add a comment inlined "CUDACPP_BUILDDIR=$(shell ...) # comment" as otherwise a trailing space is included...
+# NB4 The variables relevant to the cudacpp Makefile must be explicitly passed to $(shell...)
+CUDACPP_MAKEENV:=$(shell echo '$(.VARIABLES)' | tr " " "\n" | egrep "(USEBUILDDIR|AVX|FPTYPE|HELINL|HRDCOD)")
+###$(info CUDACPP_MAKEENV=$(CUDACPP_MAKEENV))
+###$(info $(foreach v,$(CUDACPP_MAKEENV),$(v)="$($(v))"))
+CUDACPP_BUILDDIR:=$(shell $(MAKE) $(foreach v,$(CUDACPP_MAKEENV),$(v)="$($(v))") -f $(CUDACPP_MAKEFILE) -pn |& awk '/Building/{print $$3}' | sed s/BUILDDIR=//)
+ifeq ($(CUDACPP_BUILDDIR),)
+$(error CUDACPP_BUILDDIR='$(CUDACPP_BUILDDIR)' should not be empty!)
+else
+$(info CUDACPP_BUILDDIR='$(CUDACPP_BUILDDIR)')
+endif
+CUDACPP_COMMONLIB=mg5amc_common
+CUDACPP_CXXLIB=mg5amc_$(processid_short)_cpp
+CUDACPP_CULIB=mg5amc_$(processid_short)_cuda
 
 LIBS = $(LIBDIR)libbias.$(libext) $(LIBDIR)libdhelas.$(libext) $(LIBDIR)libdsample.$(libext) $(LIBDIR)libgeneric.$(libext) $(LIBDIR)libpdf.$(libext) $(LIBDIR)libgammaUPC.$(libext) $(LIBDIR)libmodel.$(libext) $(LIBDIR)libcernlib.$(libext) $(MADLOOP_LIB) $(LOOP_LIBS)
 
@@ -43,24 +75,82 @@ ifeq ($(strip $(MATRIX_HEL)),)
 endif
 
 
-PROCESS= driver.o myamp.o genps.o unwgt.o setcuts.o get_color.o \
+PROCESS= myamp.o genps.o unwgt.o setcuts.o get_color.o \
          cuts.o cluster.o reweight.o initcluster.o addmothers.o setscales.o \
-	 idenparts.o dummy_fct.o \
-         $(patsubst %.f,%.o,$(wildcard auto_dsig*.f)) \
+	 idenparts.o dummy_fct.o
+
+DSIG=driver.o $(patsubst %.f, %.o, $(filter-out auto_dsig.f, $(wildcard auto_dsig*.f)))
+DSIG_cudacpp=driver_cudacpp.o $(patsubst %.f, %_cudacpp.o, $(filter-out auto_dsig.f, $(wildcard auto_dsig*.f)))
 
 SYMMETRY = symmetry.o idenparts.o 
 
 # Binaries
 
-$(PROG): $(PROCESS) auto_dsig.o $(LIBS) $(MATRIX)
-	$(FC) -o $(PROG) $(PROCESS) $(MATRIX) $(LINKLIBS) $(LDFLAGS) $(BIASDEPENDENCIES) -fopenmp
+LDFLAGS+=-Wl,--no-relax # avoid 'failed to convert GOTPCREL relocation' error #458
+
+ifeq (,$(wildcard fbridge.inc))
+all: $(PROG)
+else
+all: $(PROG) $(CUDACPP_BUILDDIR)/c$(PROG)_cudacpp # also builds g$(PROG)_cudacpp if $(CUDACPP_CULIB) exists (#503)
+endif
+
+ifneq ($(shell $(CXX) --version | egrep '^Intel'),)
+override OMPFLAGS = -fopenmp
+LINKLIBS += -liomp5 # see #578
+LINKLIBS += -lintlc # undefined reference to `_intel_fast_memcpy'
+else ifneq ($(shell $(CXX) --version | egrep '^clang'),)
+override OMPFLAGS = -fopenmp
+$(CUDACPP_BUILDDIR)/c$(PROG)_cudacpp: LINKLIBS += -L $(shell dirname $(shell $(CXX) -print-file-name=libc++.so)) -lomp # see #604
+###else ifneq ($(shell $(CXX) --version | egrep '^Apple clang'),)
+###override OMPFLAGS = -fopenmp # OMP is not supported yet by cudacpp for Apple clang
+else
+override OMPFLAGS = -fopenmp
+endif
+
+$(PROG): $(PROCESS) $(DSIG) auto_dsig.o $(LIBS) $(MATRIX) counters.o ompnumthreads.o
+	$(FC) -o $(PROG) $(PROCESS) $(DSIG) auto_dsig.o $(MATRIX) $(LINKLIBS) $(BIASDEPENDENCIES) $(OMPFLAGS) counters.o ompnumthreads.o $(LDFLAGS)
+
+$(LIBS): .libs
+
+.libs: ../../Cards/param_card.dat ../../Cards/run_card.dat
+	cd ../../Source; make
+	touch $@
+
+ifneq (,$(wildcard fbridge.inc))
+$(CUDACPP_BUILDDIR)/.cudacpplibs:
+	$(MAKE) -f $(CUDACPP_MAKEFILE)
+	touch $@
+endif
+
+# On Linux, set rpath to LIBDIR to make it unnecessary to use LD_LIBRARY_PATH
+# Use relative paths with respect to the executables ($ORIGIN on Linux)
+# On Darwin, building libraries with absolute paths in LIBDIR makes this unnecessary
+ifeq ($(UNAME_S),Darwin)
+  override LIBFLAGSRPATH =
+else ifeq ($(USEBUILDDIR),1)
+  override LIBFLAGSRPATH = -Wl,-rpath,'$$ORIGIN/../$(LIBDIR)/$(CUDACPP_BUILDDIR)'
+else
+  override LIBFLAGSRPATH = -Wl,-rpath,'$$ORIGIN/$(LIBDIR)'
+endif
+
+# Also builds g$(PROG)_cudacpp if $(CUDACPP_CULIB) exists (improved patch for cpp-only builds #503)
+$(CUDACPP_BUILDDIR)/c$(PROG)_cudacpp: $(PROCESS) $(DSIG_cudacpp) auto_dsig.o $(LIBS) $(MATRIX) counters.o ompnumthreads.o $(CUDACPP_BUILDDIR)/.cudacpplibs
+	$(FC) -o $(CUDACPP_BUILDDIR)/c$(PROG)_cudacpp $(PROCESS) $(DSIG_cudacpp) auto_dsig.o $(MATRIX) $(LINKLIBS) $(BIASDEPENDENCIES) $(OMPFLAGS) counters.o ompnumthreads.o -L$(LIBDIR)/$(CUDACPP_BUILDDIR) -l$(CUDACPP_COMMONLIB) -l$(CUDACPP_CXXLIB) $(LIBFLAGSRPATH) $(LDFLAGS)
+	if [ -f $(LIBDIR)/$(CUDACPP_BUILDDIR)/lib$(CUDACPP_CULIB).* ]; then $(FC) -o $(CUDACPP_BUILDDIR)/g$(PROG)_cudacpp $(PROCESS) $(DSIG_cudacpp) auto_dsig.o $(MATRIX) $(LINKLIBS) $(BIASDEPENDENCIES) $(OMPFLAGS) counters.o ompnumthreads.o -L$(LIBDIR)/$(CUDACPP_BUILDDIR) -l$(CUDACPP_COMMONLIB) -l$(CUDACPP_CULIB) $(LIBFLAGSRPATH) $(LDFLAGS); fi
+
+counters.o: counters.cc timer.h
+	$(CXX) -std=c++11 -Wall -Wshadow -Wextra -c $< -o $@
+
+ompnumthreads.o: ompnumthreads.cc ompnumthreads.h
+	$(CXX) -I. -std=c++11 -Wall -Wshadow -Wextra $(OMPFLAGS) -c $< -o $@
 
 $(PROG)_forhel: $(PROCESS) auto_dsig.o $(LIBS) $(MATRIX_HEL)
-	$(FC) -o $(PROG)_forhel $(PROCESS) $(MATRIX_HEL) $(LINKLIBS) $(LDFLAGS) $(BIASDEPENDENCIES) -fopenmp
+	$(FC) -o $(PROG)_forhel $(PROCESS) $(MATRIX_HEL) $(LINKLIBS) $(LDFLAGS) $(BIASDEPENDENCIES) $(OMPFLAGS)
 
 gensym: $(SYMMETRY) configs.inc $(LIBS)
-	$(FC) -o gensym $(SYMMETRY) -L../../lib/ $(LINKLIBS) $(LDFLAGS)
+	$(FC) -o gensym $(SYMMETRY) -L$(LIBDIR) $(LINKLIBS) $(LDFLAGS)
 
+ifeq (,$(wildcard fbridge.inc))
 $(LIBDIR)libmodel.$(libext): ../../Cards/param_card.dat
 	cd ../../Source/MODEL; make
 
@@ -72,12 +162,15 @@ $(LIBDIR)libpdf.$(libext):
 
 $(LIBDIR)libgammaUPC.$(libext):
 	cd ../../Source/PDF/gammaUPC; make
+endif
 
 # Add source so that the compiler finds the DiscreteSampler module.
 $(MATRIX): %.o: %.f
 	$(FC) $(FFLAGS) $(MATRIX_FLAG) -c $< -I../../Source/ -I../../Source/PDF/gammaUPC
 %.o: %.f
 	$(FC) $(FFLAGS) -c $< -I../../Source/ -I../../Source/PDF/gammaUPC
+%_cudacpp.o: %.f
+	$(FC) $(FFLAGS) -c -DMG5AMC_MEEXPORTER_CUDACPP $< -I../../Source/ $(OMPFLAGS) -o $@
 
 # Dependencies
 
@@ -97,5 +190,71 @@ unwgt.o: genps.inc nexternal.inc symswap.inc cluster.inc run.inc message.inc \
 	 run_config.inc
 initcluster.o: message.inc
 
+# Extra dependencies on discretesampler.mod
+
+auto_dsig.o: .libs
+driver.o: .libs
+driver_cudacpp.o: .libs
+$(MATRIX): .libs
+genps.o: .libs
+
+# Cudacpp avxall targets
+
+ifneq (,$(wildcard fbridge.inc))
+
+UNAME_P := $(shell uname -p)
+ifeq ($(UNAME_P),ppc64le)
+avxall: avxnone avxsse4
+else ifeq ($(UNAME_P),arm)
+avxall: avxnone avxsse4
+else
+avxall: avxnone avxsse4 avxavx2 avx512y avx512z
+endif
+
+avxnone: $(PROG) $(DSIG_cudacpp)
+	@echo
+	$(MAKE) USEBUILDDIR=1 AVX=none
+
+avxsse4: $(PROG) $(DSIG_cudacpp)
+	@echo
+	$(MAKE) USEBUILDDIR=1 AVX=sse4
+
+avxavx2: $(PROG) $(DSIG_cudacpp)
+	@echo
+	$(MAKE) USEBUILDDIR=1 AVX=avx2
+
+avx512y: $(PROG) $(DSIG_cudacpp)
+	@echo
+	$(MAKE) USEBUILDDIR=1 AVX=512y
+
+avx512z: $(PROG) $(DSIG_cudacpp)
+	@echo
+	$(MAKE) USEBUILDDIR=1 AVX=512z
+
+endif
+
+# Clean
+
 clean:
-	$(RM) *.o gensym madevent madevent_forhel
+ifeq (,$(wildcard fbridge.inc))
+	$(RM) *.o gensym $(PROG) $(PROG)_forhel
+else
+	$(RM) *.o gensym $(PROG) $(PROG)_forhel $(CUDACPP_BUILDDIR)/*$(PROG)_cudacpp
+endif
+
+cleanall:
+	make clean
+	make -C ../../Source clean
+	rm -rf $(LIBDIR)libbias.$(libext)
+ifneq (,$(wildcard fbridge.inc))
+	$(MAKE) -f $(CUDACPP_MAKEFILE) cleanall
+	rm -f $(CUDACPP_BUILDDIR)/.cudacpplibs
+endif
+	rm -f ../../Source/*.mod ../../Source/*/*.mod
+	rm -f .libs
+
+ifneq (,$(wildcard fbridge.inc))
+# Target: clean the builds as well as the googletest installation
+distclean: cleanall
+	$(MAKE) -f $(CUDACPP_MAKEFILE) distclean
+endif
diff --git a/epochX/cudacpp/gg_tt.mad/SubProcesses/symmetry.f b/epochX/cudacpp/gg_tt.mad/SubProcesses/symmetry.f
index 351706c55..23c2da942 100644
--- a/epochX/cudacpp/gg_tt.mad/SubProcesses/symmetry.f
+++ b/epochX/cudacpp/gg_tt.mad/SubProcesses/symmetry.f
@@ -38,6 +38,7 @@ c
 c
 c     Global
 c
+      include 'vector.inc'
       include 'coupl.inc'
       logical gridpack
       common/to_gridpack/gridpack
@@ -322,6 +323,7 @@ c
 c
 c     Global
 c
+      include 'vector.inc'
       include 'coupl.inc'                     !Mass and width info
       double precision stot
       common/to_stot/stot
@@ -459,6 +461,7 @@ c
       common/to_bwcutoff/bwcutoff
       double precision stot
       common/to_stot/stot
+      include 'vector.inc'
       include 'coupl.inc'                     !Mass and width info
 
 c-----
diff --git a/epochX/cudacpp/gg_tt.mad/bin/internal/gen_ximprove.py b/epochX/cudacpp/gg_tt.mad/bin/internal/gen_ximprove.py
index 7d91ea6a1..4a312d473 100755
--- a/epochX/cudacpp/gg_tt.mad/bin/internal/gen_ximprove.py
+++ b/epochX/cudacpp/gg_tt.mad/bin/internal/gen_ximprove.py
@@ -914,7 +914,9 @@ For offline investigation, the problematic discarded events are stored in:
     def write_parameter_file(self, path, options):
         """ """
         
-        template ="""         %(event)s         %(maxiter)s           %(miniter)s      !Number of events and max and min iterations
+        template ="""  %(bridge_mode)s     ! bridge mode for compute accelerator mode
+  %(vector_size)s     ! vector width for parallel execution 
+  %(event)s         %(maxiter)s           %(miniter)s      !Number of events and max and min iterations
   %(accuracy)s    !Accuracy
   %(gridmode)s       !Grid Adjustment 0=none, 2=adjust
   1       !Suppress Amplitude 1=yes
@@ -936,6 +938,8 @@ For offline investigation, the problematic discarded events are stored in:
                    'accuracy': self.cmd.opts['accuracy'],
                    'helicity': run_card['nhel_survey'] if 'nhel_survey' in run_card \
                                 else run_card['nhel'],
+                   'bridge_mode': run_card['bridge_mode'] if 'bridge_mode' in run_card else 0,
+                   'vector_size': run_card['vector_size'] if 'vector_size' in run_card else 1,
                    'gridmode': 2,
                    'channel': ''
                    }
diff --git a/epochX/cudacpp/gg_tt.mad/Cards/run_card.dat b/epochX/cudacpp/gg_tt.mad/Cards/run_card.dat
index af32b29dd..dc8bd8932 100644
--- a/epochX/cudacpp/gg_tt.mad/Cards/run_card.dat
+++ b/epochX/cudacpp/gg_tt.mad/Cards/run_card.dat
@@ -139,3 +139,10 @@
 #
 systematics = systematics_program ! none, systematics [python], SysCalc [depreceted, C++]
 ['--mur=0.5,1,2', '--muf=0.5,1,2', '--pdf=errorset'] = systematics_arguments ! see: https://cp3.irmp.ucl.ac.be/projects/madgraph/wiki/Systematics#Systematicspythonmodule
+#
+#*********************************************************************
+# settings for the C++/GPU acceleration                              *
+#*********************************************************************
+1 = exec_mode             ! modes are fortran=0, cpp=1, cuda=2, both=-1, bothdebug=-2
+1 = bridge_mode           ! modes are fortran=0, cpp/gpu=1, both=-1, bothdebug=-2
+32 = vector_size          ! set the number of parallel executions
diff --git a/epochX/cudacpp/gg_tt.mad/SubProcesses/makefile b/epochX/cudacpp/gg_tt.mad/SubProcesses/makefile
index e33418342..d156445e3 100644
--- a/epochX/cudacpp/gg_tt.mad/SubProcesses/makefile
+++ b/epochX/cudacpp/gg_tt.mad/SubProcesses/makefile
@@ -133,6 +133,19 @@ else
   override LIBFLAGSRPATH = -Wl,-rpath,'$$ORIGIN/$(LIBDIR)'
 endif
 
+.PHONY: madeventfortran madeventcuda madeventcpp
+
+madeventfortran: $(PROG)
+
+madeventcpp: $(CUDACPP_BUILDDIR)/c$(PROG)_cudacpp
+	rm -f $(CUDACPP_BUILDDIR)/$(PROG)
+	cd $(CUDACPP_BUILDDIR); ln -s c$(PROG)_cudacpp madevent
+
+madeventcuda: $(CUDACPP_BUILDDIR)/c$(PROG)_cudacpp
+	rm -f $(CUDACPP_BUILDDIR)/$(PROG)
+	cd $(CUDACPP_BUILDDIR); ln -s g$(PROG)_cudacpp madevent
+
+
 # Also builds g$(PROG)_cudacpp if $(CUDACPP_CULIB) exists (improved patch for cpp-only builds #503)
 $(CUDACPP_BUILDDIR)/c$(PROG)_cudacpp: $(PROCESS) $(DSIG_cudacpp) auto_dsig.o $(LIBS) $(MATRIX) counters.o ompnumthreads.o $(CUDACPP_BUILDDIR)/.cudacpplibs
        $(FC) -o $(CUDACPP_BUILDDIR)/c$(PROG)_cudacpp $(PROCESS) $(DSIG_cudacpp) auto_dsig.o $(MATRIX) $(LINKLIBS) $(BIASDEPENDENCIES) $(OMPFLAGS) counters.o ompnumthreads.o -L$(LIBDIR)/$(CUDACPP_BUILDDIR) -l$(CUDACPP_COMMONLIB) -l$(CUDACPP_CXXLIB) $(LIBFLAGSRPATH) $(LDFLAGS)
diff --git a/epochX/cudacpp/gg_tt.mad/bin/internal/gen_ximprove.py b/epochX/cudacpp/gg_tt.mad/bin/internal/gen_ximprove.py
index 398fac798..deda76917 100755
--- a/epochX/cudacpp/gg_tt.mad/bin/internal/gen_ximprove.py
+++ b/epochX/cudacpp/gg_tt.mad/bin/internal/gen_ximprove.py
@@ -367,8 +367,20 @@ class gensym(object):
                         done = True
                 if not done:
                     raise Exception('Parsing error in gensym: %s' % stdout)
-                     
-            self.cmd.compile(['madevent'], cwd=Pdir)
+
+            exec_mode = 0
+            if 'exec_mode' in self.run_card:
+                exec_mode = self.run_card['exec_mode']
+
+            if exec_mode == 0:
+                self.cmd.compile(['madeventfortran'], cwd=Pdir)
+            elif exec_mode == 1:
+                self.cmd.compile(['madeventcpp'], cwd=Pdir)
+            elif exec_mode == 2:
+                self.cmd.compile(['madeventcuda'], cwd=Pdir)
+            else:
+                self.cmd.compile(['all'], cwd=Pdir)
+
             if to_submit:
                 self.submit_to_cluster(job_list)
                 job_list = {}
diff --git a/epochX/cudacpp/gg_tt.mad/bin/internal/madevent_interface.py b/epochX/cudacpp/gg_tt.mad/bin/internal/madevent_interface.py
index eecfd3249..9a308cc60 100755
--- a/epochX/cudacpp/gg_tt.mad/bin/internal/madevent_interface.py
+++ b/epochX/cudacpp/gg_tt.mad/bin/internal/madevent_interface.py
@@ -3615,8 +3615,20 @@ Beware that this can be dangerous for local multicore runs.""")
                 logger.info('    %s ' % subdir)
     
                 if os.path.exists(pjoin(Pdir, 'ajob1')):
+
+                    exec_mode = 0
+                    if 'exec_mode' in self.run_card:
+                        exec_mode = self.run_card['exec_mode']
+
+                    if exec_mode == 0:
+                        self.compile(['madeventfortran'], cwd=Pdir)
+                    elif exec_mode == 1:
+                        self.compile(['madeventcpp'], cwd=Pdir)
+                    elif exec_mode == 2:
+                        self.compile(['madeventcuda'], cwd=Pdir)
+                    else:
+                        self.compile(['all'], cwd=Pdir)
+
-                    self.compile(['madevent'], cwd=Pdir)
-                    
                     alljobs = misc.glob('ajob*', Pdir)
                     
                     #remove associated results.dat (ensure to not mix with all data)

