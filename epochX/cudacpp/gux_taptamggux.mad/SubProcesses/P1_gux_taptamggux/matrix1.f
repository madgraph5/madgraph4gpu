      SUBROUTINE SMATRIX1(P, RHEL, RCOL, CHANNEL, IVEC, ANS, IHEL,
     $  ICOL)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.6.0, 2024-09-30
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     MadGraph5_aMC@NLO for Madevent Version
C     
C     Returns amplitude squared -- no average over initial
C      state/symmetry factor
C     and helicities
C     for the point in phase space P(0:3,NEXTERNAL)
C     
C     Process: g u~ > ta+ ta- g g u~ WEIGHTED<=7 @1
C     
      USE DISCRETESAMPLER
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INCLUDE 'genps.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INCLUDE '../../Source/vector.inc'  ! defines VECSIZE_MEMMAX
      INCLUDE 'run.inc'
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=128)
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=108)
      INTEGER    NDIAGS
      PARAMETER (NDIAGS=100)
      INTEGER    THEL
      PARAMETER (THEL=2*NCOMB)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL),ANS
      DOUBLE PRECISION RHEL  ! random number for selecting helicity
      DOUBLE PRECISION RCOL  ! random number for selecting helicity
      INTEGER CHANNEL  ! channel to keep for the multi-channel
      INTEGER IVEC  ! for using the correct coupling
C     
C     output argument
C     
      INTEGER IHEL, ICOL
C     
C     global (due to reading writting) 
C     
      LOGICAL GOODHEL(NCOMB, MAXSPROC)
      INTEGER NTRY(MAXSPROC)
      COMMON/BLOCK_GOODHEL/NTRY,GOODHEL

C     
C     LOCAL VARIABLES 
C     
      INTEGER CONFSUB(MAXSPROC,LMAXCONFIGS)
      INCLUDE 'config_subproc_map.inc'
      INTEGER NHEL(NEXTERNAL,NCOMB)
      INTEGER ISHEL
      REAL*8 T,MATRIX1
      REAL*8 R,SUMHEL,TS(NCOMB)
      INTEGER I,IDEN
      INTEGER JC(NEXTERNAL),II
      REAL*8 HWGT, XTOT, XTRY, XREJ, XR, YFRAC(0:NCOMB)
      INTEGER NGOOD
      INTEGER J, JJ
      INTEGER NB_FAIL
      SAVE NB_FAIL
      DATA NB_FAIL /0/
      DOUBLE PRECISION GET_CHANNEL_CUT
      EXTERNAL GET_CHANNEL_CUT
C
      INTEGER NGOODHEL ! -1 if not yet retrieved and printed
      SAVE NGOODHEL
      DATA NGOODHEL/-1/
C     
C     This is just to temporarily store the reference grid for
C      helicity of the DiscreteSampler so as to obtain its number of
C      entries with ref_helicity_grid%n_tot_entries
      TYPE(SAMPLEDDIMENSION) REF_HELICITY_GRID
C     
C     GLOBAL VARIABLES
C     
      LOGICAL INIT_MODE
      COMMON /TO_DETERMINE_ZERO_HEL/INIT_MODE
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)


      INTEGER NB_SPIN_STATE_IN(2)
      COMMON /NB_HEL_STATE/ NB_SPIN_STATE_IN

      INTEGER IMIRROR, IPROC
      COMMON/TO_MIRROR/ IMIRROR,IPROC

C     included vi run.inc    
C     double precision tmin_for_channel	
C     integer sde_strat ! 1 means standard single diagram enhancement
C      strategy,
C     2 means approximation by the	denominator of the propagator
C     common/TO_CHANNEL_STRAT/tmin_for_channel,	sde_strat

      REAL*8 POL(2)
      COMMON/TO_POLARIZATION/ POL

      INTEGER          ISUM_HEL
      LOGICAL                    MULTI_CHANNEL
      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
      DATA XTRY, XREJ /0,0/
      DATA NGOOD /0/
      DATA ISHEL/0/
      SAVE YFRAC
      DATA (NHEL(I,   1),I=1,7) /-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,   2),I=1,7) /-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,   3),I=1,7) /-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,   4),I=1,7) /-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,   5),I=1,7) /-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,   6),I=1,7) /-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,   7),I=1,7) /-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,   8),I=1,7) /-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,   9),I=1,7) /-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  10),I=1,7) /-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  11),I=1,7) /-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  12),I=1,7) /-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  13),I=1,7) /-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  14),I=1,7) /-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  15),I=1,7) /-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  16),I=1,7) /-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  17),I=1,7) /-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,  18),I=1,7) /-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,  19),I=1,7) /-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,  20),I=1,7) /-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,  21),I=1,7) /-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,  22),I=1,7) /-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,  23),I=1,7) /-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  24),I=1,7) /-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  25),I=1,7) /-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  26),I=1,7) /-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  27),I=1,7) /-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  28),I=1,7) /-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  29),I=1,7) /-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  30),I=1,7) /-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  31),I=1,7) /-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  32),I=1,7) /-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  33),I=1,7) /-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  34),I=1,7) /-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  35),I=1,7) /-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  36),I=1,7) /-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  37),I=1,7) /-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  38),I=1,7) /-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  39),I=1,7) /-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  40),I=1,7) /-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  41),I=1,7) /-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  42),I=1,7) /-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  43),I=1,7) /-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  44),I=1,7) /-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  45),I=1,7) /-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  46),I=1,7) /-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  47),I=1,7) /-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  48),I=1,7) /-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  49),I=1,7) /-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,  50),I=1,7) /-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,  51),I=1,7) /-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,  52),I=1,7) /-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,  53),I=1,7) /-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,  54),I=1,7) /-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,  55),I=1,7) /-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  56),I=1,7) /-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  57),I=1,7) /-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  58),I=1,7) /-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  59),I=1,7) /-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  60),I=1,7) /-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  61),I=1,7) /-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  62),I=1,7) /-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  63),I=1,7) /-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  64),I=1,7) /-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  65),I=1,7) / 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  66),I=1,7) / 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  67),I=1,7) / 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  68),I=1,7) / 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  69),I=1,7) / 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  70),I=1,7) / 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  71),I=1,7) / 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  72),I=1,7) / 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  73),I=1,7) / 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  74),I=1,7) / 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  75),I=1,7) / 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  76),I=1,7) / 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  77),I=1,7) / 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  78),I=1,7) / 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  79),I=1,7) / 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  80),I=1,7) / 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  81),I=1,7) / 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,  82),I=1,7) / 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,  83),I=1,7) / 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,  84),I=1,7) / 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,  85),I=1,7) / 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,  86),I=1,7) / 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,  87),I=1,7) / 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  88),I=1,7) / 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  89),I=1,7) / 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  90),I=1,7) / 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  91),I=1,7) / 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  92),I=1,7) / 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  93),I=1,7) / 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  94),I=1,7) / 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  95),I=1,7) / 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  96),I=1,7) / 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  97),I=1,7) / 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  98),I=1,7) / 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  99),I=1,7) / 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 100),I=1,7) / 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 101),I=1,7) / 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 102),I=1,7) / 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 103),I=1,7) / 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 104),I=1,7) / 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 105),I=1,7) / 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 106),I=1,7) / 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 107),I=1,7) / 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 108),I=1,7) / 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 109),I=1,7) / 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 110),I=1,7) / 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 111),I=1,7) / 1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 112),I=1,7) / 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 113),I=1,7) / 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 114),I=1,7) / 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 115),I=1,7) / 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 116),I=1,7) / 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 117),I=1,7) / 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 118),I=1,7) / 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 119),I=1,7) / 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 120),I=1,7) / 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 121),I=1,7) / 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 122),I=1,7) / 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 123),I=1,7) / 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 124),I=1,7) / 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 125),I=1,7) / 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 126),I=1,7) / 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 127),I=1,7) / 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 128),I=1,7) / 1, 1,-1, 1, 1, 1,-1/
      DATA IDEN/192/

C     To be able to control when the matrix<i> subroutine can add
C      entries to the grid for the MC over helicity configuration
      LOGICAL ALLOW_HELICITY_GRID_ENTRIES
      COMMON/TO_ALLOW_HELICITY_GRID_ENTRIES/ALLOW_HELICITY_GRID_ENTRIES

C     ----------
C     BEGIN CODE
C     ----------

      NTRY(1)=NTRY(1)+1
      DO I=1,NEXTERNAL
        JC(I) = +1
      ENDDO

      IF (MULTI_CHANNEL) THEN
        DO I=1,NDIAGS
          AMP2(I)=0D0
        ENDDO
      ENDIF
      JAMP2(0)=6
      DO I=1,INT(JAMP2(0))
        JAMP2(I)=0D0
      ENDDO
      ANS = 0D0
      DO I=1,NCOMB
        TS(I)=0D0
      ENDDO

C     If the helicity grid status is 0, this means that it is not yet
C      initialized.
C     If HEL_PICKED==-1, this means that calls to other matrix<i>
C      where in initialization mode as well for the helicity.
      IF ((ISHEL.EQ.0.AND.ISUM_HEL.EQ.0)
     $ .OR.(DS_GET_DIM_STATUS('Helicity').EQ.0).OR.(HEL_PICKED.EQ.-1))
     $  THEN
        DO I=1,NCOMB
          IF (GOODHEL(I,1) .OR. NTRY(1).LE.MAXTRIES.OR.(ISUM_HEL.NE.0))
     $      THEN
            T=MATRIX1(P ,NHEL(1,I),JC(1),I,AMP2, JAMP2, IVEC)

C           handling only one beam polarization here. Second beam can
C            be handle via the pdf.
            IF(POL(2).NE.1D0.AND.NHEL(2,I).EQ.INT(SIGN(1D0,POL(2))))
     $        THEN
              T=T*ABS(POL(2))
            ELSE IF(POL(2).NE.1D0)THEN
              T=T*(2D0-ABS(POL(2)))
            ENDIF
            IF (ISUM_HEL.NE.0.AND.DS_GET_DIM_STATUS('Helicity')
     $       .EQ.0.AND.ALLOW_HELICITY_GRID_ENTRIES) THEN
              CALL DS_ADD_ENTRY('Helicity',I,T)
            ENDIF
            ANS=ANS+DABS(T)
            TS(I)=T
          ENDIF
        ENDDO
        IF(NTRY(1).EQ.(MAXTRIES+1).AND.DS_GET_DIM_STATUS('Helicity')
     $   .NE.-1) THEN
          CALL RESET_CUMULATIVE_VARIABLE()  ! avoid biais of the initialization
        ENDIF
        IF (ISUM_HEL.NE.0) THEN
C         We set HEL_PICKED to -1 here so that later on, the call to
C          DS_add_point in dsample.f does not add anything to the grid
C          since it was already done here.
          HEL_PICKED = -1
C         For safety, hardset the helicity sampling jacobian to 0.0d0
C          to make sure it is not .
          HEL_JACOBIAN   = 1.0D0
C         We don't want to re-update the helicity grid if it was
C          already updated by another matrix<i>, so we make sure that
C          the reference grid is empty.
          REF_HELICITY_GRID = DS_GET_DIMENSION(REF_GRID,'Helicity')
          IF((DS_GET_DIM_STATUS('Helicity').EQ.1)
     $     .AND.(REF_HELICITY_GRID%N_TOT_ENTRIES.EQ.0)) THEN
C           If we finished the initialization we can update the grid
C            so as to start sampling over it.
C           However the grid will now be filled by dsample with
C            different kind of weights (including pdf, flux, etc...)
C            so by setting the grid_mode of the reference grid to
C            'initialization' we make sure it will be overwritten (as
C            opposed to 'combined') by the running grid at the next
C            update.
            CALL DS_UPDATE_GRID('Helicity')
            CALL DS_SET_GRID_MODE('Helicity','init')
          ENDIF
        ELSE
          IF(NTRY(1).LE.MAXTRIES)THEN
            DO I=1,NCOMB
              IF(INIT_MODE) THEN
                IF (DABS(TS(I)).GT.ANS*LIMHEL/NCOMB) THEN
                  PRINT *, 'Matrix Element/Good Helicity: 1 ', I,
     $              'IMIRROR', IMIRROR
                ENDIF
              ELSE IF (.NOT.GOODHEL(I,1) .AND. (DABS(TS(I)).GT.ANS
     $         *LIMHEL/NCOMB)) THEN
                GOODHEL(I,1)=.TRUE.
                NGOOD = NGOOD +1
                PRINT *,'Added good helicity ',I, 'for process 1',TS(I)
     $           *NCOMB/ANS,' in event ',NTRY(1)
              ENDIF
            ENDDO
          ENDIF
          IF(NTRY(1).EQ.MAXTRIES)THEN
            ISHEL=MIN(ISUM_HEL,NGOOD)
C           Print the number of good helicities
            IF (NGOODHEL.EQ.-1) THEN
              NGOODHEL=0
              DO I=1,NCOMB
                IF (GOODHEL(I,1)) THEN
                  NGOODHEL=NGOODHEL+1
                ENDIF
              END DO
              WRITE (6,*) 'NGOODHEL =', NGOODHEL
              WRITE (6,*) 'NCOMB =', NCOMB
            ENDIF
          ENDIF
        ENDIF
      ELSE IF (.NOT.INIT_MODE) THEN  ! random helicity 
C       The helicity configuration was chosen already by genps and put
C        in a common block defined in genps.inc.
        I = HEL_PICKED

        T=MATRIX1(P ,NHEL(1,I),JC(1),I,AMP2, JAMP2, IVEC)


C       handling only one beam polarization here. Second beam can be
C        handle via the pdf.
        IF(POL(2).NE.1D0.AND.NHEL(2,I).EQ.INT(SIGN(1D0,POL(2)))) THEN
          T=T*ABS(POL(2))
        ELSE IF(POL(2).NE.1D0)THEN
          T=T*(2D0-ABS(POL(2)))
        ENDIF
C       Always one helicity at a time
        ANS = T
C       Include the Jacobian from helicity sampling
        ANS = ANS * HEL_JACOBIAN
        IHEL = HEL_PICKED
      ELSE
        ANS = 1D0
        RETURN
      ENDIF
      IF (ANS.NE.0D0.AND.(ISUM_HEL .NE. 1.OR.HEL_PICKED.EQ.-1)) THEN
C       CALL RANMAR(R) ! rhel passed as input
        SUMHEL=0D0
        DO I=1,NCOMB
          SUMHEL=SUMHEL+DABS(TS(I))/ANS
          IF(RHEL.LT.SUMHEL)THEN
            IHEL = I
C           Set right sign for ANS, based on sign of chosen helicity
            ANS=DSIGN(ANS,TS(I))
            GOTO 10
          ENDIF
        ENDDO
 10     CONTINUE
      ENDIF
      IF (MULTI_CHANNEL) THEN
        XTOT=0D0
        DO I=1,LMAXCONFIGS
          J = CONFSUB(1, I)
          IF (J.NE.0) THEN
            IF(SDE_STRAT.EQ.1) THEN
              AMP2(J) = AMP2(J) * GET_CHANNEL_CUT(P, I)
              XTOT=XTOT+AMP2(J)
            ELSE
              AMP2(J) = GET_CHANNEL_CUT(P, I)
              XTOT=XTOT+AMP2(J)
            ENDIF
          ENDIF
        ENDDO
        IF (XTOT.NE.0D0) THEN
          ANS=ANS*AMP2(CHANNEL)/XTOT
        ELSE IF(ANS.NE.0D0) THEN
          IF(NB_FAIL.GE.10)THEN
            WRITE(*,*) 'Problem in the multi-channeling. All amp2 are'
     $       //' zero but not the total matrix-element'

            STOP 1
          ELSE
            NB_FAIL = NB_FAIL +1
          ENDIF
        ENDIF
      ENDIF
      ANS=ANS/DBLE(IDEN)

      CALL SELECT_COLOR(RCOL, JAMP2, ICONFIG,1,  ICOL)

      END


      REAL*8 FUNCTION MATRIX1(P,NHEL,IC, IHEL,AMP2, JAMP2, IVEC)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.6.0, 2024-09-30
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: g u~ > ta+ ta- g g u~ WEIGHTED<=7 @1
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=108)
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=128)
      INCLUDE 'genps.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INTEGER    NWAVEFUNCS,     NCOLOR
      PARAMETER (NWAVEFUNCS=21, NCOLOR=6)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
      INTEGER NAMPSO, NSQAMPSO
      PARAMETER (NAMPSO=1, NSQAMPSO=1)
      LOGICAL CHOSEN_SO_CONFIGS(NSQAMPSO)
      DATA CHOSEN_SO_CONFIGS/.TRUE./
      SAVE CHOSEN_SO_CONFIGS
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
      INTEGER IHEL
      INTEGER IVEC
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,M,N
      COMPLEX*16 ZTEMP, TMP_JAMP(54)
      REAL*8 CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR,NAMPSO)
      COMPLEX*16 W(6,NWAVEFUNCS)
C     Needed for v4 models
      COMPLEX*16 DUM0,DUM1
      DATA DUM0, DUM1/(0D0, 0D0), (1D0, 0D0)/

      DOUBLE PRECISION FK_ZERO
      DOUBLE PRECISION FK_MDL_WZ
      SAVE FK_ZERO
      SAVE FK_MDL_WZ

      LOGICAL FIRST
      DATA FIRST /.TRUE./
      SAVE FIRST
C     
C     FUNCTION
C     
      INTEGER SQSOINDEX1
C     
C     GLOBAL VARIABLES
C     
      INCLUDE '../../Source/vector.inc'  ! defines VECSIZE_MEMMAX
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      INCLUDE 'coupl.inc'  ! needs VECSIZE_MEMMAX (defined in vector.inc)

      DOUBLE PRECISION SMALL_WIDTH_TREATMENT
      COMMON/NARROW_WIDTH/SMALL_WIDTH_TREATMENT

      LOGICAL INIT_MODE
      COMMON/TO_DETERMINE_ZERO_HEL/INIT_MODE

      LOGICAL ZEROAMP_1(NCOMB,NGRAPHS)
      COMMON/TO_ZEROAMP_1/ZEROAMP_1

      DOUBLE PRECISION TMIN_FOR_CHANNEL
      INTEGER SDE_STRAT  ! 1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      COMMON/TO_CHANNEL_STRAT/TMIN_FOR_CHANNEL,	SDE_STRAT

C     
C     COLOR DATA
C     
      DATA (CF(I,  1),I=  1,  6) /7.111111111111111D+00,
     $ -8.888888888888888D-01,-8.888888888888888D-01
     $ ,1.111111111111111D-01,1.111111111111111D-01,1.111111111111111D
     $ +00/
C     1 T(1,5,6,2,7)
      DATA (CF(I,  2),I=  1,  6) /-8.888888888888888D-01
     $ ,7.111111111111111D+00,1.111111111111111D-01,1.111111111111111D
     $ +00,-8.888888888888888D-01,1.111111111111111D-01/
C     1 T(1,6,5,2,7)
      DATA (CF(I,  3),I=  1,  6) /-8.888888888888888D-01
     $ ,1.111111111111111D-01,7.111111111111111D+00,
     $ -8.888888888888888D-01,1.111111111111111D+00,1.111111111111111D
     $ -01/
C     1 T(5,1,6,2,7)
      DATA (CF(I,  4),I=  1,  6) /1.111111111111111D-01
     $ ,1.111111111111111D+00,-8.888888888888888D-01
     $ ,7.111111111111111D+00,1.111111111111111D-01,
     $ -8.888888888888888D-01/
C     1 T(5,6,1,2,7)
      DATA (CF(I,  5),I=  1,  6) /1.111111111111111D-01,
     $ -8.888888888888888D-01,1.111111111111111D+00,1.111111111111111D
     $ -01,7.111111111111111D+00,-8.888888888888888D-01/
C     1 T(6,1,5,2,7)
      DATA (CF(I,  6),I=  1,  6) /1.111111111111111D+00
     $ ,1.111111111111111D-01,1.111111111111111D-01,
     $ -8.888888888888888D-01,-8.888888888888888D-01
     $ ,7.111111111111111D+00/
C     1 T(6,5,1,2,7)
C     ----------
C     BEGIN CODE
C     ----------
      IF (FIRST) THEN
        FIRST=.FALSE.
        IF(ZERO.NE.0D0) FK_ZERO = SIGN(MAX(ABS(ZERO), ABS(ZERO
     $   *SMALL_WIDTH_TREATMENT)), ZERO)
        IF(ZERO.NE.0D0) FK_ZERO = SIGN(MAX(ABS(ZERO), ABS(MDL_MTA
     $   *SMALL_WIDTH_TREATMENT)), ZERO)
        IF(MDL_WZ.NE.0D0) FK_MDL_WZ = SIGN(MAX(ABS(MDL_WZ), ABS(MDL_MZ
     $   *SMALL_WIDTH_TREATMENT)), MDL_WZ)

        IF(INIT_MODE) THEN
          ZEROAMP_1(:,:) = .TRUE.
        ENDIF
      ENDIF


      CALL VXXXXX(P(0,1),ZERO,NHEL(1),-1*IC(1),W(1,1))
      CALL OXXXXX(P(0,2),ZERO,NHEL(2),-1*IC(2),W(1,2))
      CALL IXXXXX(P(0,3),MDL_MTA,NHEL(3),-1*IC(3),W(1,3))
      CALL OXXXXX(P(0,4),MDL_MTA,NHEL(4),+1*IC(4),W(1,4))
      CALL VXXXXX(P(0,5),ZERO,NHEL(5),+1*IC(5),W(1,5))
      CALL VXXXXX(P(0,6),ZERO,NHEL(6),+1*IC(6),W(1,6))
      CALL IXXXXX(P(0,7),ZERO,NHEL(7),-1*IC(7),W(1,7))
      CALL FFV1_1(W(1,2),W(1,1),GC_11(IVEC),ZERO, FK_ZERO,W(1,8))
      CALL FFV1P0_3(W(1,3),W(1,4),GC_3,ZERO, FK_ZERO,W(1,9))
      CALL FFV1_1(W(1,8),W(1,5),GC_11(IVEC),ZERO, FK_ZERO,W(1,10))
      CALL FFV1_2(W(1,7),W(1,9),GC_2,ZERO, FK_ZERO,W(1,11))
C     Amplitude(s) for diagram number 1
      CALL FFV1_0(W(1,11),W(1,10),W(1,6),GC_11(IVEC),AMP(1))
      CALL FFV1_1(W(1,8),W(1,6),GC_11(IVEC),ZERO, FK_ZERO,W(1,12))
C     Amplitude(s) for diagram number 2
      CALL FFV1_0(W(1,11),W(1,12),W(1,5),GC_11(IVEC),AMP(2))
      CALL FFV2_4_3(W(1,3),W(1,4),GC_50,GC_59,MDL_MZ, FK_MDL_WZ,W(1,13)
     $ )
      CALL FFV2_5_2(W(1,7),W(1,13),-GC_50,GC_58,ZERO, FK_ZERO,W(1,4))
C     Amplitude(s) for diagram number 3
      CALL FFV1_0(W(1,4),W(1,10),W(1,6),GC_11(IVEC),AMP(3))
C     Amplitude(s) for diagram number 4
      CALL FFV1_0(W(1,4),W(1,12),W(1,5),GC_11(IVEC),AMP(4))
      CALL VVV1P0_1(W(1,5),W(1,6),GC_10(IVEC),ZERO, FK_ZERO,W(1,3))
      CALL FFV1_1(W(1,8),W(1,9),GC_2,ZERO, FK_ZERO,W(1,14))
C     Amplitude(s) for diagram number 5
      CALL FFV1_0(W(1,7),W(1,14),W(1,3),GC_11(IVEC),AMP(5))
      CALL FFV1_1(W(1,8),W(1,3),GC_11(IVEC),ZERO, FK_ZERO,W(1,15))
C     Amplitude(s) for diagram number 6
      CALL FFV1_0(W(1,7),W(1,15),W(1,9),GC_2,AMP(6))
      CALL FFV2_5_1(W(1,8),W(1,13),-GC_50,GC_58,ZERO, FK_ZERO,W(1,16))
C     Amplitude(s) for diagram number 7
      CALL FFV1_0(W(1,7),W(1,16),W(1,3),GC_11(IVEC),AMP(7))
C     Amplitude(s) for diagram number 8
      CALL FFV2_5_0(W(1,7),W(1,15),W(1,13),-GC_50,GC_58,AMP(8))
      CALL FFV1_2(W(1,7),W(1,5),GC_11(IVEC),ZERO, FK_ZERO,W(1,15))
C     Amplitude(s) for diagram number 9
      CALL FFV1_0(W(1,15),W(1,14),W(1,6),GC_11(IVEC),AMP(9))
C     Amplitude(s) for diagram number 10
      CALL FFV1_0(W(1,15),W(1,12),W(1,9),GC_2,AMP(10))
C     Amplitude(s) for diagram number 11
      CALL FFV1_0(W(1,15),W(1,16),W(1,6),GC_11(IVEC),AMP(11))
C     Amplitude(s) for diagram number 12
      CALL FFV2_5_0(W(1,15),W(1,12),W(1,13),-GC_50,GC_58,AMP(12))
      CALL FFV1_2(W(1,7),W(1,6),GC_11(IVEC),ZERO, FK_ZERO,W(1,12))
C     Amplitude(s) for diagram number 13
      CALL FFV1_0(W(1,12),W(1,14),W(1,5),GC_11(IVEC),AMP(13))
C     Amplitude(s) for diagram number 14
      CALL FFV1_0(W(1,12),W(1,10),W(1,9),GC_2,AMP(14))
C     Amplitude(s) for diagram number 15
      CALL FFV1_0(W(1,12),W(1,16),W(1,5),GC_11(IVEC),AMP(15))
C     Amplitude(s) for diagram number 16
      CALL FFV2_5_0(W(1,12),W(1,10),W(1,13),-GC_50,GC_58,AMP(16))
      CALL VVV1P0_1(W(1,1),W(1,5),GC_10(IVEC),ZERO, FK_ZERO,W(1,10))
      CALL FFV1_1(W(1,2),W(1,6),GC_11(IVEC),ZERO, FK_ZERO,W(1,16))
      CALL FFV1_1(W(1,16),W(1,10),GC_11(IVEC),ZERO, FK_ZERO,W(1,14))
C     Amplitude(s) for diagram number 17
      CALL FFV1_0(W(1,7),W(1,14),W(1,9),GC_2,AMP(17))
      CALL FFV1_2(W(1,7),W(1,10),GC_11(IVEC),ZERO, FK_ZERO,W(1,8))
C     Amplitude(s) for diagram number 18
      CALL FFV1_0(W(1,8),W(1,16),W(1,9),GC_2,AMP(18))
C     Amplitude(s) for diagram number 19
      CALL FFV2_5_0(W(1,7),W(1,14),W(1,13),-GC_50,GC_58,AMP(19))
C     Amplitude(s) for diagram number 20
      CALL FFV2_5_0(W(1,8),W(1,16),W(1,13),-GC_50,GC_58,AMP(20))
      CALL FFV1_1(W(1,2),W(1,10),GC_11(IVEC),ZERO, FK_ZERO,W(1,14))
C     Amplitude(s) for diagram number 21
      CALL FFV1_0(W(1,11),W(1,14),W(1,6),GC_11(IVEC),AMP(21))
      CALL VVV1P0_1(W(1,10),W(1,6),GC_10(IVEC),ZERO, FK_ZERO,W(1,17))
      CALL FFV1_1(W(1,2),W(1,9),GC_2,ZERO, FK_ZERO,W(1,18))
C     Amplitude(s) for diagram number 22
      CALL FFV1_0(W(1,7),W(1,18),W(1,17),GC_11(IVEC),AMP(22))
C     Amplitude(s) for diagram number 23
      CALL FFV1_0(W(1,11),W(1,2),W(1,17),GC_11(IVEC),AMP(23))
C     Amplitude(s) for diagram number 24
      CALL FFV1_0(W(1,8),W(1,18),W(1,6),GC_11(IVEC),AMP(24))
C     Amplitude(s) for diagram number 25
      CALL FFV1_0(W(1,4),W(1,14),W(1,6),GC_11(IVEC),AMP(25))
      CALL FFV2_5_1(W(1,2),W(1,13),-GC_50,GC_58,ZERO, FK_ZERO,W(1,19))
C     Amplitude(s) for diagram number 26
      CALL FFV1_0(W(1,7),W(1,19),W(1,17),GC_11(IVEC),AMP(26))
C     Amplitude(s) for diagram number 27
      CALL FFV1_0(W(1,4),W(1,2),W(1,17),GC_11(IVEC),AMP(27))
C     Amplitude(s) for diagram number 28
      CALL FFV1_0(W(1,8),W(1,19),W(1,6),GC_11(IVEC),AMP(28))
C     Amplitude(s) for diagram number 29
      CALL FFV1_0(W(1,12),W(1,14),W(1,9),GC_2,AMP(29))
      CALL FFV1_2(W(1,12),W(1,10),GC_11(IVEC),ZERO, FK_ZERO,W(1,8))
C     Amplitude(s) for diagram number 30
      CALL FFV1_0(W(1,8),W(1,2),W(1,9),GC_2,AMP(30))
C     Amplitude(s) for diagram number 31
      CALL FFV2_5_0(W(1,12),W(1,14),W(1,13),-GC_50,GC_58,AMP(31))
C     Amplitude(s) for diagram number 32
      CALL FFV2_5_0(W(1,8),W(1,2),W(1,13),-GC_50,GC_58,AMP(32))
      CALL VVV1P0_1(W(1,1),W(1,6),GC_10(IVEC),ZERO, FK_ZERO,W(1,8))
      CALL FFV1_1(W(1,2),W(1,5),GC_11(IVEC),ZERO, FK_ZERO,W(1,14))
      CALL FFV1_1(W(1,14),W(1,8),GC_11(IVEC),ZERO, FK_ZERO,W(1,10))
C     Amplitude(s) for diagram number 33
      CALL FFV1_0(W(1,7),W(1,10),W(1,9),GC_2,AMP(33))
      CALL FFV1_2(W(1,7),W(1,8),GC_11(IVEC),ZERO, FK_ZERO,W(1,17))
C     Amplitude(s) for diagram number 34
      CALL FFV1_0(W(1,17),W(1,14),W(1,9),GC_2,AMP(34))
C     Amplitude(s) for diagram number 35
      CALL FFV2_5_0(W(1,7),W(1,10),W(1,13),-GC_50,GC_58,AMP(35))
C     Amplitude(s) for diagram number 36
      CALL FFV2_5_0(W(1,17),W(1,14),W(1,13),-GC_50,GC_58,AMP(36))
      CALL FFV1_1(W(1,2),W(1,8),GC_11(IVEC),ZERO, FK_ZERO,W(1,10))
C     Amplitude(s) for diagram number 37
      CALL FFV1_0(W(1,11),W(1,10),W(1,5),GC_11(IVEC),AMP(37))
      CALL VVV1P0_1(W(1,8),W(1,5),GC_10(IVEC),ZERO, FK_ZERO,W(1,20))
C     Amplitude(s) for diagram number 38
      CALL FFV1_0(W(1,7),W(1,18),W(1,20),GC_11(IVEC),AMP(38))
C     Amplitude(s) for diagram number 39
      CALL FFV1_0(W(1,11),W(1,2),W(1,20),GC_11(IVEC),AMP(39))
C     Amplitude(s) for diagram number 40
      CALL FFV1_0(W(1,17),W(1,18),W(1,5),GC_11(IVEC),AMP(40))
C     Amplitude(s) for diagram number 41
      CALL FFV1_0(W(1,4),W(1,10),W(1,5),GC_11(IVEC),AMP(41))
C     Amplitude(s) for diagram number 42
      CALL FFV1_0(W(1,7),W(1,19),W(1,20),GC_11(IVEC),AMP(42))
C     Amplitude(s) for diagram number 43
      CALL FFV1_0(W(1,4),W(1,2),W(1,20),GC_11(IVEC),AMP(43))
C     Amplitude(s) for diagram number 44
      CALL FFV1_0(W(1,17),W(1,19),W(1,5),GC_11(IVEC),AMP(44))
C     Amplitude(s) for diagram number 45
      CALL FFV1_0(W(1,15),W(1,10),W(1,9),GC_2,AMP(45))
      CALL FFV1_2(W(1,15),W(1,8),GC_11(IVEC),ZERO, FK_ZERO,W(1,17))
C     Amplitude(s) for diagram number 46
      CALL FFV1_0(W(1,17),W(1,2),W(1,9),GC_2,AMP(46))
C     Amplitude(s) for diagram number 47
      CALL FFV2_5_0(W(1,15),W(1,10),W(1,13),-GC_50,GC_58,AMP(47))
C     Amplitude(s) for diagram number 48
      CALL FFV2_5_0(W(1,17),W(1,2),W(1,13),-GC_50,GC_58,AMP(48))
      CALL FFV1_2(W(1,7),W(1,1),GC_11(IVEC),ZERO, FK_ZERO,W(1,17))
      CALL FFV1_2(W(1,17),W(1,9),GC_2,ZERO, FK_ZERO,W(1,10))
C     Amplitude(s) for diagram number 49
      CALL FFV1_0(W(1,10),W(1,14),W(1,6),GC_11(IVEC),AMP(49))
      CALL FFV1_2(W(1,17),W(1,6),GC_11(IVEC),ZERO, FK_ZERO,W(1,8))
C     Amplitude(s) for diagram number 50
      CALL FFV1_0(W(1,8),W(1,14),W(1,9),GC_2,AMP(50))
      CALL FFV2_5_2(W(1,17),W(1,13),-GC_50,GC_58,ZERO, FK_ZERO,W(1,20))
C     Amplitude(s) for diagram number 51
      CALL FFV1_0(W(1,20),W(1,14),W(1,6),GC_11(IVEC),AMP(51))
C     Amplitude(s) for diagram number 52
      CALL FFV2_5_0(W(1,8),W(1,14),W(1,13),-GC_50,GC_58,AMP(52))
C     Amplitude(s) for diagram number 53
      CALL FFV1_0(W(1,10),W(1,16),W(1,5),GC_11(IVEC),AMP(53))
      CALL FFV1_2(W(1,17),W(1,5),GC_11(IVEC),ZERO, FK_ZERO,W(1,21))
C     Amplitude(s) for diagram number 54
      CALL FFV1_0(W(1,21),W(1,16),W(1,9),GC_2,AMP(54))
C     Amplitude(s) for diagram number 55
      CALL FFV1_0(W(1,20),W(1,16),W(1,5),GC_11(IVEC),AMP(55))
C     Amplitude(s) for diagram number 56
      CALL FFV2_5_0(W(1,21),W(1,16),W(1,13),-GC_50,GC_58,AMP(56))
C     Amplitude(s) for diagram number 57
      CALL FFV1_0(W(1,21),W(1,18),W(1,6),GC_11(IVEC),AMP(57))
C     Amplitude(s) for diagram number 58
      CALL FFV1_0(W(1,8),W(1,18),W(1,5),GC_11(IVEC),AMP(58))
C     Amplitude(s) for diagram number 59
      CALL FFV1_0(W(1,21),W(1,19),W(1,6),GC_11(IVEC),AMP(59))
C     Amplitude(s) for diagram number 60
      CALL FFV1_0(W(1,8),W(1,19),W(1,5),GC_11(IVEC),AMP(60))
C     Amplitude(s) for diagram number 61
      CALL FFV1_0(W(1,10),W(1,2),W(1,3),GC_11(IVEC),AMP(61))
      CALL FFV1_2(W(1,17),W(1,3),GC_11(IVEC),ZERO, FK_ZERO,W(1,10))
C     Amplitude(s) for diagram number 62
      CALL FFV1_0(W(1,10),W(1,2),W(1,9),GC_2,AMP(62))
C     Amplitude(s) for diagram number 63
      CALL FFV1_0(W(1,20),W(1,2),W(1,3),GC_11(IVEC),AMP(63))
C     Amplitude(s) for diagram number 64
      CALL FFV2_5_0(W(1,10),W(1,2),W(1,13),-GC_50,GC_58,AMP(64))
      CALL FFV1_1(W(1,14),W(1,1),GC_11(IVEC),ZERO, FK_ZERO,W(1,10))
C     Amplitude(s) for diagram number 65
      CALL FFV1_0(W(1,11),W(1,10),W(1,6),GC_11(IVEC),AMP(65))
      CALL FFV1_1(W(1,14),W(1,6),GC_11(IVEC),ZERO, FK_ZERO,W(1,20))
C     Amplitude(s) for diagram number 66
      CALL FFV1_0(W(1,11),W(1,20),W(1,1),GC_11(IVEC),AMP(66))
C     Amplitude(s) for diagram number 67
      CALL FFV1_0(W(1,4),W(1,10),W(1,6),GC_11(IVEC),AMP(67))
C     Amplitude(s) for diagram number 68
      CALL FFV1_0(W(1,4),W(1,20),W(1,1),GC_11(IVEC),AMP(68))
C     Amplitude(s) for diagram number 69
      CALL FFV1_0(W(1,12),W(1,10),W(1,9),GC_2,AMP(69))
      CALL FFV1_2(W(1,12),W(1,1),GC_11(IVEC),ZERO, FK_ZERO,W(1,20))
C     Amplitude(s) for diagram number 70
      CALL FFV1_0(W(1,20),W(1,14),W(1,9),GC_2,AMP(70))
C     Amplitude(s) for diagram number 71
      CALL FFV2_5_0(W(1,12),W(1,10),W(1,13),-GC_50,GC_58,AMP(71))
C     Amplitude(s) for diagram number 72
      CALL FFV2_5_0(W(1,20),W(1,14),W(1,13),-GC_50,GC_58,AMP(72))
      CALL FFV1_1(W(1,16),W(1,1),GC_11(IVEC),ZERO, FK_ZERO,W(1,14))
C     Amplitude(s) for diagram number 73
      CALL FFV1_0(W(1,11),W(1,14),W(1,5),GC_11(IVEC),AMP(73))
      CALL FFV1_1(W(1,16),W(1,5),GC_11(IVEC),ZERO, FK_ZERO,W(1,10))
C     Amplitude(s) for diagram number 74
      CALL FFV1_0(W(1,11),W(1,10),W(1,1),GC_11(IVEC),AMP(74))
C     Amplitude(s) for diagram number 75
      CALL FFV1_0(W(1,4),W(1,14),W(1,5),GC_11(IVEC),AMP(75))
C     Amplitude(s) for diagram number 76
      CALL FFV1_0(W(1,4),W(1,10),W(1,1),GC_11(IVEC),AMP(76))
C     Amplitude(s) for diagram number 77
      CALL FFV1_0(W(1,15),W(1,14),W(1,9),GC_2,AMP(77))
      CALL FFV1_2(W(1,15),W(1,1),GC_11(IVEC),ZERO, FK_ZERO,W(1,10))
C     Amplitude(s) for diagram number 78
      CALL FFV1_0(W(1,10),W(1,16),W(1,9),GC_2,AMP(78))
C     Amplitude(s) for diagram number 79
      CALL FFV2_5_0(W(1,15),W(1,14),W(1,13),-GC_50,GC_58,AMP(79))
C     Amplitude(s) for diagram number 80
      CALL FFV2_5_0(W(1,10),W(1,16),W(1,13),-GC_50,GC_58,AMP(80))
      CALL VVV1P0_1(W(1,1),W(1,3),GC_10(IVEC),ZERO, FK_ZERO,W(1,16))
C     Amplitude(s) for diagram number 81
      CALL FFV1_0(W(1,7),W(1,18),W(1,16),GC_11(IVEC),AMP(81))
C     Amplitude(s) for diagram number 82
      CALL FFV1_0(W(1,11),W(1,2),W(1,16),GC_11(IVEC),AMP(82))
      CALL FFV1_2(W(1,7),W(1,3),GC_11(IVEC),ZERO, FK_ZERO,W(1,14))
C     Amplitude(s) for diagram number 83
      CALL FFV1_0(W(1,14),W(1,18),W(1,1),GC_11(IVEC),AMP(83))
      CALL FFV1_1(W(1,2),W(1,3),GC_11(IVEC),ZERO, FK_ZERO,W(1,17))
C     Amplitude(s) for diagram number 84
      CALL FFV1_0(W(1,11),W(1,17),W(1,1),GC_11(IVEC),AMP(84))
C     Amplitude(s) for diagram number 85
      CALL FFV1_0(W(1,7),W(1,19),W(1,16),GC_11(IVEC),AMP(85))
C     Amplitude(s) for diagram number 86
      CALL FFV1_0(W(1,4),W(1,2),W(1,16),GC_11(IVEC),AMP(86))
C     Amplitude(s) for diagram number 87
      CALL FFV1_0(W(1,14),W(1,19),W(1,1),GC_11(IVEC),AMP(87))
C     Amplitude(s) for diagram number 88
      CALL FFV1_0(W(1,4),W(1,17),W(1,1),GC_11(IVEC),AMP(88))
C     Amplitude(s) for diagram number 89
      CALL FFV1_0(W(1,10),W(1,18),W(1,6),GC_11(IVEC),AMP(89))
      CALL FFV1_2(W(1,15),W(1,6),GC_11(IVEC),ZERO, FK_ZERO,W(1,17))
C     Amplitude(s) for diagram number 90
      CALL FFV1_0(W(1,17),W(1,18),W(1,1),GC_11(IVEC),AMP(90))
C     Amplitude(s) for diagram number 91
      CALL FFV1_0(W(1,10),W(1,19),W(1,6),GC_11(IVEC),AMP(91))
C     Amplitude(s) for diagram number 92
      CALL FFV1_0(W(1,17),W(1,19),W(1,1),GC_11(IVEC),AMP(92))
C     Amplitude(s) for diagram number 93
      CALL FFV1_0(W(1,20),W(1,18),W(1,5),GC_11(IVEC),AMP(93))
      CALL FFV1_2(W(1,12),W(1,5),GC_11(IVEC),ZERO, FK_ZERO,W(1,17))
C     Amplitude(s) for diagram number 94
      CALL FFV1_0(W(1,17),W(1,18),W(1,1),GC_11(IVEC),AMP(94))
C     Amplitude(s) for diagram number 95
      CALL FFV1_0(W(1,20),W(1,19),W(1,5),GC_11(IVEC),AMP(95))
C     Amplitude(s) for diagram number 96
      CALL FFV1_0(W(1,17),W(1,19),W(1,1),GC_11(IVEC),AMP(96))
      CALL VVVV1P0_1(W(1,1),W(1,5),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,17))
      CALL VVVV3P0_1(W(1,1),W(1,5),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,19))
      CALL VVVV4P0_1(W(1,1),W(1,5),W(1,6),GC_12(IVEC),ZERO, FK_ZERO
     $ ,W(1,20))
      CALL FFV1_1(W(1,2),W(1,17),GC_11(IVEC),ZERO, FK_ZERO,W(1,6))
      CALL FFV1_1(W(1,2),W(1,19),GC_11(IVEC),ZERO, FK_ZERO,W(1,5))
      CALL FFV1_1(W(1,2),W(1,20),GC_11(IVEC),ZERO, FK_ZERO,W(1,1))
C     Amplitude(s) for diagram number 97
      CALL FFV1_0(W(1,7),W(1,6),W(1,9),GC_2,AMP(97))
      CALL FFV1_0(W(1,7),W(1,5),W(1,9),GC_2,AMP(98))
      CALL FFV1_0(W(1,7),W(1,1),W(1,9),GC_2,AMP(99))
      CALL FFV1_2(W(1,7),W(1,17),GC_11(IVEC),ZERO, FK_ZERO,W(1,18))
      CALL FFV1_2(W(1,7),W(1,19),GC_11(IVEC),ZERO, FK_ZERO,W(1,17))
      CALL FFV1_2(W(1,7),W(1,20),GC_11(IVEC),ZERO, FK_ZERO,W(1,19))
C     Amplitude(s) for diagram number 98
      CALL FFV1_0(W(1,18),W(1,2),W(1,9),GC_2,AMP(100))
      CALL FFV1_0(W(1,17),W(1,2),W(1,9),GC_2,AMP(101))
      CALL FFV1_0(W(1,19),W(1,2),W(1,9),GC_2,AMP(102))
C     Amplitude(s) for diagram number 99
      CALL FFV2_5_0(W(1,7),W(1,6),W(1,13),-GC_50,GC_58,AMP(103))
      CALL FFV2_5_0(W(1,7),W(1,5),W(1,13),-GC_50,GC_58,AMP(104))
      CALL FFV2_5_0(W(1,7),W(1,1),W(1,13),-GC_50,GC_58,AMP(105))
C     Amplitude(s) for diagram number 100
      CALL FFV2_5_0(W(1,18),W(1,2),W(1,13),-GC_50,GC_58,AMP(106))
      CALL FFV2_5_0(W(1,17),W(1,2),W(1,13),-GC_50,GC_58,AMP(107))
      CALL FFV2_5_0(W(1,19),W(1,2),W(1,13),-GC_50,GC_58,AMP(108))

      JAMP(:,:) = (0D0,0D0)
C     JAMPs contributing to orders ALL_ORDERS=1
      TMP_JAMP(12) = AMP(105) +  AMP(108)  ! used 4 times
      TMP_JAMP(11) = AMP(103) +  AMP(106)  ! used 4 times
      TMP_JAMP(10) = AMP(99) +  AMP(102)  ! used 4 times
      TMP_JAMP(9) = AMP(97) +  AMP(100)  ! used 4 times
      TMP_JAMP(8) = AMP(85) +  AMP(86)  ! used 4 times
      TMP_JAMP(7) = AMP(81) +  AMP(82)  ! used 4 times
      TMP_JAMP(6) = AMP(26) +  AMP(27)  ! used 4 times
      TMP_JAMP(5) = AMP(22) +  AMP(23)  ! used 4 times
      TMP_JAMP(4) = AMP(104) +  AMP(107)  ! used 4 times
      TMP_JAMP(3) = AMP(98) +  AMP(101)  ! used 4 times
      TMP_JAMP(2) = AMP(42) +  AMP(43)  ! used 4 times
      TMP_JAMP(1) = AMP(38) +  AMP(39)  ! used 4 times
      TMP_JAMP(18) = TMP_JAMP(12) +  TMP_JAMP(10)  ! used 4 times
      TMP_JAMP(17) = TMP_JAMP(11) +  TMP_JAMP(9)  ! used 4 times
      TMP_JAMP(16) = TMP_JAMP(8) +  TMP_JAMP(7)  ! used 4 times
      TMP_JAMP(15) = TMP_JAMP(6) +  TMP_JAMP(5)  ! used 4 times
      TMP_JAMP(14) = TMP_JAMP(4) +  TMP_JAMP(3)  ! used 4 times
      TMP_JAMP(13) = TMP_JAMP(2) +  TMP_JAMP(1)  ! used 4 times
      TMP_JAMP(21) = TMP_JAMP(18) - TMP_JAMP(15)  ! used 4 times
      TMP_JAMP(20) = TMP_JAMP(17) +  TMP_JAMP(16)  ! used 4 times
      TMP_JAMP(19) = TMP_JAMP(14) - TMP_JAMP(13)  ! used 4 times
      TMP_JAMP(42) = TMP_JAMP(21) - TMP_JAMP(20)  ! used 2 times
      TMP_JAMP(41) = TMP_JAMP(21) +  TMP_JAMP(19)  ! used 2 times
      TMP_JAMP(40) = TMP_JAMP(20) +  TMP_JAMP(19)  ! used 2 times
      TMP_JAMP(39) = AMP(84) +  AMP(88)  ! used 2 times
      TMP_JAMP(38) = AMP(63) +  AMP(64)  ! used 2 times
      TMP_JAMP(37) = AMP(61) +  AMP(62)  ! used 2 times
      TMP_JAMP(36) = AMP(24) +  AMP(28)  ! used 2 times
      TMP_JAMP(35) = AMP(19) +  AMP(20)  ! used 2 times
      TMP_JAMP(34) = AMP(17) +  AMP(18)  ! used 2 times
      TMP_JAMP(33) = AMP(47) +  AMP(48)  ! used 2 times
      TMP_JAMP(32) = AMP(45) +  AMP(46)  ! used 2 times
      TMP_JAMP(31) = AMP(37) +  AMP(41)  ! used 2 times
      TMP_JAMP(30) = AMP(40) +  AMP(44)  ! used 2 times
      TMP_JAMP(29) = AMP(35) +  AMP(36)  ! used 2 times
      TMP_JAMP(28) = AMP(33) +  AMP(34)  ! used 2 times
      TMP_JAMP(27) = AMP(31) +  AMP(32)  ! used 2 times
      TMP_JAMP(26) = AMP(29) +  AMP(30)  ! used 2 times
      TMP_JAMP(25) = AMP(21) +  AMP(25)  ! used 2 times
      TMP_JAMP(24) = AMP(83) +  AMP(87)  ! used 2 times
      TMP_JAMP(23) = AMP(7) +  AMP(8)  ! used 2 times
      TMP_JAMP(22) = AMP(5) +  AMP(6)  ! used 2 times
      TMP_JAMP(48) = TMP_JAMP(38) +  TMP_JAMP(37)  ! used 2 times
      TMP_JAMP(47) = TMP_JAMP(35) +  TMP_JAMP(34)  ! used 2 times
      TMP_JAMP(46) = TMP_JAMP(32) +  TMP_JAMP(31)  ! used 2 times
      TMP_JAMP(45) = TMP_JAMP(29) +  TMP_JAMP(28)  ! used 2 times
      TMP_JAMP(44) = TMP_JAMP(26) +  TMP_JAMP(25)  ! used 2 times
      TMP_JAMP(43) = TMP_JAMP(23) +  TMP_JAMP(22)  ! used 2 times
      TMP_JAMP(54) = TMP_JAMP(48) +  TMP_JAMP(39)  ! used 2 times
      TMP_JAMP(53) = TMP_JAMP(47) +  TMP_JAMP(36)  ! used 2 times
      TMP_JAMP(52) = TMP_JAMP(46) +  TMP_JAMP(33)  ! used 2 times
      TMP_JAMP(51) = TMP_JAMP(45) +  TMP_JAMP(30)  ! used 2 times
      TMP_JAMP(50) = TMP_JAMP(44) +  TMP_JAMP(27)  ! used 2 times
      TMP_JAMP(49) = TMP_JAMP(43) +  TMP_JAMP(24)  ! used 2 times
      JAMP(1,1) = (-1.000000000000000D+00)*AMP(1)+(-1.000000000000000D
     $ +00)*AMP(3)+(-1.000000000000000D+00)*AMP(13)+(
     $ -1.000000000000000D+00)*AMP(14)+(-1.000000000000000D+00)*AMP(15)
     $ +(-1.000000000000000D+00)*AMP(16)+(-1.000000000000000D+00)
     $ *AMP(94)+(-1.000000000000000D+00)*AMP(96)+(-1.000000000000000D
     $ +00)*TMP_JAMP(42)+((0.000000000000000D+00,1.000000000000000D+00)
     $ )*TMP_JAMP(49)+((0.000000000000000D+00,1.000000000000000D+00))
     $ *TMP_JAMP(50)
      JAMP(2,1) = (-1.000000000000000D+00)*AMP(2)+(-1.000000000000000D
     $ +00)*AMP(4)+(-1.000000000000000D+00)*AMP(9)+(
     $ -1.000000000000000D+00)*AMP(10)+(-1.000000000000000D+00)*AMP(11)
     $ +(-1.000000000000000D+00)*AMP(12)+(-1.000000000000000D+00)
     $ *AMP(90)+(-1.000000000000000D+00)*AMP(92)+(-1.000000000000000D
     $ +00)*TMP_JAMP(40)+((0.000000000000000D+00,-1.000000000000000D
     $ +00))*TMP_JAMP(49)+((0.000000000000000D+00,1.000000000000000D
     $ +00))*TMP_JAMP(52)
      JAMP(3,1) = (-1.000000000000000D+00)*AMP(65)+(
     $ -1.000000000000000D+00)*AMP(67)+(-1.000000000000000D+00)*AMP(69)
     $ +(-1.000000000000000D+00)*AMP(70)+(-1.000000000000000D+00)
     $ *AMP(71)+(-1.000000000000000D+00)*AMP(72)+(-1.000000000000000D
     $ +00)*AMP(93)+(-1.000000000000000D+00)*AMP(95)+TMP_JAMP(41)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(50)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(51)
      JAMP(4,1) = (-1.000000000000000D+00)*AMP(49)+(
     $ -1.000000000000000D+00)*AMP(50)+(-1.000000000000000D+00)*AMP(51)
     $ +(-1.000000000000000D+00)*AMP(52)+(-1.000000000000000D+00)
     $ *AMP(58)+(-1.000000000000000D+00)*AMP(60)+(-1.000000000000000D
     $ +00)*AMP(66)+(-1.000000000000000D+00)*AMP(68)+(
     $ -1.000000000000000D+00)*TMP_JAMP(40)+((0.000000000000000D+00,
     $ -1.000000000000000D+00))*TMP_JAMP(51)+((0.000000000000000D+00
     $ ,1.000000000000000D+00))*TMP_JAMP(54)
      JAMP(5,1) = (-1.000000000000000D+00)*AMP(73)+(
     $ -1.000000000000000D+00)*AMP(75)+(-1.000000000000000D+00)*AMP(77)
     $ +(-1.000000000000000D+00)*AMP(78)+(-1.000000000000000D+00)
     $ *AMP(79)+(-1.000000000000000D+00)*AMP(80)+(-1.000000000000000D
     $ +00)*AMP(89)+(-1.000000000000000D+00)*AMP(91)+TMP_JAMP(41)
     $ +((0.000000000000000D+00,-1.000000000000000D+00))*TMP_JAMP(52)
     $ +((0.000000000000000D+00,1.000000000000000D+00))*TMP_JAMP(53)
      JAMP(6,1) = (-1.000000000000000D+00)*AMP(53)+(
     $ -1.000000000000000D+00)*AMP(54)+(-1.000000000000000D+00)*AMP(55)
     $ +(-1.000000000000000D+00)*AMP(56)+(-1.000000000000000D+00)
     $ *AMP(57)+(-1.000000000000000D+00)*AMP(59)+(-1.000000000000000D
     $ +00)*AMP(74)+(-1.000000000000000D+00)*AMP(76)+(
     $ -1.000000000000000D+00)*TMP_JAMP(42)+((0.000000000000000D+00,
     $ -1.000000000000000D+00))*TMP_JAMP(53)+((0.000000000000000D+00,
     $ -1.000000000000000D+00))*TMP_JAMP(54)

      IF(INIT_MODE)THEN
        DO I=1, NGRAPHS
          IF (AMP(I).NE.0) THEN
            ZEROAMP_1(IHEL,I) = .FALSE.
          ENDIF
        ENDDO
      ENDIF

      MATRIX1 = 0.D0
      DO M = 1, NAMPSO
        DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
            ZTEMP = ZTEMP + CF(J,I)*JAMP(J,M)
          ENDDO
          DO N = 1, NAMPSO

            MATRIX1 = MATRIX1 + ZTEMP*DCONJG(JAMP(I,N))

          ENDDO
        ENDDO
      ENDDO

      IF(SDE_STRAT.EQ.1)THEN
        AMP2(1)=AMP2(1)+AMP(1)*DCONJG(AMP(1))
        AMP2(2)=AMP2(2)+AMP(2)*DCONJG(AMP(2))
        AMP2(3)=AMP2(3)+AMP(3)*DCONJG(AMP(3))
        AMP2(4)=AMP2(4)+AMP(4)*DCONJG(AMP(4))
        AMP2(5)=AMP2(5)+AMP(5)*DCONJG(AMP(5))
        AMP2(6)=AMP2(6)+AMP(6)*DCONJG(AMP(6))
        AMP2(7)=AMP2(7)+AMP(7)*DCONJG(AMP(7))
        AMP2(8)=AMP2(8)+AMP(8)*DCONJG(AMP(8))
        AMP2(9)=AMP2(9)+AMP(9)*DCONJG(AMP(9))
        AMP2(10)=AMP2(10)+AMP(10)*DCONJG(AMP(10))
        AMP2(11)=AMP2(11)+AMP(11)*DCONJG(AMP(11))
        AMP2(12)=AMP2(12)+AMP(12)*DCONJG(AMP(12))
        AMP2(13)=AMP2(13)+AMP(13)*DCONJG(AMP(13))
        AMP2(14)=AMP2(14)+AMP(14)*DCONJG(AMP(14))
        AMP2(15)=AMP2(15)+AMP(15)*DCONJG(AMP(15))
        AMP2(16)=AMP2(16)+AMP(16)*DCONJG(AMP(16))
        AMP2(17)=AMP2(17)+AMP(17)*DCONJG(AMP(17))
        AMP2(18)=AMP2(18)+AMP(18)*DCONJG(AMP(18))
        AMP2(19)=AMP2(19)+AMP(19)*DCONJG(AMP(19))
        AMP2(20)=AMP2(20)+AMP(20)*DCONJG(AMP(20))
        AMP2(21)=AMP2(21)+AMP(21)*DCONJG(AMP(21))
        AMP2(22)=AMP2(22)+AMP(22)*DCONJG(AMP(22))
        AMP2(23)=AMP2(23)+AMP(23)*DCONJG(AMP(23))
        AMP2(24)=AMP2(24)+AMP(24)*DCONJG(AMP(24))
        AMP2(25)=AMP2(25)+AMP(25)*DCONJG(AMP(25))
        AMP2(26)=AMP2(26)+AMP(26)*DCONJG(AMP(26))
        AMP2(27)=AMP2(27)+AMP(27)*DCONJG(AMP(27))
        AMP2(28)=AMP2(28)+AMP(28)*DCONJG(AMP(28))
        AMP2(29)=AMP2(29)+AMP(29)*DCONJG(AMP(29))
        AMP2(30)=AMP2(30)+AMP(30)*DCONJG(AMP(30))
        AMP2(31)=AMP2(31)+AMP(31)*DCONJG(AMP(31))
        AMP2(32)=AMP2(32)+AMP(32)*DCONJG(AMP(32))
        AMP2(33)=AMP2(33)+AMP(33)*DCONJG(AMP(33))
        AMP2(34)=AMP2(34)+AMP(34)*DCONJG(AMP(34))
        AMP2(35)=AMP2(35)+AMP(35)*DCONJG(AMP(35))
        AMP2(36)=AMP2(36)+AMP(36)*DCONJG(AMP(36))
        AMP2(37)=AMP2(37)+AMP(37)*DCONJG(AMP(37))
        AMP2(38)=AMP2(38)+AMP(38)*DCONJG(AMP(38))
        AMP2(39)=AMP2(39)+AMP(39)*DCONJG(AMP(39))
        AMP2(40)=AMP2(40)+AMP(40)*DCONJG(AMP(40))
        AMP2(41)=AMP2(41)+AMP(41)*DCONJG(AMP(41))
        AMP2(42)=AMP2(42)+AMP(42)*DCONJG(AMP(42))
        AMP2(43)=AMP2(43)+AMP(43)*DCONJG(AMP(43))
        AMP2(44)=AMP2(44)+AMP(44)*DCONJG(AMP(44))
        AMP2(45)=AMP2(45)+AMP(45)*DCONJG(AMP(45))
        AMP2(46)=AMP2(46)+AMP(46)*DCONJG(AMP(46))
        AMP2(47)=AMP2(47)+AMP(47)*DCONJG(AMP(47))
        AMP2(48)=AMP2(48)+AMP(48)*DCONJG(AMP(48))
        AMP2(49)=AMP2(49)+AMP(49)*DCONJG(AMP(49))
        AMP2(50)=AMP2(50)+AMP(50)*DCONJG(AMP(50))
        AMP2(51)=AMP2(51)+AMP(51)*DCONJG(AMP(51))
        AMP2(52)=AMP2(52)+AMP(52)*DCONJG(AMP(52))
        AMP2(53)=AMP2(53)+AMP(53)*DCONJG(AMP(53))
        AMP2(54)=AMP2(54)+AMP(54)*DCONJG(AMP(54))
        AMP2(55)=AMP2(55)+AMP(55)*DCONJG(AMP(55))
        AMP2(56)=AMP2(56)+AMP(56)*DCONJG(AMP(56))
        AMP2(57)=AMP2(57)+AMP(57)*DCONJG(AMP(57))
        AMP2(58)=AMP2(58)+AMP(58)*DCONJG(AMP(58))
        AMP2(59)=AMP2(59)+AMP(59)*DCONJG(AMP(59))
        AMP2(60)=AMP2(60)+AMP(60)*DCONJG(AMP(60))
        AMP2(61)=AMP2(61)+AMP(61)*DCONJG(AMP(61))
        AMP2(62)=AMP2(62)+AMP(62)*DCONJG(AMP(62))
        AMP2(63)=AMP2(63)+AMP(63)*DCONJG(AMP(63))
        AMP2(64)=AMP2(64)+AMP(64)*DCONJG(AMP(64))
        AMP2(65)=AMP2(65)+AMP(65)*DCONJG(AMP(65))
        AMP2(66)=AMP2(66)+AMP(66)*DCONJG(AMP(66))
        AMP2(67)=AMP2(67)+AMP(67)*DCONJG(AMP(67))
        AMP2(68)=AMP2(68)+AMP(68)*DCONJG(AMP(68))
        AMP2(69)=AMP2(69)+AMP(69)*DCONJG(AMP(69))
        AMP2(70)=AMP2(70)+AMP(70)*DCONJG(AMP(70))
        AMP2(71)=AMP2(71)+AMP(71)*DCONJG(AMP(71))
        AMP2(72)=AMP2(72)+AMP(72)*DCONJG(AMP(72))
        AMP2(73)=AMP2(73)+AMP(73)*DCONJG(AMP(73))
        AMP2(74)=AMP2(74)+AMP(74)*DCONJG(AMP(74))
        AMP2(75)=AMP2(75)+AMP(75)*DCONJG(AMP(75))
        AMP2(76)=AMP2(76)+AMP(76)*DCONJG(AMP(76))
        AMP2(77)=AMP2(77)+AMP(77)*DCONJG(AMP(77))
        AMP2(78)=AMP2(78)+AMP(78)*DCONJG(AMP(78))
        AMP2(79)=AMP2(79)+AMP(79)*DCONJG(AMP(79))
        AMP2(80)=AMP2(80)+AMP(80)*DCONJG(AMP(80))
        AMP2(81)=AMP2(81)+AMP(81)*DCONJG(AMP(81))
        AMP2(82)=AMP2(82)+AMP(82)*DCONJG(AMP(82))
        AMP2(83)=AMP2(83)+AMP(83)*DCONJG(AMP(83))
        AMP2(84)=AMP2(84)+AMP(84)*DCONJG(AMP(84))
        AMP2(85)=AMP2(85)+AMP(85)*DCONJG(AMP(85))
        AMP2(86)=AMP2(86)+AMP(86)*DCONJG(AMP(86))
        AMP2(87)=AMP2(87)+AMP(87)*DCONJG(AMP(87))
        AMP2(88)=AMP2(88)+AMP(88)*DCONJG(AMP(88))
        AMP2(89)=AMP2(89)+AMP(89)*DCONJG(AMP(89))
        AMP2(90)=AMP2(90)+AMP(90)*DCONJG(AMP(90))
        AMP2(91)=AMP2(91)+AMP(91)*DCONJG(AMP(91))
        AMP2(92)=AMP2(92)+AMP(92)*DCONJG(AMP(92))
        AMP2(93)=AMP2(93)+AMP(93)*DCONJG(AMP(93))
        AMP2(94)=AMP2(94)+AMP(94)*DCONJG(AMP(94))
        AMP2(95)=AMP2(95)+AMP(95)*DCONJG(AMP(95))
        AMP2(96)=AMP2(96)+AMP(96)*DCONJG(AMP(96))
      ENDIF

      DO I = 1, NCOLOR
        DO M = 1, NAMPSO
          DO N = 1, NAMPSO

            JAMP2(I)=JAMP2(I)+DABS(DBLE(JAMP(I,M)*DCONJG(JAMP(I,N))))

          ENDDO
        ENDDO
      ENDDO

      END

      SUBROUTINE PRINT_ZERO_AMP_1()

      IMPLICIT NONE
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=108)

      INTEGER    NCOMB
      PARAMETER (NCOMB=128)

      LOGICAL ZEROAMP_1(NCOMB, NGRAPHS)
      COMMON/TO_ZEROAMP_1/ZEROAMP_1

      INTEGER I,J
      LOGICAL ALL_FALSE

      DO I=1, NGRAPHS
        ALL_FALSE = .TRUE.
        DO J=1,NCOMB
          IF (.NOT.ZEROAMP_1(J, I)) THEN
            ALL_FALSE = .FALSE.
            EXIT
          ENDIF
        ENDDO
        IF (ALL_FALSE) THEN
          WRITE(*,*) 'Amplitude/ZEROAMP:', 1, I
        ELSE
          DO J=1,NCOMB
            IF (ZEROAMP_1(J, I)) THEN
              WRITE(*,*) 'HEL/ZEROAMP:', 1, J  , I
            ENDIF
          ENDDO
        ENDIF
      ENDDO

      RETURN
      END

C     Set of functions to handle the array indices of the split orders


      INTEGER FUNCTION SQSOINDEX1(ORDERINDEXA, ORDERINDEXB)
C     
C     This functions plays the role of the interference matrix. It can
C      be hardcoded or 
C     made more elegant using hashtables if its execution speed ever
C      becomes a relevant
C     factor. From two split order indices, it return the
C      corresponding index in the squared 
C     order canonical ordering.
C     
C     CONSTANTS
C     

      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=1, NSQUAREDSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERINDEXA, ORDERINDEXB
C     
C     LOCAL VARIABLES
C     
      INTEGER I, SQORDERS(NSO)
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      DATA (AMPSPLITORDERS(  1,I),I=  1,  1) /    1/
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     FUNCTION
C     
      INTEGER SOINDEX_FOR_SQUARED_ORDERS1
C     
C     BEGIN CODE
C     
      DO I=1,NSO
        SQORDERS(I)=AMPSPLITORDERS(ORDERINDEXA,I)
     $   +AMPSPLITORDERS(ORDERINDEXB,I)
      ENDDO
      SQSOINDEX1=SOINDEX_FOR_SQUARED_ORDERS1(SQORDERS)
      END

      INTEGER FUNCTION SOINDEX_FOR_SQUARED_ORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the squared
C      split orders list passed in argument which corresponds to the
C      values of the following list of couplings (and in this order).
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO, NAMPSO
      PARAMETER (NSO=1, NSQSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER SQSPLITORDERS(NSQSO,NSO)
      DATA (SQSPLITORDERS(  1,I),I=  1,  1) /    2/
      COMMON/SQPLITORDERS1/SQPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NSQSO
        DO J=1,NSO
          IF (ORDERS(J).NE.SQSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_SQUARED_ORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping in function'
      WRITE(*,*) 'SOINDEX_FOR_SQUARED_ORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

      SUBROUTINE GET_NSQSO_BORN1(NSQSO)
C     
C     Simple subroutine returning the number of squared split order
C     contributions returned when calling smatrix_split_orders 
C     

      INTEGER    NSQUAREDSO
      PARAMETER  (NSQUAREDSO=1)

      INTEGER NSQSO

      NSQSO=NSQUAREDSO

      END

C     This is the inverse subroutine of SOINDEX_FOR_SQUARED_ORDERS.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_SQUARED_ORDERS_FOR_SOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the squared
C      split order index in argument. Order values correspond to
C      following list of couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO
      PARAMETER (NSO=1, NSQSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER SQPLITORDERS(NSQSO,NSO)
      COMMON/SQPLITORDERS1/SQPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.GT.0.AND.SOINDEX.LE.NSQSO) THEN
        DO I=1,NSO
          ORDERS(I) =  SQPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function'
     $ //' GET_SQUARED_ORDERS_FOR_SOINDEX1'
      WRITE(*,*) 'Could not find squared orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This is the inverse subroutine of getting amplitude SO orders.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_ORDERS_FOR_AMPSOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the split order
C      index in argument. Order values correspond to following list of
C      couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.GT.0.AND.SOINDEX.LE.NAMPSO) THEN
        DO I=1,NSO
          ORDERS(I) =  AMPSPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function GET_ORDERS_FOR_AMPSOINDEX1'
      WRITE(*,*) 'Could not find amplitude split orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This function is not directly useful, but included for
C      completeness
      INTEGER FUNCTION SOINDEX_FOR_AMPORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the
C      amplitude split orders passed in argument which correspond to
C      the values of the following list of couplings (and in this
C      order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NAMPSO
        DO J=1,NSO
          IF (ORDERS(J).NE.AMPSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_AMPORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping function SOINDEX_FOR_AMPORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

