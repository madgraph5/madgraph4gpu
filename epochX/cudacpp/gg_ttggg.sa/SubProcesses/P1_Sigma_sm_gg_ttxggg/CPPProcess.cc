// Copyright (C) 2010 The MadGraph5_aMC@NLO development team and contributors.
// Created by: J. Alwall (Oct 2010) for the MG5aMC CPP backend.
//==========================================================================
// Copyright (C) 2020-2024 CERN and UCLouvain.
// Licensed under the GNU Lesser General Public License (version 3 or later).
// Modified by: S. Roiser (Feb 2020) for the MG5aMC CUDACPP plugin.
// Further modified by: S. Hageboeck, O. Mattelaer, S. Roiser, J. Teig, A. Valassi, Z. Wettersten (2020-2024) for the MG5aMC CUDACPP plugin.
//==========================================================================
// This file has been automatically generated for CUDA/C++ standalone by
// MadGraph5_aMC@NLO v. 3.6.0_lo_vect, 2024-06-17
// By the MadGraph5_aMC@NLO Development Team
// Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
//==========================================================================

#include "CPPProcess.h"

#include "mgOnGpuConfig.h"

#include "HelAmps_sm.h"
#include "MemoryAccessAmplitudes.h"
#include "MemoryAccessChannelIds.h"
#include "MemoryAccessCouplings.h"
#include "MemoryAccessCouplingsFixed.h"
#include "MemoryAccessGs.h"
#include "MemoryAccessMatrixElements.h"
#include "MemoryAccessMomenta.h"
#include "MemoryAccessWavefunctions.h"

#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
#include "MemoryAccessDenominators.h"
#include "MemoryAccessNumerators.h"
#include "coloramps.h"
#endif

#include <algorithm>
#include <array>
#include <cfenv>  // for feenableexcept, fegetexcept and FE_XXX
#include <cfloat> // for FLT_MIN
#include <cstring>
#include <iomanip>
#include <iostream>
#include <memory>

// Test ncu metrics for CUDA thread divergence
#undef MGONGPU_TEST_DIVERGENCE
//#define MGONGPU_TEST_DIVERGENCE 1

//--------------------------------------------------------------------------

// Enable FPE traps (see #701, #733, #831 - except on MacOS where feenableexcept is not defined #730)
// [NB1: Fortran default is -ffpe-trap=none, i.e. FPE traps are not enabled, https://gcc.gnu.org/onlinedocs/gfortran/Debugging-Options.html]
// [NB2: Fortran default is -ffpe-summary=invalid,zero,overflow,underflow,denormal, i.e. warn at the end on STOP]
inline void
fpeEnable()
{
  static bool first = true; // FIXME: quick and dirty hack to do this only once (can be removed when separate C++/CUDA builds are implemented)
  if( !first ) return;
  first = false;
#ifndef __APPLE__ // on MacOS feenableexcept is not defined #730
  //int fpes = fegetexcept();
  //std::cout << "fpeEnable: analyse fegetexcept()=" << fpes << std::endl;
  //std::cout << "fpeEnable:     FE_DIVBYZERO is" << ( ( fpes & FE_DIVBYZERO ) ? " " : " NOT " ) << "enabled" << std::endl;
  //std::cout << "fpeEnable:     FE_INEXACT is" << ( ( fpes & FE_INEXACT ) ? " " : " NOT " ) << "enabled" << std::endl;
  //std::cout << "fpeEnable:     FE_INVALID is" << ( ( fpes & FE_INVALID ) ? " " : " NOT " ) << "enabled" << std::endl;
  //std::cout << "fpeEnable:     FE_OVERFLOW is" << ( ( fpes & FE_OVERFLOW ) ? " " : " NOT " ) << "enabled" << std::endl;
  //std::cout << "fpeEnable:     FE_UNDERFLOW is" << ( ( fpes & FE_UNDERFLOW ) ? " " : " NOT " ) << "enabled" << std::endl;
  constexpr bool enableFPE = true; // this is hardcoded and no longer controlled by getenv( "CUDACPP_RUNTIME_ENABLEFPE" )
  if( enableFPE )
  {
    std::cout << "INFO: The following Floating Point Exceptions will cause SIGFPE program aborts: FE_DIVBYZERO, FE_INVALID, FE_OVERFLOW" << std::endl;
    feenableexcept( FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW ); // new strategy #831 (do not enable FE_UNDERFLOW)
    //fpes = fegetexcept();
    //std::cout << "fpeEnable: analyse fegetexcept()=" << fpes << std::endl;
    //std::cout << "fpeEnable:     FE_DIVBYZERO is" << ( ( fpes & FE_DIVBYZERO ) ? " " : " NOT " ) << "enabled" << std::endl;
    //std::cout << "fpeEnable:     FE_INEXACT is" << ( ( fpes & FE_INEXACT ) ? " " : " NOT " ) << "enabled" << std::endl;
    //std::cout << "fpeEnable:     FE_INVALID is" << ( ( fpes & FE_INVALID ) ? " " : " NOT " ) << "enabled" << std::endl;
    //std::cout << "fpeEnable:     FE_OVERFLOW is" << ( ( fpes & FE_OVERFLOW ) ? " " : " NOT " ) << "enabled" << std::endl;
    //std::cout << "fpeEnable:     FE_UNDERFLOW is" << ( ( fpes & FE_UNDERFLOW ) ? " " : " NOT " ) << "enabled" << std::endl;
  }
  else
  {
    //std::cout << "INFO: Do not enable SIGFPE traps for Floating Point Exceptions" << std::endl;
  }
#else
  //std::cout << "INFO: Keep default SIGFPE settings because feenableexcept is not available on MacOS" << std::endl;
#endif
}

//==========================================================================
// Class member functions for calculating the matrix elements for
// Process: g g > t t~ g g g WEIGHTED<=5 @1

#ifdef MGONGPUCPP_GPUIMPL
namespace mg5amcGpu
#else
namespace mg5amcCpu
#endif
{
  constexpr int nw6 = CPPProcess::nw6;     // dimensions of each wavefunction (HELAS KEK 91-11): e.g. 6 for e+ e- -> mu+ mu- (fermions and vectors)
  constexpr int npar = CPPProcess::npar;   // #particles in total (external = initial + final): e.g. 4 for e+ e- -> mu+ mu-
  constexpr int ncomb = CPPProcess::ncomb; // #helicity combinations: e.g. 16 for e+ e- -> mu+ mu- (2**4 = fermion spin up/down ** npar)

  // [NB: I am currently unable to get the right value of nwf in CPPProcess.h - will hardcode it in CPPProcess.cc instead (#644)]
  //using CPPProcess::nwf; // #wavefunctions = #external (npar) + #internal: e.g. 5 for e+ e- -> mu+ mu- (1 internal is gamma or Z)

  using Parameters_sm_dependentCouplings::ndcoup;   // #couplings that vary event by event (depend on running alphas QCD)
  using Parameters_sm_independentCouplings::nicoup; // #couplings that are fixed for all events (do not depend on running alphas QCD)

  // The number of colors
  constexpr int ncolor = 120;

  // The number of SIMD vectors of events processed by calculate_wavefunction
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
  constexpr int nParity = 2;
#else
  constexpr int nParity = 1;
#endif

  // Physics parameters (masses, coupling, etc...)
  // For CUDA performance, hardcoded constexpr's would be better: fewer registers and a tiny throughput increase
  // However, physics parameters are user-defined through card files: use CUDA constant memory instead (issue #39)
  // [NB if hardcoded parameters are used, it's better to define them here to avoid silent shadowing (issue #263)]
  constexpr int nIPD = 2; // SM independent parameters used in this CPPProcess.cc (FIXME? rename as sm_IndepParam?)
  // Note: in the Python code generator, nIPD == nparam, while nIPC <= nicoup, because (see #823)
  // nIPC may vary from one P*/CPPProcess.cc to another, while nicoup is defined in src/Param.h and is common to all P*
  constexpr int nIPC = 0; // SM independent couplings used in this CPPProcess.cc (FIXME? rename as sm_IndepCoupl?)
  static_assert( nIPC <= nicoup );
  static_assert( nIPD >= 0 ); // Hack to avoid build warnings when nIPD==0 is unused
  static_assert( nIPC >= 0 ); // Hack to avoid build warnings when nIPC==0 is unused
#ifdef MGONGPU_HARDCODE_PARAM
  __device__ const fptype cIPD[nIPD] = { (fptype)Parameters_sm::mdl_MT, (fptype)Parameters_sm::mdl_WT };
  __device__ const fptype* cIPC = nullptr; // unused as nIPC=0
#else
#ifdef MGONGPUCPP_GPUIMPL
  __device__ __constant__ fptype cIPD[nIPD];
  __device__ __constant__ fptype* cIPC = nullptr; // unused as nIPC=0
#else
  static fptype cIPD[nIPD];
  static fptype* cIPC = nullptr; // unused as nIPC=0
#endif
#endif

  // AV Jan 2024 (PR #625): this ugly #define was the only way I found to avoid creating arrays[nBsm] in CPPProcess.cc if nBsm is 0
  // The problem is that nBsm is determined when generating Parameters.h, which happens after CPPProcess.cc has already been generated
  // For simplicity, keep this code hardcoded also for SM processes (a nullptr is needed as in the case nBsm == 0)
#ifdef MGONGPUCPP_NBSMINDEPPARAM_GT_0
#ifdef MGONGPU_HARDCODE_PARAM
  __device__ const double* bsmIndepParam = Parameters_sm::mdl_bsmIndepParam;
#else
#ifdef MGONGPUCPP_GPUIMPL
  __device__ __constant__ double bsmIndepParam[Parameters_sm::nBsmIndepParam];
#else
  static double bsmIndepParam[Parameters_sm::nBsmIndepParam];
#endif
#endif
#else
#ifdef MGONGPU_HARDCODE_PARAM
  __device__ const double* bsmIndepParam = nullptr;
#else
#ifdef MGONGPUCPP_GPUIMPL
  __device__ __constant__ double* bsmIndepParam = nullptr;
#else
  static double* bsmIndepParam = nullptr;
#endif
#endif
#endif

  // Helicity combinations (and filtering of "good" helicity combinations)
#ifdef MGONGPUCPP_GPUIMPL
  __device__ __constant__ short cHel[ncomb][npar];
  __device__ __constant__ int cNGoodHel;
  __device__ __constant__ int cGoodHel[ncomb];
#else
  static short cHel[ncomb][npar];
  static int cNGoodHel;
  static int cGoodHel[ncomb];
#endif

  //--------------------------------------------------------------------------

  // Evaluate |M|^2 for each subprocess
  // NB: calculate_wavefunctions ADDS |M|^2 for a given ihel to the running sum of |M|^2 over helicities for the given event(s)
  // (similarly, it also ADDS the numerator and denominator for a given ihel to their running sums over helicities)
  // In CUDA, this device function computes the ME for a single event
  // In C++, this function computes the ME for a single event "page" or SIMD vector (or for two in "mixed" precision mode, nParity=2)
  // *** NB: calculate_wavefunction accepts a SCALAR channelId because it is GUARANTEED that all events in a SIMD vector have the same channelId #898 ***
  __device__ INLINE void /* clang-format off */
  calculate_wavefunctions( int ihel,
                           const fptype* allmomenta,      // input: momenta[nevt*npar*4]
                           const fptype* allcouplings,    // input: couplings[nevt*ndcoup*2]
                           fptype* allMEs,                // output: allMEs[nevt], |M|^2 running_sum_over_helicities
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
                           const unsigned int channelId,  // input: multichannel SCALAR channelId (1 to #diagrams, 0 to disable SDE) for this event or SIMD vector
                           fptype* allNumerators,         // output: multichannel numerators[nevt], running_sum_over_helicities
                           fptype* allDenominators,       // output: multichannel denominators[nevt], running_sum_over_helicities
#endif
                           fptype_sv* jamp2_sv            // output: jamp2[nParity][ncolor][neppV] for color choice (nullptr if disabled)
#ifndef MGONGPUCPP_GPUIMPL
                           , const int ievt00             // input: first event number in current C++ event page (for CUDA, ievt depends on threadid)
#endif
                           )
  //ALWAYS_INLINE // attributes are not permitted in a function definition
  {
#ifdef MGONGPUCPP_GPUIMPL
    using namespace mg5amcGpu;
    using M_ACCESS = DeviceAccessMomenta;         // non-trivial access: buffer includes all events
    using E_ACCESS = DeviceAccessMatrixElements;  // non-trivial access: buffer includes all events
    using W_ACCESS = DeviceAccessWavefunctions;   // TRIVIAL ACCESS (no kernel splitting yet): buffer for one event
#ifndef MGONGPU_LINKER_HELAMPS
    using A_ACCESS = DeviceAccessAmplitudes;      // TRIVIAL ACCESS (no kernel splitting yet): buffer for one event
#endif
    using CD_ACCESS = DeviceAccessCouplings;      // non-trivial access (dependent couplings): buffer includes all events
    using CI_ACCESS = DeviceAccessCouplingsFixed; // TRIVIAL access (independent couplings): buffer for one event
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
    using NUM_ACCESS = DeviceAccessNumerators;    // non-trivial access: buffer includes all events
    using DEN_ACCESS = DeviceAccessDenominators;  // non-trivial access: buffer includes all events
#endif
#else
    using namespace mg5amcCpu;
    using M_ACCESS = HostAccessMomenta;         // non-trivial access: buffer includes all events
    using E_ACCESS = HostAccessMatrixElements;  // non-trivial access: buffer includes all events
    using W_ACCESS = HostAccessWavefunctions;   // TRIVIAL ACCESS (no kernel splitting yet): buffer for one event
#ifndef MGONGPU_LINKER_HELAMPS
    using A_ACCESS = HostAccessAmplitudes;      // TRIVIAL ACCESS (no kernel splitting yet): buffer for one event
#endif
    using CD_ACCESS = HostAccessCouplings;      // non-trivial access (dependent couplings): buffer includes all events
    using CI_ACCESS = HostAccessCouplingsFixed; // TRIVIAL access (independent couplings): buffer for one event
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
    using NUM_ACCESS = HostAccessNumerators;    // non-trivial access: buffer includes all events
    using DEN_ACCESS = HostAccessDenominators;  // non-trivial access: buffer includes all events
#endif
#endif /* clang-format on */
    mgDebug( 0, __FUNCTION__ );
    //bool debug = true;
#ifndef MGONGPUCPP_GPUIMPL
    //debug = ( ievt00 >= 64 && ievt00 < 80 && ihel == 3 ); // example: debug #831
    //if( debug ) printf( "calculate_wavefunctions: ievt00=%d\n", ievt00 );
#endif
    //if( debug ) printf( "calculate_wavefunctions: ihel=%d\n", ihel );

    // The variable nwf (which is specific to each P1 subdirectory, #644) is only used here
    // It is hardcoded here because various attempts to hardcode it in CPPProcess.h at generation time gave the wrong result...
    static const int nwf = 121; // #wavefunctions = #external (npar) + #internal: e.g. 5 for e+ e- -> mu+ mu- (1 internal is gamma or Z)

    // Local TEMPORARY variables for a subset of Feynman diagrams in the given CUDA event (ievt) or C++ event page (ipagV)
    // [NB these variables are reused several times (and re-initialised each time) within the same event or event page]
    // ** NB: in other words, amplitudes and wavefunctions still have TRIVIAL ACCESS: there is currently no need
    // ** NB: to have large memory structurs for wavefunctions/amplitudes in all events (no kernel splitting yet)!
    //MemoryBufferWavefunctions w_buffer[nwf]{ neppV };
    cxtype_sv w_sv[nwf][nw6]; // particle wavefunctions within Feynman diagrams (nw6 is often 6, the dimension of spin 1/2 or spin 1 particles)
    cxtype_sv amp_sv[1];      // invariant amplitude for one given Feynman diagram

    // Proof of concept for using fptype* in the interface
    fptype* w_fp[nwf];
    for( int iwf = 0; iwf < nwf; iwf++ ) w_fp[iwf] = reinterpret_cast<fptype*>( w_sv[iwf] );
    fptype* amp_fp;
    amp_fp = reinterpret_cast<fptype*>( amp_sv );

    // Local variables for the given CUDA event (ievt) or C++ event page (ipagV)
    // [jamp: sum (for one event or event page) of the invariant amplitudes for all Feynman diagrams in a given color combination]
    cxtype_sv jamp_sv[ncolor] = {}; // all zeros (NB: vector cxtype_v IS initialized to 0, but scalar cxtype is NOT, if "= {}" is missing!)

    // === Calculate wavefunctions and amplitudes for all diagrams in all processes         ===
    // === (for one event in CUDA, for one - or two in mixed mode - SIMD event pages in C++ ===
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
    // Mixed fptypes #537: float for color algebra and double elsewhere
    // Delay color algebra and ME updates (only on even pages)
    cxtype_sv jamp_sv_previous[ncolor] = {};
    fptype* MEs_previous = 0;
#endif
    for( int iParity = 0; iParity < nParity; ++iParity )
    { // START LOOP ON IPARITY
#ifndef MGONGPUCPP_GPUIMPL
      const int ievt0 = ievt00 + iParity * neppV;
#endif
      //constexpr size_t nxcoup = ndcoup + nicoup; // both dependent and independent couplings (BUG #823)
      constexpr size_t nxcoup = ndcoup + nIPC; // both dependent and independent couplings (FIX #823)
      const fptype* allCOUPs[nxcoup];
#ifdef __CUDACC__ // this must be __CUDACC__ (not MGONGPUCPP_GPUIMPL)
#pragma nv_diagnostic push
#pragma nv_diag_suppress 186 // e.g. <<warning #186-D: pointless comparison of unsigned integer with zero>>
#endif
      for( size_t idcoup = 0; idcoup < ndcoup; idcoup++ )
        allCOUPs[idcoup] = CD_ACCESS::idcoupAccessBufferConst( allcouplings, idcoup ); // dependent couplings, vary event-by-event
      //for( size_t iicoup = 0; iicoup < nicoup; iicoup++ )                             // BUG #823
      for( size_t iicoup = 0; iicoup < nIPC; iicoup++ )                                 // FIX #823
        allCOUPs[ndcoup + iicoup] = CI_ACCESS::iicoupAccessBufferConst( cIPC, iicoup ); // independent couplings, fixed for all events
#ifdef MGONGPUCPP_GPUIMPL
#ifdef __CUDACC__ // this must be __CUDACC__ (not MGONGPUCPP_GPUIMPL)
#pragma nv_diagnostic pop
#endif
      // CUDA kernels take input/output buffers with momenta/MEs for all events
      const fptype* momenta = allmomenta;
      const fptype* COUPs[nxcoup];
      for( size_t ixcoup = 0; ixcoup < nxcoup; ixcoup++ ) COUPs[ixcoup] = allCOUPs[ixcoup];
      fptype* MEs = allMEs;
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      fptype* numerators = allNumerators;
      fptype* denominators = allDenominators;
#endif
#else
      // C++ kernels take input/output buffers with momenta/MEs for one specific event (the first in the current event page)
      const fptype* momenta = M_ACCESS::ieventAccessRecordConst( allmomenta, ievt0 );
      const fptype* COUPs[nxcoup];
      for( size_t idcoup = 0; idcoup < ndcoup; idcoup++ )
        COUPs[idcoup] = CD_ACCESS::ieventAccessRecordConst( allCOUPs[idcoup], ievt0 ); // dependent couplings, vary event-by-event
      //for( size_t iicoup = 0; iicoup < nicoup; iicoup++ ) // BUG #823
      for( size_t iicoup = 0; iicoup < nIPC; iicoup++ )     // FIX #823
        COUPs[ndcoup + iicoup] = allCOUPs[ndcoup + iicoup]; // independent couplings, fixed for all events
      fptype* MEs = E_ACCESS::ieventAccessRecord( allMEs, ievt0 );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      fptype* numerators = NUM_ACCESS::ieventAccessRecord( allNumerators, ievt0 );
      fptype* denominators = DEN_ACCESS::ieventAccessRecord( allDenominators, ievt0 );
#endif
#endif

      // Reset color flows (reset jamp_sv) at the beginning of a new event or event page
      for( int i = 0; i < ncolor; i++ ) { jamp_sv[i] = cxzero_sv(); }

#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Numerators and denominators for the current event (CUDA) or SIMD event page (C++)
      fptype_sv& numerators_sv = NUM_ACCESS::kernelAccess( numerators );
      fptype_sv& denominators_sv = DEN_ACCESS::kernelAccess( denominators );
#endif

      // *** DIAGRAM 1 OF 1240 ***

      // Wavefunction(s) for diagram number 1
      vxxxxx<M_ACCESS, W_ACCESS>( momenta, 0., cHel[ihel][0], -1, w_fp[0], 0 );

      vxxxxx<M_ACCESS, W_ACCESS>( momenta, 0., cHel[ihel][1], -1, w_fp[1], 1 );

      oxxxxx<M_ACCESS, W_ACCESS>( momenta, cIPD[0], cHel[ihel][2], +1, w_fp[2], 2 );

      ixxxxx<M_ACCESS, W_ACCESS>( momenta, cIPD[0], cHel[ihel][3], -1, w_fp[3], 3 );

      vxxxxx<M_ACCESS, W_ACCESS>( momenta, 0., cHel[ihel][4], +1, w_fp[4], 4 );

      vxxxxx<M_ACCESS, W_ACCESS>( momenta, 0., cHel[ihel][5], +1, w_fp[5], 5 );

      vxxxxx<M_ACCESS, W_ACCESS>( momenta, 0., cHel[ihel][6], +1, w_fp[6], 6 );

      helas_CD_VVV1P0_1( w_fp[0], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[7] );
      helas_CD_FFV1P0_3( w_fp[3], w_fp[2], COUPs[1], 1.0, 0., 0., w_fp[8] );
      helas_CD_VVV1P0_1( w_fp[7], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[9] );
      helas_CD_VVV1P0_1( w_fp[8], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[10] );

      // Amplitude(s) for diagram number 1
      helas_CD_VVV1_0( w_fp[9], w_fp[10], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 2 OF 1240 ***

      // Wavefunction(s) for diagram number 2
      helas_CD_VVV1P0_1( w_fp[8], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[11] );

      // Amplitude(s) for diagram number 2
      helas_CD_VVV1_0( w_fp[9], w_fp[11], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 3 OF 1240 ***

      // Wavefunction(s) for diagram number 3
      // (none)

      // Amplitude(s) for diagram number 3
      helas_CD_VVVV1_0( w_fp[8], w_fp[5], w_fp[6], w_fp[9], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[8], w_fp[5], w_fp[6], w_fp[9], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[8], w_fp[5], w_fp[6], w_fp[9], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[1] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 4 OF 1240 ***

      // Wavefunction(s) for diagram number 4
      helas_CD_VVV1P0_1( w_fp[7], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[12] );
      helas_CD_VVV1P0_1( w_fp[8], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[13] );

      // Amplitude(s) for diagram number 4
      helas_CD_VVV1_0( w_fp[12], w_fp[13], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 5 OF 1240 ***

      // Wavefunction(s) for diagram number 5
      // (none)

      // Amplitude(s) for diagram number 5
      helas_CD_VVV1_0( w_fp[12], w_fp[11], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 6 OF 1240 ***

      // Wavefunction(s) for diagram number 6
      // (none)

      // Amplitude(s) for diagram number 6
      helas_CD_VVVV1_0( w_fp[8], w_fp[4], w_fp[6], w_fp[12], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[8], w_fp[4], w_fp[6], w_fp[12], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[8], w_fp[4], w_fp[6], w_fp[12], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];

      // *** DIAGRAM 7 OF 1240 ***

      // Wavefunction(s) for diagram number 7
      helas_CD_VVV1P0_1( w_fp[7], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[14] );

      // Amplitude(s) for diagram number 7
      helas_CD_VVV1_0( w_fp[14], w_fp[13], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];

      // *** DIAGRAM 8 OF 1240 ***

      // Wavefunction(s) for diagram number 8
      // (none)

      // Amplitude(s) for diagram number 8
      helas_CD_VVV1_0( w_fp[14], w_fp[10], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];

      // *** DIAGRAM 9 OF 1240 ***

      // Wavefunction(s) for diagram number 9
      // (none)

      // Amplitude(s) for diagram number 9
      helas_CD_VVVV1_0( w_fp[8], w_fp[4], w_fp[5], w_fp[14], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[8], w_fp[4], w_fp[5], w_fp[14], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[8], w_fp[4], w_fp[5], w_fp[14], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];

      // *** DIAGRAM 10 OF 1240 ***

      // Wavefunction(s) for diagram number 10
      helas_CD_VVVV1P0_1( w_fp[7], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[15] );
      helas_CD_VVVV3P0_1( w_fp[7], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[16] );
      helas_CD_VVVV4P0_1( w_fp[7], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[17] );

      // Amplitude(s) for diagram number 10
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[15], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[17], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 11 OF 1240 ***

      // Wavefunction(s) for diagram number 11
      helas_CD_VVVV1P0_1( w_fp[7], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[18] );
      helas_CD_VVVV3P0_1( w_fp[7], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[19] );
      helas_CD_VVVV4P0_1( w_fp[7], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[20] );

      // Amplitude(s) for diagram number 11
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[18], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[19], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[20], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 12 OF 1240 ***

      // Wavefunction(s) for diagram number 12
      helas_CD_VVVV1P0_1( w_fp[7], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[21] );
      helas_CD_VVVV3P0_1( w_fp[7], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[22] );
      helas_CD_VVVV4P0_1( w_fp[7], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[23] );

      // Amplitude(s) for diagram number 12
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[21], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[22], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[23], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 13 OF 1240 ***

      // Wavefunction(s) for diagram number 13
      helas_CD_VVV1P0_1( w_fp[4], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[24] );

      // Amplitude(s) for diagram number 13
      helas_CD_VVVV1_0( w_fp[7], w_fp[8], w_fp[24], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[7], w_fp[8], w_fp[24], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[7], w_fp[8], w_fp[24], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];

      // *** DIAGRAM 14 OF 1240 ***

      // Wavefunction(s) for diagram number 14
      helas_CD_VVV1P0_1( w_fp[7], w_fp[8], COUPs[0], 1.0, 0., 0., w_fp[25] );

      // Amplitude(s) for diagram number 14
      helas_CD_VVV1_0( w_fp[24], w_fp[6], w_fp[25], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 15 OF 1240 ***

      // Wavefunction(s) for diagram number 15
      helas_CD_VVV1P0_1( w_fp[7], w_fp[24], COUPs[0], 1.0, 0., 0., w_fp[26] );

      // Amplitude(s) for diagram number 15
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[26], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 16 OF 1240 ***

      // Wavefunction(s) for diagram number 16
      // (none)

      // Amplitude(s) for diagram number 16
      helas_CD_VVV1_0( w_fp[8], w_fp[24], w_fp[14], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];

      // *** DIAGRAM 17 OF 1240 ***

      // Wavefunction(s) for diagram number 17
      helas_CD_VVV1P0_1( w_fp[4], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[27] );

      // Amplitude(s) for diagram number 17
      helas_CD_VVVV1_0( w_fp[7], w_fp[8], w_fp[27], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[7], w_fp[8], w_fp[27], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[7], w_fp[8], w_fp[27], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];

      // *** DIAGRAM 18 OF 1240 ***

      // Wavefunction(s) for diagram number 18
      // (none)

      // Amplitude(s) for diagram number 18
      helas_CD_VVV1_0( w_fp[27], w_fp[5], w_fp[25], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];

      // *** DIAGRAM 19 OF 1240 ***

      // Wavefunction(s) for diagram number 19
      helas_CD_VVV1P0_1( w_fp[7], w_fp[27], COUPs[0], 1.0, 0., 0., w_fp[28] );

      // Amplitude(s) for diagram number 19
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[28], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];

      // *** DIAGRAM 20 OF 1240 ***

      // Wavefunction(s) for diagram number 20
      // (none)

      // Amplitude(s) for diagram number 20
      helas_CD_VVV1_0( w_fp[8], w_fp[27], w_fp[12], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];

      // *** DIAGRAM 21 OF 1240 ***

      // Wavefunction(s) for diagram number 21
      helas_CD_VVV1P0_1( w_fp[5], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[29] );

      // Amplitude(s) for diagram number 21
      helas_CD_VVVV1_0( w_fp[7], w_fp[8], w_fp[4], w_fp[29], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[7], w_fp[8], w_fp[4], w_fp[29], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[7], w_fp[8], w_fp[4], w_fp[29], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];

      // *** DIAGRAM 22 OF 1240 ***

      // Wavefunction(s) for diagram number 22
      // (none)

      // Amplitude(s) for diagram number 22
      helas_CD_VVV1_0( w_fp[4], w_fp[29], w_fp[25], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 23 OF 1240 ***

      // Wavefunction(s) for diagram number 23
      // (none)

      // Amplitude(s) for diagram number 23
      helas_CD_VVV1_0( w_fp[8], w_fp[29], w_fp[9], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 24 OF 1240 ***

      // Wavefunction(s) for diagram number 24
      helas_CD_VVV1P0_1( w_fp[7], w_fp[29], COUPs[0], 1.0, 0., 0., w_fp[25] );

      // Amplitude(s) for diagram number 24
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[25], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];

      // *** DIAGRAM 25 OF 1240 ***

      // Wavefunction(s) for diagram number 25
      helas_CD_VVVV1P0_1( w_fp[4], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[30] );
      helas_CD_VVVV3P0_1( w_fp[4], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[31] );
      helas_CD_VVVV4P0_1( w_fp[4], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[32] );

      // Amplitude(s) for diagram number 25
      helas_CD_VVV1_0( w_fp[7], w_fp[8], w_fp[30], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[7], w_fp[8], w_fp[31], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[7], w_fp[8], w_fp[32], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 26 OF 1240 ***

      // Wavefunction(s) for diagram number 26
      helas_CD_FFV1_1( w_fp[2], w_fp[4], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[33] );
      helas_CD_FFV1_2( w_fp[3], w_fp[7], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[34] );
      helas_CD_FFV1_1( w_fp[33], w_fp[5], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[35] );

      // Amplitude(s) for diagram number 26
      helas_CD_FFV1_0( w_fp[34], w_fp[35], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 27 OF 1240 ***

      // Wavefunction(s) for diagram number 27
      helas_CD_FFV1_1( w_fp[33], w_fp[6], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[36] );

      // Amplitude(s) for diagram number 27
      helas_CD_FFV1_0( w_fp[34], w_fp[36], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 28 OF 1240 ***

      // Wavefunction(s) for diagram number 28
      helas_CD_FFV1P0_3( w_fp[3], w_fp[33], COUPs[1], 1.0, 0., 0., w_fp[37] );

      // Amplitude(s) for diagram number 28
      helas_CD_VVV1_0( w_fp[12], w_fp[37], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 29 OF 1240 ***

      // Wavefunction(s) for diagram number 29
      // (none)

      // Amplitude(s) for diagram number 29
      helas_CD_FFV1_0( w_fp[3], w_fp[36], w_fp[12], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];

      // *** DIAGRAM 30 OF 1240 ***

      // Wavefunction(s) for diagram number 30
      // (none)

      // Amplitude(s) for diagram number 30
      helas_CD_VVV1_0( w_fp[14], w_fp[37], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 31 OF 1240 ***

      // Wavefunction(s) for diagram number 31
      // (none)

      // Amplitude(s) for diagram number 31
      helas_CD_FFV1_0( w_fp[3], w_fp[35], w_fp[14], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];

      // *** DIAGRAM 32 OF 1240 ***

      // Wavefunction(s) for diagram number 32
      // (none)

      // Amplitude(s) for diagram number 32
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[22], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[23], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 33 OF 1240 ***

      // Wavefunction(s) for diagram number 33
      helas_CD_FFV1_2( w_fp[3], w_fp[5], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[38] );
      helas_CD_FFV1_1( w_fp[33], w_fp[7], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[39] );

      // Amplitude(s) for diagram number 33
      helas_CD_FFV1_0( w_fp[38], w_fp[39], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 34 OF 1240 ***

      // Wavefunction(s) for diagram number 34
      helas_CD_FFV1_2( w_fp[38], w_fp[7], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[40] );

      // Amplitude(s) for diagram number 34
      helas_CD_FFV1_0( w_fp[40], w_fp[33], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 35 OF 1240 ***

      // Wavefunction(s) for diagram number 35
      // (none)

      // Amplitude(s) for diagram number 35
      helas_CD_FFV1_0( w_fp[38], w_fp[33], w_fp[14], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];

      // *** DIAGRAM 36 OF 1240 ***

      // Wavefunction(s) for diagram number 36
      helas_CD_FFV1_2( w_fp[3], w_fp[6], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[41] );

      // Amplitude(s) for diagram number 36
      helas_CD_FFV1_0( w_fp[41], w_fp[39], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 37 OF 1240 ***

      // Wavefunction(s) for diagram number 37
      helas_CD_FFV1_2( w_fp[41], w_fp[7], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[42] );

      // Amplitude(s) for diagram number 37
      helas_CD_FFV1_0( w_fp[42], w_fp[33], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 38 OF 1240 ***

      // Wavefunction(s) for diagram number 38
      // (none)

      // Amplitude(s) for diagram number 38
      helas_CD_FFV1_0( w_fp[41], w_fp[33], w_fp[12], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];

      // *** DIAGRAM 39 OF 1240 ***

      // Wavefunction(s) for diagram number 39
      // (none)

      // Amplitude(s) for diagram number 39
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];

      // *** DIAGRAM 40 OF 1240 ***

      // Wavefunction(s) for diagram number 40
      // (none)

      // Amplitude(s) for diagram number 40
      helas_CD_FFV1_0( w_fp[34], w_fp[33], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];

      // *** DIAGRAM 41 OF 1240 ***

      // Wavefunction(s) for diagram number 41
      // (none)

      // Amplitude(s) for diagram number 41
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[25], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 42 OF 1240 ***

      // Wavefunction(s) for diagram number 42
      helas_CD_FFV1_1( w_fp[2], w_fp[5], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[39] );
      helas_CD_FFV1_1( w_fp[39], w_fp[4], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[43] );

      // Amplitude(s) for diagram number 42
      helas_CD_FFV1_0( w_fp[34], w_fp[43], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 43 OF 1240 ***

      // Wavefunction(s) for diagram number 43
      helas_CD_FFV1_1( w_fp[39], w_fp[6], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[44] );

      // Amplitude(s) for diagram number 43
      helas_CD_FFV1_0( w_fp[34], w_fp[44], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 44 OF 1240 ***

      // Wavefunction(s) for diagram number 44
      helas_CD_FFV1P0_3( w_fp[3], w_fp[39], COUPs[1], 1.0, 0., 0., w_fp[45] );

      // Amplitude(s) for diagram number 44
      helas_CD_VVV1_0( w_fp[9], w_fp[45], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 45 OF 1240 ***

      // Wavefunction(s) for diagram number 45
      // (none)

      // Amplitude(s) for diagram number 45
      helas_CD_FFV1_0( w_fp[3], w_fp[44], w_fp[9], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];

      // *** DIAGRAM 46 OF 1240 ***

      // Wavefunction(s) for diagram number 46
      // (none)

      // Amplitude(s) for diagram number 46
      helas_CD_VVV1_0( w_fp[14], w_fp[45], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 47 OF 1240 ***

      // Wavefunction(s) for diagram number 47
      // (none)

      // Amplitude(s) for diagram number 47
      helas_CD_FFV1_0( w_fp[3], w_fp[43], w_fp[14], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[84] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];

      // *** DIAGRAM 48 OF 1240 ***

      // Wavefunction(s) for diagram number 48
      // (none)

      // Amplitude(s) for diagram number 48
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[18], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[19], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[20], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 49 OF 1240 ***

      // Wavefunction(s) for diagram number 49
      helas_CD_FFV1_2( w_fp[3], w_fp[4], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[46] );
      helas_CD_FFV1_1( w_fp[39], w_fp[7], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[47] );

      // Amplitude(s) for diagram number 49
      helas_CD_FFV1_0( w_fp[46], w_fp[47], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 50 OF 1240 ***

      // Wavefunction(s) for diagram number 50
      helas_CD_FFV1_2( w_fp[46], w_fp[7], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[48] );

      // Amplitude(s) for diagram number 50
      helas_CD_FFV1_0( w_fp[48], w_fp[39], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 51 OF 1240 ***

      // Wavefunction(s) for diagram number 51
      // (none)

      // Amplitude(s) for diagram number 51
      helas_CD_FFV1_0( w_fp[46], w_fp[39], w_fp[14], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];

      // *** DIAGRAM 52 OF 1240 ***

      // Wavefunction(s) for diagram number 52
      // (none)

      // Amplitude(s) for diagram number 52
      helas_CD_FFV1_0( w_fp[41], w_fp[47], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 53 OF 1240 ***

      // Wavefunction(s) for diagram number 53
      // (none)

      // Amplitude(s) for diagram number 53
      helas_CD_FFV1_0( w_fp[42], w_fp[39], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 54 OF 1240 ***

      // Wavefunction(s) for diagram number 54
      // (none)

      // Amplitude(s) for diagram number 54
      helas_CD_FFV1_0( w_fp[41], w_fp[39], w_fp[9], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];

      // *** DIAGRAM 55 OF 1240 ***

      // Wavefunction(s) for diagram number 55
      // (none)

      // Amplitude(s) for diagram number 55
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];

      // *** DIAGRAM 56 OF 1240 ***

      // Wavefunction(s) for diagram number 56
      // (none)

      // Amplitude(s) for diagram number 56
      helas_CD_FFV1_0( w_fp[34], w_fp[39], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];

      // *** DIAGRAM 57 OF 1240 ***

      // Wavefunction(s) for diagram number 57
      // (none)

      // Amplitude(s) for diagram number 57
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[28], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 58 OF 1240 ***

      // Wavefunction(s) for diagram number 58
      helas_CD_FFV1_1( w_fp[2], w_fp[6], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[47] );
      helas_CD_FFV1_1( w_fp[47], w_fp[4], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[49] );

      // Amplitude(s) for diagram number 58
      helas_CD_FFV1_0( w_fp[34], w_fp[49], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 59 OF 1240 ***

      // Wavefunction(s) for diagram number 59
      helas_CD_FFV1_1( w_fp[47], w_fp[5], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[50] );

      // Amplitude(s) for diagram number 59
      helas_CD_FFV1_0( w_fp[34], w_fp[50], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 60 OF 1240 ***

      // Wavefunction(s) for diagram number 60
      helas_CD_FFV1P0_3( w_fp[3], w_fp[47], COUPs[1], 1.0, 0., 0., w_fp[51] );

      // Amplitude(s) for diagram number 60
      helas_CD_VVV1_0( w_fp[9], w_fp[51], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 61 OF 1240 ***

      // Wavefunction(s) for diagram number 61
      // (none)

      // Amplitude(s) for diagram number 61
      helas_CD_FFV1_0( w_fp[3], w_fp[50], w_fp[9], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[114] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 62 OF 1240 ***

      // Wavefunction(s) for diagram number 62
      // (none)

      // Amplitude(s) for diagram number 62
      helas_CD_VVV1_0( w_fp[12], w_fp[51], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 63 OF 1240 ***

      // Wavefunction(s) for diagram number 63
      // (none)

      // Amplitude(s) for diagram number 63
      helas_CD_FFV1_0( w_fp[3], w_fp[49], w_fp[12], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[108] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];

      // *** DIAGRAM 64 OF 1240 ***

      // Wavefunction(s) for diagram number 64
      // (none)

      // Amplitude(s) for diagram number 64
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[15], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[17], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 65 OF 1240 ***

      // Wavefunction(s) for diagram number 65
      helas_CD_FFV1_1( w_fp[47], w_fp[7], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[52] );

      // Amplitude(s) for diagram number 65
      helas_CD_FFV1_0( w_fp[46], w_fp[52], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 66 OF 1240 ***

      // Wavefunction(s) for diagram number 66
      // (none)

      // Amplitude(s) for diagram number 66
      helas_CD_FFV1_0( w_fp[48], w_fp[47], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 67 OF 1240 ***

      // Wavefunction(s) for diagram number 67
      // (none)

      // Amplitude(s) for diagram number 67
      helas_CD_FFV1_0( w_fp[46], w_fp[47], w_fp[12], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 68 OF 1240 ***

      // Wavefunction(s) for diagram number 68
      // (none)

      // Amplitude(s) for diagram number 68
      helas_CD_FFV1_0( w_fp[38], w_fp[52], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 69 OF 1240 ***

      // Wavefunction(s) for diagram number 69
      // (none)

      // Amplitude(s) for diagram number 69
      helas_CD_FFV1_0( w_fp[40], w_fp[47], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 70 OF 1240 ***

      // Wavefunction(s) for diagram number 70
      // (none)

      // Amplitude(s) for diagram number 70
      helas_CD_FFV1_0( w_fp[38], w_fp[47], w_fp[9], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 71 OF 1240 ***

      // Wavefunction(s) for diagram number 71
      // (none)

      // Amplitude(s) for diagram number 71
      helas_CD_FFV1_0( w_fp[3], w_fp[52], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];

      // *** DIAGRAM 72 OF 1240 ***

      // Wavefunction(s) for diagram number 72
      // (none)

      // Amplitude(s) for diagram number 72
      helas_CD_FFV1_0( w_fp[34], w_fp[47], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 73 OF 1240 ***

      // Wavefunction(s) for diagram number 73
      // (none)

      // Amplitude(s) for diagram number 73
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[26], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 74 OF 1240 ***

      // Wavefunction(s) for diagram number 74
      helas_CD_FFV1_1( w_fp[2], w_fp[7], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[52] );
      helas_CD_FFV1_2( w_fp[46], w_fp[5], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[7] );

      // Amplitude(s) for diagram number 74
      helas_CD_FFV1_0( w_fp[7], w_fp[52], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 75 OF 1240 ***

      // Wavefunction(s) for diagram number 75
      helas_CD_FFV1_2( w_fp[46], w_fp[6], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[53] );

      // Amplitude(s) for diagram number 75
      helas_CD_FFV1_0( w_fp[53], w_fp[52], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 76 OF 1240 ***

      // Wavefunction(s) for diagram number 76
      helas_CD_FFV1P0_3( w_fp[46], w_fp[2], COUPs[1], 1.0, 0., 0., w_fp[54] );

      // Amplitude(s) for diagram number 76
      helas_CD_VVV1_0( w_fp[12], w_fp[54], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 77 OF 1240 ***

      // Wavefunction(s) for diagram number 77
      // (none)

      // Amplitude(s) for diagram number 77
      helas_CD_FFV1_0( w_fp[53], w_fp[2], w_fp[12], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];

      // *** DIAGRAM 78 OF 1240 ***

      // Wavefunction(s) for diagram number 78
      // (none)

      // Amplitude(s) for diagram number 78
      helas_CD_VVV1_0( w_fp[14], w_fp[54], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 79 OF 1240 ***

      // Wavefunction(s) for diagram number 79
      // (none)

      // Amplitude(s) for diagram number 79
      helas_CD_FFV1_0( w_fp[7], w_fp[2], w_fp[14], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];

      // *** DIAGRAM 80 OF 1240 ***

      // Wavefunction(s) for diagram number 80
      // (none)

      // Amplitude(s) for diagram number 80
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[22], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[23], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 81 OF 1240 ***

      // Wavefunction(s) for diagram number 81
      // (none)

      // Amplitude(s) for diagram number 81
      helas_CD_FFV1_0( w_fp[46], w_fp[52], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];

      // *** DIAGRAM 82 OF 1240 ***

      // Wavefunction(s) for diagram number 82
      // (none)

      // Amplitude(s) for diagram number 82
      helas_CD_FFV1_0( w_fp[48], w_fp[2], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 83 OF 1240 ***

      // Wavefunction(s) for diagram number 83
      // (none)

      // Amplitude(s) for diagram number 83
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[25], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 84 OF 1240 ***

      // Wavefunction(s) for diagram number 84
      helas_CD_FFV1_2( w_fp[38], w_fp[4], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[25] );

      // Amplitude(s) for diagram number 84
      helas_CD_FFV1_0( w_fp[25], w_fp[52], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 85 OF 1240 ***

      // Wavefunction(s) for diagram number 85
      helas_CD_FFV1_2( w_fp[38], w_fp[6], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[48] );

      // Amplitude(s) for diagram number 85
      helas_CD_FFV1_0( w_fp[48], w_fp[52], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 86 OF 1240 ***

      // Wavefunction(s) for diagram number 86
      helas_CD_FFV1P0_3( w_fp[38], w_fp[2], COUPs[1], 1.0, 0., 0., w_fp[23] );

      // Amplitude(s) for diagram number 86
      helas_CD_VVV1_0( w_fp[9], w_fp[23], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 87 OF 1240 ***

      // Wavefunction(s) for diagram number 87
      // (none)

      // Amplitude(s) for diagram number 87
      helas_CD_FFV1_0( w_fp[48], w_fp[2], w_fp[9], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];

      // *** DIAGRAM 88 OF 1240 ***

      // Wavefunction(s) for diagram number 88
      // (none)

      // Amplitude(s) for diagram number 88
      helas_CD_VVV1_0( w_fp[14], w_fp[23], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 89 OF 1240 ***

      // Wavefunction(s) for diagram number 89
      // (none)

      // Amplitude(s) for diagram number 89
      helas_CD_FFV1_0( w_fp[25], w_fp[2], w_fp[14], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[102] += amp_sv[0];

      // *** DIAGRAM 90 OF 1240 ***

      // Wavefunction(s) for diagram number 90
      // (none)

      // Amplitude(s) for diagram number 90
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[18], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[19], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[20], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 91 OF 1240 ***

      // Wavefunction(s) for diagram number 91
      // (none)

      // Amplitude(s) for diagram number 91
      helas_CD_FFV1_0( w_fp[38], w_fp[52], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];

      // *** DIAGRAM 92 OF 1240 ***

      // Wavefunction(s) for diagram number 92
      // (none)

      // Amplitude(s) for diagram number 92
      helas_CD_FFV1_0( w_fp[40], w_fp[2], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 93 OF 1240 ***

      // Wavefunction(s) for diagram number 93
      // (none)

      // Amplitude(s) for diagram number 93
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[28], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 94 OF 1240 ***

      // Wavefunction(s) for diagram number 94
      helas_CD_FFV1_2( w_fp[41], w_fp[4], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[28] );

      // Amplitude(s) for diagram number 94
      helas_CD_FFV1_0( w_fp[28], w_fp[52], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 95 OF 1240 ***

      // Wavefunction(s) for diagram number 95
      helas_CD_FFV1_2( w_fp[41], w_fp[5], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[40] );

      // Amplitude(s) for diagram number 95
      helas_CD_FFV1_0( w_fp[40], w_fp[52], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 96 OF 1240 ***

      // Wavefunction(s) for diagram number 96
      helas_CD_FFV1P0_3( w_fp[41], w_fp[2], COUPs[1], 1.0, 0., 0., w_fp[20] );

      // Amplitude(s) for diagram number 96
      helas_CD_VVV1_0( w_fp[9], w_fp[20], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 97 OF 1240 ***

      // Wavefunction(s) for diagram number 97
      // (none)

      // Amplitude(s) for diagram number 97
      helas_CD_FFV1_0( w_fp[40], w_fp[2], w_fp[9], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[54] += amp_sv[0];

      // *** DIAGRAM 98 OF 1240 ***

      // Wavefunction(s) for diagram number 98
      // (none)

      // Amplitude(s) for diagram number 98
      helas_CD_VVV1_0( w_fp[12], w_fp[20], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 99 OF 1240 ***

      // Wavefunction(s) for diagram number 99
      // (none)

      // Amplitude(s) for diagram number 99
      helas_CD_FFV1_0( w_fp[28], w_fp[2], w_fp[12], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];

      // *** DIAGRAM 100 OF 1240 ***

      // Wavefunction(s) for diagram number 100
      // (none)

      // Amplitude(s) for diagram number 100
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[15], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[17], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 101 OF 1240 ***

      // Wavefunction(s) for diagram number 101
      // (none)

      // Amplitude(s) for diagram number 101
      helas_CD_FFV1_0( w_fp[41], w_fp[52], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];

      // *** DIAGRAM 102 OF 1240 ***

      // Wavefunction(s) for diagram number 102
      // (none)

      // Amplitude(s) for diagram number 102
      helas_CD_FFV1_0( w_fp[42], w_fp[2], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];

      // *** DIAGRAM 103 OF 1240 ***

      // Wavefunction(s) for diagram number 103
      // (none)

      // Amplitude(s) for diagram number 103
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[26], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 104 OF 1240 ***

      // Wavefunction(s) for diagram number 104
      helas_CD_FFV1_2( w_fp[3], w_fp[24], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[26] );

      // Amplitude(s) for diagram number 104
      helas_CD_FFV1_0( w_fp[26], w_fp[52], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];

      // *** DIAGRAM 105 OF 1240 ***

      // Wavefunction(s) for diagram number 105
      helas_CD_VVV1P0_1( w_fp[24], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[42] );

      // Amplitude(s) for diagram number 105
      helas_CD_FFV1_0( w_fp[3], w_fp[52], w_fp[42], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 106 OF 1240 ***

      // Wavefunction(s) for diagram number 106
      helas_CD_FFV1_1( w_fp[2], w_fp[24], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[17] );

      // Amplitude(s) for diagram number 106
      helas_CD_FFV1_0( w_fp[34], w_fp[17], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];

      // *** DIAGRAM 107 OF 1240 ***

      // Wavefunction(s) for diagram number 107
      // (none)

      // Amplitude(s) for diagram number 107
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[42], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 108 OF 1240 ***

      // Wavefunction(s) for diagram number 108
      // (none)

      // Amplitude(s) for diagram number 108
      helas_CD_FFV1_0( w_fp[3], w_fp[17], w_fp[14], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 109 OF 1240 ***

      // Wavefunction(s) for diagram number 109
      // (none)

      // Amplitude(s) for diagram number 109
      helas_CD_FFV1_0( w_fp[26], w_fp[2], w_fp[14], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 110 OF 1240 ***

      // Wavefunction(s) for diagram number 110
      helas_CD_FFV1_2( w_fp[3], w_fp[27], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[14] );

      // Amplitude(s) for diagram number 110
      helas_CD_FFV1_0( w_fp[14], w_fp[52], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];

      // *** DIAGRAM 111 OF 1240 ***

      // Wavefunction(s) for diagram number 111
      helas_CD_VVV1P0_1( w_fp[27], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[16] );

      // Amplitude(s) for diagram number 111
      helas_CD_FFV1_0( w_fp[3], w_fp[52], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 112 OF 1240 ***

      // Wavefunction(s) for diagram number 112
      helas_CD_FFV1_1( w_fp[2], w_fp[27], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[15] );

      // Amplitude(s) for diagram number 112
      helas_CD_FFV1_0( w_fp[34], w_fp[15], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];

      // *** DIAGRAM 113 OF 1240 ***

      // Wavefunction(s) for diagram number 113
      // (none)

      // Amplitude(s) for diagram number 113
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 114 OF 1240 ***

      // Wavefunction(s) for diagram number 114
      // (none)

      // Amplitude(s) for diagram number 114
      helas_CD_FFV1_0( w_fp[3], w_fp[15], w_fp[12], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 115 OF 1240 ***

      // Wavefunction(s) for diagram number 115
      // (none)

      // Amplitude(s) for diagram number 115
      helas_CD_FFV1_0( w_fp[14], w_fp[2], w_fp[12], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 116 OF 1240 ***

      // Wavefunction(s) for diagram number 116
      helas_CD_FFV1_2( w_fp[3], w_fp[29], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[12] );

      // Amplitude(s) for diagram number 116
      helas_CD_FFV1_0( w_fp[12], w_fp[52], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];

      // *** DIAGRAM 117 OF 1240 ***

      // Wavefunction(s) for diagram number 117
      helas_CD_VVV1P0_1( w_fp[4], w_fp[29], COUPs[0], 1.0, 0., 0., w_fp[19] );

      // Amplitude(s) for diagram number 117
      helas_CD_FFV1_0( w_fp[3], w_fp[52], w_fp[19], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 118 OF 1240 ***

      // Wavefunction(s) for diagram number 118
      helas_CD_FFV1_1( w_fp[2], w_fp[29], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[18] );

      // Amplitude(s) for diagram number 118
      helas_CD_FFV1_0( w_fp[34], w_fp[18], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 119 OF 1240 ***

      // Wavefunction(s) for diagram number 119
      // (none)

      // Amplitude(s) for diagram number 119
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[19], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 120 OF 1240 ***

      // Wavefunction(s) for diagram number 120
      // (none)

      // Amplitude(s) for diagram number 120
      helas_CD_FFV1_0( w_fp[3], w_fp[18], w_fp[9], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 121 OF 1240 ***

      // Wavefunction(s) for diagram number 121
      // (none)

      // Amplitude(s) for diagram number 121
      helas_CD_FFV1_0( w_fp[12], w_fp[2], w_fp[9], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 122 OF 1240 ***

      // Wavefunction(s) for diagram number 122
      // (none)

      // Amplitude(s) for diagram number 122
      helas_CD_FFV1_0( w_fp[3], w_fp[52], w_fp[30], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[52], w_fp[31], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[52], w_fp[32], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 123 OF 1240 ***

      // Wavefunction(s) for diagram number 123
      // (none)

      // Amplitude(s) for diagram number 123
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[30], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[31], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[32], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 124 OF 1240 ***

      // Wavefunction(s) for diagram number 124
      helas_CD_FFV1_1( w_fp[2], w_fp[0], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[34] );
      helas_CD_FFV1_2( w_fp[3], w_fp[1], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[52] );
      helas_CD_FFV1_1( w_fp[34], w_fp[4], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[9] );
      helas_CD_FFV1_2( w_fp[52], w_fp[5], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[22] );

      // Amplitude(s) for diagram number 124
      helas_CD_FFV1_0( w_fp[22], w_fp[9], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] -= amp_sv[0];

      // *** DIAGRAM 125 OF 1240 ***

      // Wavefunction(s) for diagram number 125
      helas_CD_FFV1_2( w_fp[52], w_fp[6], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[21] );

      // Amplitude(s) for diagram number 125
      helas_CD_FFV1_0( w_fp[21], w_fp[9], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];

      // *** DIAGRAM 126 OF 1240 ***

      // Wavefunction(s) for diagram number 126
      helas_CD_FFV1_1( w_fp[34], w_fp[5], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[55] );
      helas_CD_FFV1_2( w_fp[52], w_fp[4], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[56] );

      // Amplitude(s) for diagram number 126
      helas_CD_FFV1_0( w_fp[56], w_fp[55], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] -= amp_sv[0];

      // *** DIAGRAM 127 OF 1240 ***

      // Wavefunction(s) for diagram number 127
      // (none)

      // Amplitude(s) for diagram number 127
      helas_CD_FFV1_0( w_fp[21], w_fp[55], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] -= amp_sv[0];

      // *** DIAGRAM 128 OF 1240 ***

      // Wavefunction(s) for diagram number 128
      helas_CD_FFV1_1( w_fp[34], w_fp[6], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[57] );

      // Amplitude(s) for diagram number 128
      helas_CD_FFV1_0( w_fp[56], w_fp[57], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] -= amp_sv[0];

      // *** DIAGRAM 129 OF 1240 ***

      // Wavefunction(s) for diagram number 129
      // (none)

      // Amplitude(s) for diagram number 129
      helas_CD_FFV1_0( w_fp[22], w_fp[57], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] -= amp_sv[0];

      // *** DIAGRAM 130 OF 1240 ***

      // Wavefunction(s) for diagram number 130
      helas_CD_FFV1P0_3( w_fp[52], w_fp[34], COUPs[1], 1.0, 0., 0., w_fp[58] );

      // Amplitude(s) for diagram number 130
      helas_CD_VVV1_0( w_fp[24], w_fp[6], w_fp[58], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];

      // *** DIAGRAM 131 OF 1240 ***

      // Wavefunction(s) for diagram number 131
      helas_CD_FFV1_1( w_fp[34], w_fp[24], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[59] );

      // Amplitude(s) for diagram number 131
      helas_CD_FFV1_0( w_fp[52], w_fp[59], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 132 OF 1240 ***

      // Wavefunction(s) for diagram number 132
      // (none)

      // Amplitude(s) for diagram number 132
      helas_CD_FFV1_0( w_fp[52], w_fp[57], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 133 OF 1240 ***

      // Wavefunction(s) for diagram number 133
      // (none)

      // Amplitude(s) for diagram number 133
      helas_CD_VVV1_0( w_fp[27], w_fp[5], w_fp[58], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];

      // *** DIAGRAM 134 OF 1240 ***

      // Wavefunction(s) for diagram number 134
      helas_CD_FFV1_1( w_fp[34], w_fp[27], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[60] );

      // Amplitude(s) for diagram number 134
      helas_CD_FFV1_0( w_fp[52], w_fp[60], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 135 OF 1240 ***

      // Wavefunction(s) for diagram number 135
      // (none)

      // Amplitude(s) for diagram number 135
      helas_CD_FFV1_0( w_fp[52], w_fp[55], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 136 OF 1240 ***

      // Wavefunction(s) for diagram number 136
      // (none)

      // Amplitude(s) for diagram number 136
      helas_CD_VVV1_0( w_fp[4], w_fp[29], w_fp[58], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];

      // *** DIAGRAM 137 OF 1240 ***

      // Wavefunction(s) for diagram number 137
      // (none)

      // Amplitude(s) for diagram number 137
      helas_CD_FFV1_0( w_fp[52], w_fp[9], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 138 OF 1240 ***

      // Wavefunction(s) for diagram number 138
      helas_CD_FFV1_1( w_fp[34], w_fp[29], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[58] );

      // Amplitude(s) for diagram number 138
      helas_CD_FFV1_0( w_fp[52], w_fp[58], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 139 OF 1240 ***

      // Wavefunction(s) for diagram number 139
      // (none)

      // Amplitude(s) for diagram number 139
      helas_CD_FFV1_0( w_fp[52], w_fp[34], w_fp[30], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[34], w_fp[31], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[34], w_fp[32], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];

      // *** DIAGRAM 140 OF 1240 ***

      // Wavefunction(s) for diagram number 140
      helas_CD_VVV1P0_1( w_fp[1], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[61] );
      helas_CD_FFV1P0_3( w_fp[3], w_fp[34], COUPs[1], 1.0, 0., 0., w_fp[62] );
      helas_CD_VVV1P0_1( w_fp[61], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[63] );

      // Amplitude(s) for diagram number 140
      helas_CD_VVV1_0( w_fp[62], w_fp[63], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 141 OF 1240 ***

      // Wavefunction(s) for diagram number 141
      helas_CD_VVV1P0_1( w_fp[61], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[64] );

      // Amplitude(s) for diagram number 141
      helas_CD_VVV1_0( w_fp[62], w_fp[64], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 142 OF 1240 ***

      // Wavefunction(s) for diagram number 142
      // (none)

      // Amplitude(s) for diagram number 142
      helas_CD_VVVV1_0( w_fp[61], w_fp[5], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[61], w_fp[5], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[61], w_fp[5], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 143 OF 1240 ***

      // Wavefunction(s) for diagram number 143
      helas_CD_FFV1_2( w_fp[3], w_fp[61], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[65] );

      // Amplitude(s) for diagram number 143
      helas_CD_FFV1_0( w_fp[65], w_fp[55], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 144 OF 1240 ***

      // Wavefunction(s) for diagram number 144
      // (none)

      // Amplitude(s) for diagram number 144
      helas_CD_FFV1_0( w_fp[3], w_fp[55], w_fp[64], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];

      // *** DIAGRAM 145 OF 1240 ***

      // Wavefunction(s) for diagram number 145
      // (none)

      // Amplitude(s) for diagram number 145
      helas_CD_FFV1_0( w_fp[65], w_fp[57], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 146 OF 1240 ***

      // Wavefunction(s) for diagram number 146
      // (none)

      // Amplitude(s) for diagram number 146
      helas_CD_FFV1_0( w_fp[3], w_fp[57], w_fp[63], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];

      // *** DIAGRAM 147 OF 1240 ***

      // Wavefunction(s) for diagram number 147
      helas_CD_FFV1_1( w_fp[34], w_fp[61], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[66] );

      // Amplitude(s) for diagram number 147
      helas_CD_FFV1_0( w_fp[38], w_fp[66], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 148 OF 1240 ***

      // Wavefunction(s) for diagram number 148
      helas_CD_FFV1P0_3( w_fp[38], w_fp[34], COUPs[1], 1.0, 0., 0., w_fp[67] );

      // Amplitude(s) for diagram number 148
      helas_CD_VVV1_0( w_fp[61], w_fp[6], w_fp[67], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];

      // *** DIAGRAM 149 OF 1240 ***

      // Wavefunction(s) for diagram number 149
      // (none)

      // Amplitude(s) for diagram number 149
      helas_CD_FFV1_0( w_fp[38], w_fp[57], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 150 OF 1240 ***

      // Wavefunction(s) for diagram number 150
      // (none)

      // Amplitude(s) for diagram number 150
      helas_CD_FFV1_0( w_fp[41], w_fp[66], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 151 OF 1240 ***

      // Wavefunction(s) for diagram number 151
      helas_CD_FFV1P0_3( w_fp[41], w_fp[34], COUPs[1], 1.0, 0., 0., w_fp[68] );

      // Amplitude(s) for diagram number 151
      helas_CD_VVV1_0( w_fp[61], w_fp[5], w_fp[68], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];

      // *** DIAGRAM 152 OF 1240 ***

      // Wavefunction(s) for diagram number 152
      // (none)

      // Amplitude(s) for diagram number 152
      helas_CD_FFV1_0( w_fp[41], w_fp[55], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 153 OF 1240 ***

      // Wavefunction(s) for diagram number 153
      // (none)

      // Amplitude(s) for diagram number 153
      helas_CD_FFV1_0( w_fp[3], w_fp[66], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];

      // *** DIAGRAM 154 OF 1240 ***

      // Wavefunction(s) for diagram number 154
      // (none)

      // Amplitude(s) for diagram number 154
      helas_CD_VVV1_0( w_fp[61], w_fp[29], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 155 OF 1240 ***

      // Wavefunction(s) for diagram number 155
      // (none)

      // Amplitude(s) for diagram number 155
      helas_CD_FFV1_0( w_fp[3], w_fp[58], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];

      // *** DIAGRAM 156 OF 1240 ***

      // Wavefunction(s) for diagram number 156
      helas_CD_VVV1P0_1( w_fp[1], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[66] );
      helas_CD_VVV1P0_1( w_fp[66], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[69] );

      // Amplitude(s) for diagram number 156
      helas_CD_VVV1_0( w_fp[62], w_fp[69], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 157 OF 1240 ***

      // Wavefunction(s) for diagram number 157
      helas_CD_VVV1P0_1( w_fp[66], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[70] );

      // Amplitude(s) for diagram number 157
      helas_CD_VVV1_0( w_fp[62], w_fp[70], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 158 OF 1240 ***

      // Wavefunction(s) for diagram number 158
      // (none)

      // Amplitude(s) for diagram number 158
      helas_CD_VVVV1_0( w_fp[66], w_fp[4], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[66], w_fp[4], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[66], w_fp[4], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 159 OF 1240 ***

      // Wavefunction(s) for diagram number 159
      helas_CD_FFV1_2( w_fp[3], w_fp[66], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[71] );

      // Amplitude(s) for diagram number 159
      helas_CD_FFV1_0( w_fp[71], w_fp[9], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 160 OF 1240 ***

      // Wavefunction(s) for diagram number 160
      // (none)

      // Amplitude(s) for diagram number 160
      helas_CD_FFV1_0( w_fp[3], w_fp[9], w_fp[70], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];

      // *** DIAGRAM 161 OF 1240 ***

      // Wavefunction(s) for diagram number 161
      // (none)

      // Amplitude(s) for diagram number 161
      helas_CD_FFV1_0( w_fp[71], w_fp[57], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 162 OF 1240 ***

      // Wavefunction(s) for diagram number 162
      // (none)

      // Amplitude(s) for diagram number 162
      helas_CD_FFV1_0( w_fp[3], w_fp[57], w_fp[69], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];

      // *** DIAGRAM 163 OF 1240 ***

      // Wavefunction(s) for diagram number 163
      helas_CD_FFV1_1( w_fp[34], w_fp[66], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[72] );

      // Amplitude(s) for diagram number 163
      helas_CD_FFV1_0( w_fp[46], w_fp[72], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 164 OF 1240 ***

      // Wavefunction(s) for diagram number 164
      helas_CD_FFV1P0_3( w_fp[46], w_fp[34], COUPs[1], 1.0, 0., 0., w_fp[73] );

      // Amplitude(s) for diagram number 164
      helas_CD_VVV1_0( w_fp[66], w_fp[6], w_fp[73], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];

      // *** DIAGRAM 165 OF 1240 ***

      // Wavefunction(s) for diagram number 165
      // (none)

      // Amplitude(s) for diagram number 165
      helas_CD_FFV1_0( w_fp[46], w_fp[57], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 166 OF 1240 ***

      // Wavefunction(s) for diagram number 166
      // (none)

      // Amplitude(s) for diagram number 166
      helas_CD_FFV1_0( w_fp[41], w_fp[72], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 167 OF 1240 ***

      // Wavefunction(s) for diagram number 167
      // (none)

      // Amplitude(s) for diagram number 167
      helas_CD_VVV1_0( w_fp[66], w_fp[4], w_fp[68], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];

      // *** DIAGRAM 168 OF 1240 ***

      // Wavefunction(s) for diagram number 168
      // (none)

      // Amplitude(s) for diagram number 168
      helas_CD_FFV1_0( w_fp[41], w_fp[9], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 169 OF 1240 ***

      // Wavefunction(s) for diagram number 169
      // (none)

      // Amplitude(s) for diagram number 169
      helas_CD_FFV1_0( w_fp[3], w_fp[72], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];

      // *** DIAGRAM 170 OF 1240 ***

      // Wavefunction(s) for diagram number 170
      // (none)

      // Amplitude(s) for diagram number 170
      helas_CD_VVV1_0( w_fp[66], w_fp[27], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 171 OF 1240 ***

      // Wavefunction(s) for diagram number 171
      // (none)

      // Amplitude(s) for diagram number 171
      helas_CD_FFV1_0( w_fp[3], w_fp[60], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];

      // *** DIAGRAM 172 OF 1240 ***

      // Wavefunction(s) for diagram number 172
      helas_CD_VVV1P0_1( w_fp[1], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[72] );
      helas_CD_VVV1P0_1( w_fp[72], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[74] );

      // Amplitude(s) for diagram number 172
      helas_CD_VVV1_0( w_fp[62], w_fp[74], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 173 OF 1240 ***

      // Wavefunction(s) for diagram number 173
      helas_CD_VVV1P0_1( w_fp[72], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[75] );

      // Amplitude(s) for diagram number 173
      helas_CD_VVV1_0( w_fp[62], w_fp[75], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 174 OF 1240 ***

      // Wavefunction(s) for diagram number 174
      // (none)

      // Amplitude(s) for diagram number 174
      helas_CD_VVVV1_0( w_fp[72], w_fp[4], w_fp[5], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[72], w_fp[4], w_fp[5], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[72], w_fp[4], w_fp[5], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 175 OF 1240 ***

      // Wavefunction(s) for diagram number 175
      helas_CD_FFV1_2( w_fp[3], w_fp[72], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[76] );

      // Amplitude(s) for diagram number 175
      helas_CD_FFV1_0( w_fp[76], w_fp[9], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 176 OF 1240 ***

      // Wavefunction(s) for diagram number 176
      // (none)

      // Amplitude(s) for diagram number 176
      helas_CD_FFV1_0( w_fp[3], w_fp[9], w_fp[75], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];

      // *** DIAGRAM 177 OF 1240 ***

      // Wavefunction(s) for diagram number 177
      // (none)

      // Amplitude(s) for diagram number 177
      helas_CD_FFV1_0( w_fp[76], w_fp[55], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 178 OF 1240 ***

      // Wavefunction(s) for diagram number 178
      // (none)

      // Amplitude(s) for diagram number 178
      helas_CD_FFV1_0( w_fp[3], w_fp[55], w_fp[74], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];

      // *** DIAGRAM 179 OF 1240 ***

      // Wavefunction(s) for diagram number 179
      helas_CD_FFV1_1( w_fp[34], w_fp[72], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[77] );

      // Amplitude(s) for diagram number 179
      helas_CD_FFV1_0( w_fp[46], w_fp[77], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 180 OF 1240 ***

      // Wavefunction(s) for diagram number 180
      // (none)

      // Amplitude(s) for diagram number 180
      helas_CD_VVV1_0( w_fp[72], w_fp[5], w_fp[73], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];

      // *** DIAGRAM 181 OF 1240 ***

      // Wavefunction(s) for diagram number 181
      // (none)

      // Amplitude(s) for diagram number 181
      helas_CD_FFV1_0( w_fp[46], w_fp[55], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 182 OF 1240 ***

      // Wavefunction(s) for diagram number 182
      // (none)

      // Amplitude(s) for diagram number 182
      helas_CD_FFV1_0( w_fp[38], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 183 OF 1240 ***

      // Wavefunction(s) for diagram number 183
      // (none)

      // Amplitude(s) for diagram number 183
      helas_CD_VVV1_0( w_fp[72], w_fp[4], w_fp[67], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];

      // *** DIAGRAM 184 OF 1240 ***

      // Wavefunction(s) for diagram number 184
      // (none)

      // Amplitude(s) for diagram number 184
      helas_CD_FFV1_0( w_fp[38], w_fp[9], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 185 OF 1240 ***

      // Wavefunction(s) for diagram number 185
      // (none)

      // Amplitude(s) for diagram number 185
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];

      // *** DIAGRAM 186 OF 1240 ***

      // Wavefunction(s) for diagram number 186
      // (none)

      // Amplitude(s) for diagram number 186
      helas_CD_VVV1_0( w_fp[72], w_fp[24], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 187 OF 1240 ***

      // Wavefunction(s) for diagram number 187
      // (none)

      // Amplitude(s) for diagram number 187
      helas_CD_FFV1_0( w_fp[3], w_fp[59], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];

      // *** DIAGRAM 188 OF 1240 ***

      // Wavefunction(s) for diagram number 188
      helas_CD_FFV1_1( w_fp[34], w_fp[1], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[77] );

      // Amplitude(s) for diagram number 188
      helas_CD_FFV1_0( w_fp[7], w_fp[77], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];

      // *** DIAGRAM 189 OF 1240 ***

      // Wavefunction(s) for diagram number 189
      // (none)

      // Amplitude(s) for diagram number 189
      helas_CD_FFV1_0( w_fp[53], w_fp[77], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];

      // *** DIAGRAM 190 OF 1240 ***

      // Wavefunction(s) for diagram number 190
      helas_CD_FFV1_2( w_fp[46], w_fp[1], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[78] );

      // Amplitude(s) for diagram number 190
      helas_CD_FFV1_0( w_fp[78], w_fp[55], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];

      // *** DIAGRAM 191 OF 1240 ***

      // Wavefunction(s) for diagram number 191
      // (none)

      // Amplitude(s) for diagram number 191
      helas_CD_FFV1_0( w_fp[53], w_fp[55], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= amp_sv[0];

      // *** DIAGRAM 192 OF 1240 ***

      // Wavefunction(s) for diagram number 192
      // (none)

      // Amplitude(s) for diagram number 192
      helas_CD_FFV1_0( w_fp[78], w_fp[57], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= amp_sv[0];

      // *** DIAGRAM 193 OF 1240 ***

      // Wavefunction(s) for diagram number 193
      // (none)

      // Amplitude(s) for diagram number 193
      helas_CD_FFV1_0( w_fp[7], w_fp[57], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= amp_sv[0];

      // *** DIAGRAM 194 OF 1240 ***

      // Wavefunction(s) for diagram number 194
      // (none)

      // Amplitude(s) for diagram number 194
      helas_CD_FFV1_0( w_fp[46], w_fp[77], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 195 OF 1240 ***

      // Wavefunction(s) for diagram number 195
      // (none)

      // Amplitude(s) for diagram number 195
      helas_CD_VVV1_0( w_fp[1], w_fp[29], w_fp[73], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];

      // *** DIAGRAM 196 OF 1240 ***

      // Wavefunction(s) for diagram number 196
      // (none)

      // Amplitude(s) for diagram number 196
      helas_CD_FFV1_0( w_fp[46], w_fp[58], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 197 OF 1240 ***

      // Wavefunction(s) for diagram number 197
      // (none)

      // Amplitude(s) for diagram number 197
      helas_CD_FFV1_0( w_fp[25], w_fp[77], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];

      // *** DIAGRAM 198 OF 1240 ***

      // Wavefunction(s) for diagram number 198
      // (none)

      // Amplitude(s) for diagram number 198
      helas_CD_FFV1_0( w_fp[48], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];

      // *** DIAGRAM 199 OF 1240 ***

      // Wavefunction(s) for diagram number 199
      helas_CD_FFV1_2( w_fp[38], w_fp[1], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[58] );

      // Amplitude(s) for diagram number 199
      helas_CD_FFV1_0( w_fp[58], w_fp[9], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];

      // *** DIAGRAM 200 OF 1240 ***

      // Wavefunction(s) for diagram number 200
      // (none)

      // Amplitude(s) for diagram number 200
      helas_CD_FFV1_0( w_fp[48], w_fp[9], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= amp_sv[0];

      // *** DIAGRAM 201 OF 1240 ***

      // Wavefunction(s) for diagram number 201
      // (none)

      // Amplitude(s) for diagram number 201
      helas_CD_FFV1_0( w_fp[58], w_fp[57], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= amp_sv[0];

      // *** DIAGRAM 202 OF 1240 ***

      // Wavefunction(s) for diagram number 202
      // (none)

      // Amplitude(s) for diagram number 202
      helas_CD_FFV1_0( w_fp[25], w_fp[57], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];

      // *** DIAGRAM 203 OF 1240 ***

      // Wavefunction(s) for diagram number 203
      // (none)

      // Amplitude(s) for diagram number 203
      helas_CD_FFV1_0( w_fp[38], w_fp[77], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 204 OF 1240 ***

      // Wavefunction(s) for diagram number 204
      // (none)

      // Amplitude(s) for diagram number 204
      helas_CD_VVV1_0( w_fp[1], w_fp[27], w_fp[67], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];

      // *** DIAGRAM 205 OF 1240 ***

      // Wavefunction(s) for diagram number 205
      // (none)

      // Amplitude(s) for diagram number 205
      helas_CD_FFV1_0( w_fp[38], w_fp[60], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 206 OF 1240 ***

      // Wavefunction(s) for diagram number 206
      // (none)

      // Amplitude(s) for diagram number 206
      helas_CD_FFV1_0( w_fp[28], w_fp[77], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];

      // *** DIAGRAM 207 OF 1240 ***

      // Wavefunction(s) for diagram number 207
      // (none)

      // Amplitude(s) for diagram number 207
      helas_CD_FFV1_0( w_fp[40], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];

      // *** DIAGRAM 208 OF 1240 ***

      // Wavefunction(s) for diagram number 208
      helas_CD_FFV1_2( w_fp[41], w_fp[1], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[60] );

      // Amplitude(s) for diagram number 208
      helas_CD_FFV1_0( w_fp[60], w_fp[9], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];

      // *** DIAGRAM 209 OF 1240 ***

      // Wavefunction(s) for diagram number 209
      // (none)

      // Amplitude(s) for diagram number 209
      helas_CD_FFV1_0( w_fp[40], w_fp[9], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];

      // *** DIAGRAM 210 OF 1240 ***

      // Wavefunction(s) for diagram number 210
      // (none)

      // Amplitude(s) for diagram number 210
      helas_CD_FFV1_0( w_fp[60], w_fp[55], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= amp_sv[0];

      // *** DIAGRAM 211 OF 1240 ***

      // Wavefunction(s) for diagram number 211
      // (none)

      // Amplitude(s) for diagram number 211
      helas_CD_FFV1_0( w_fp[28], w_fp[55], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];

      // *** DIAGRAM 212 OF 1240 ***

      // Wavefunction(s) for diagram number 212
      // (none)

      // Amplitude(s) for diagram number 212
      helas_CD_FFV1_0( w_fp[41], w_fp[77], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 213 OF 1240 ***

      // Wavefunction(s) for diagram number 213
      // (none)

      // Amplitude(s) for diagram number 213
      helas_CD_VVV1_0( w_fp[1], w_fp[24], w_fp[68], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];

      // *** DIAGRAM 214 OF 1240 ***

      // Wavefunction(s) for diagram number 214
      // (none)

      // Amplitude(s) for diagram number 214
      helas_CD_FFV1_0( w_fp[41], w_fp[59], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 215 OF 1240 ***

      // Wavefunction(s) for diagram number 215
      // (none)

      // Amplitude(s) for diagram number 215
      helas_CD_FFV1_0( w_fp[26], w_fp[77], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 216 OF 1240 ***

      // Wavefunction(s) for diagram number 216
      // (none)

      // Amplitude(s) for diagram number 216
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[42], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];

      // *** DIAGRAM 217 OF 1240 ***

      // Wavefunction(s) for diagram number 217
      helas_CD_VVV1P0_1( w_fp[1], w_fp[24], COUPs[0], 1.0, 0., 0., w_fp[59] );

      // Amplitude(s) for diagram number 217
      helas_CD_VVV1_0( w_fp[62], w_fp[59], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 218 OF 1240 ***

      // Wavefunction(s) for diagram number 218
      // (none)

      // Amplitude(s) for diagram number 218
      helas_CD_VVV1_0( w_fp[62], w_fp[1], w_fp[42], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 219 OF 1240 ***

      // Wavefunction(s) for diagram number 219
      // (none)

      // Amplitude(s) for diagram number 219
      helas_CD_VVVV1_0( w_fp[1], w_fp[24], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[24], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[24], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 220 OF 1240 ***

      // Wavefunction(s) for diagram number 220
      // (none)

      // Amplitude(s) for diagram number 220
      helas_CD_FFV1_0( w_fp[3], w_fp[57], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];

      // *** DIAGRAM 221 OF 1240 ***

      // Wavefunction(s) for diagram number 221
      // (none)

      // Amplitude(s) for diagram number 221
      helas_CD_FFV1_0( w_fp[26], w_fp[57], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 222 OF 1240 ***

      // Wavefunction(s) for diagram number 222
      // (none)

      // Amplitude(s) for diagram number 222
      helas_CD_FFV1_0( w_fp[14], w_fp[77], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 223 OF 1240 ***

      // Wavefunction(s) for diagram number 223
      // (none)

      // Amplitude(s) for diagram number 223
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];

      // *** DIAGRAM 224 OF 1240 ***

      // Wavefunction(s) for diagram number 224
      helas_CD_VVV1P0_1( w_fp[1], w_fp[27], COUPs[0], 1.0, 0., 0., w_fp[68] );

      // Amplitude(s) for diagram number 224
      helas_CD_VVV1_0( w_fp[62], w_fp[68], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 225 OF 1240 ***

      // Wavefunction(s) for diagram number 225
      // (none)

      // Amplitude(s) for diagram number 225
      helas_CD_VVV1_0( w_fp[62], w_fp[1], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 226 OF 1240 ***

      // Wavefunction(s) for diagram number 226
      // (none)

      // Amplitude(s) for diagram number 226
      helas_CD_VVVV1_0( w_fp[1], w_fp[27], w_fp[5], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[27], w_fp[5], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[27], w_fp[5], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 227 OF 1240 ***

      // Wavefunction(s) for diagram number 227
      // (none)

      // Amplitude(s) for diagram number 227
      helas_CD_FFV1_0( w_fp[3], w_fp[55], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];

      // *** DIAGRAM 228 OF 1240 ***

      // Wavefunction(s) for diagram number 228
      // (none)

      // Amplitude(s) for diagram number 228
      helas_CD_FFV1_0( w_fp[14], w_fp[55], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 229 OF 1240 ***

      // Wavefunction(s) for diagram number 229
      // (none)

      // Amplitude(s) for diagram number 229
      helas_CD_FFV1_0( w_fp[12], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 230 OF 1240 ***

      // Wavefunction(s) for diagram number 230
      // (none)

      // Amplitude(s) for diagram number 230
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[19], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];

      // *** DIAGRAM 231 OF 1240 ***

      // Wavefunction(s) for diagram number 231
      helas_CD_VVV1P0_1( w_fp[1], w_fp[29], COUPs[0], 1.0, 0., 0., w_fp[67] );

      // Amplitude(s) for diagram number 231
      helas_CD_VVV1_0( w_fp[62], w_fp[67], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 232 OF 1240 ***

      // Wavefunction(s) for diagram number 232
      // (none)

      // Amplitude(s) for diagram number 232
      helas_CD_VVV1_0( w_fp[62], w_fp[1], w_fp[19], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 233 OF 1240 ***

      // Wavefunction(s) for diagram number 233
      // (none)

      // Amplitude(s) for diagram number 233
      helas_CD_VVVV1_0( w_fp[1], w_fp[4], w_fp[29], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[4], w_fp[29], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[4], w_fp[29], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 234 OF 1240 ***

      // Wavefunction(s) for diagram number 234
      // (none)

      // Amplitude(s) for diagram number 234
      helas_CD_FFV1_0( w_fp[3], w_fp[9], w_fp[67], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];

      // *** DIAGRAM 235 OF 1240 ***

      // Wavefunction(s) for diagram number 235
      // (none)

      // Amplitude(s) for diagram number 235
      helas_CD_FFV1_0( w_fp[12], w_fp[9], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 236 OF 1240 ***

      // Wavefunction(s) for diagram number 236
      helas_CD_VVVV1P0_1( w_fp[1], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[73] );
      helas_CD_VVVV3P0_1( w_fp[1], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[79] );
      helas_CD_VVVV4P0_1( w_fp[1], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[80] );

      // Amplitude(s) for diagram number 236
      helas_CD_VVV1_0( w_fp[73], w_fp[6], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[79], w_fp[6], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[80], w_fp[6], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 237 OF 1240 ***

      // Wavefunction(s) for diagram number 237
      // (none)

      // Amplitude(s) for diagram number 237
      helas_CD_FFV1_0( w_fp[3], w_fp[57], w_fp[73], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[57], w_fp[79], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[57], w_fp[80], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];

      // *** DIAGRAM 238 OF 1240 ***

      // Wavefunction(s) for diagram number 238
      // (none)

      // Amplitude(s) for diagram number 238
      helas_CD_FFV1_0( w_fp[41], w_fp[34], w_fp[73], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[34], w_fp[79], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[34], w_fp[80], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];

      // *** DIAGRAM 239 OF 1240 ***

      // Wavefunction(s) for diagram number 239
      helas_CD_VVVV1P0_1( w_fp[1], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[57] );
      helas_CD_VVVV3P0_1( w_fp[1], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[81] );
      helas_CD_VVVV4P0_1( w_fp[1], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[82] );

      // Amplitude(s) for diagram number 239
      helas_CD_VVV1_0( w_fp[57], w_fp[5], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[81], w_fp[5], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[82], w_fp[5], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 240 OF 1240 ***

      // Wavefunction(s) for diagram number 240
      // (none)

      // Amplitude(s) for diagram number 240
      helas_CD_FFV1_0( w_fp[3], w_fp[55], w_fp[57], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[55], w_fp[81], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[55], w_fp[82], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];

      // *** DIAGRAM 241 OF 1240 ***

      // Wavefunction(s) for diagram number 241
      // (none)

      // Amplitude(s) for diagram number 241
      helas_CD_FFV1_0( w_fp[38], w_fp[34], w_fp[57], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[34], w_fp[81], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[34], w_fp[82], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];

      // *** DIAGRAM 242 OF 1240 ***

      // Wavefunction(s) for diagram number 242
      helas_CD_VVVV1P0_1( w_fp[1], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[55] );
      helas_CD_VVVV3P0_1( w_fp[1], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[83] );
      helas_CD_VVVV4P0_1( w_fp[1], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[84] );

      // Amplitude(s) for diagram number 242
      helas_CD_VVV1_0( w_fp[55], w_fp[4], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[83], w_fp[4], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[84], w_fp[4], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 243 OF 1240 ***

      // Wavefunction(s) for diagram number 243
      // (none)

      // Amplitude(s) for diagram number 243
      helas_CD_FFV1_0( w_fp[3], w_fp[9], w_fp[55], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[9], w_fp[83], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[9], w_fp[84], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];

      // *** DIAGRAM 244 OF 1240 ***

      // Wavefunction(s) for diagram number 244
      // (none)

      // Amplitude(s) for diagram number 244
      helas_CD_FFV1_0( w_fp[46], w_fp[34], w_fp[55], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[34], w_fp[83], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[34], w_fp[84], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];

      // *** DIAGRAM 245 OF 1240 ***

      // Wavefunction(s) for diagram number 245
      // (none)

      // Amplitude(s) for diagram number 245
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[30], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[31], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[32], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];

      // *** DIAGRAM 246 OF 1240 ***

      // Wavefunction(s) for diagram number 246
      // (none)

      // Amplitude(s) for diagram number 246
      helas_CD_VVV1_0( w_fp[1], w_fp[30], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[31], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[32], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 247 OF 1240 ***

      // Wavefunction(s) for diagram number 247
      helas_CD_FFV1_2( w_fp[3], w_fp[0], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[62] );
      helas_CD_FFV1_1( w_fp[2], w_fp[1], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[77] );
      helas_CD_FFV1_2( w_fp[62], w_fp[4], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[34] );
      helas_CD_FFV1_1( w_fp[77], w_fp[5], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[9] );

      // Amplitude(s) for diagram number 247
      helas_CD_FFV1_0( w_fp[34], w_fp[9], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] -= amp_sv[0];

      // *** DIAGRAM 248 OF 1240 ***

      // Wavefunction(s) for diagram number 248
      helas_CD_FFV1_1( w_fp[77], w_fp[6], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[85] );

      // Amplitude(s) for diagram number 248
      helas_CD_FFV1_0( w_fp[34], w_fp[85], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[47] -= amp_sv[0];

      // *** DIAGRAM 249 OF 1240 ***

      // Wavefunction(s) for diagram number 249
      helas_CD_FFV1_2( w_fp[62], w_fp[5], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[86] );
      helas_CD_FFV1_1( w_fp[77], w_fp[4], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[87] );

      // Amplitude(s) for diagram number 249
      helas_CD_FFV1_0( w_fp[86], w_fp[87], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] -= amp_sv[0];

      // *** DIAGRAM 250 OF 1240 ***

      // Wavefunction(s) for diagram number 250
      // (none)

      // Amplitude(s) for diagram number 250
      helas_CD_FFV1_0( w_fp[86], w_fp[85], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] -= amp_sv[0];

      // *** DIAGRAM 251 OF 1240 ***

      // Wavefunction(s) for diagram number 251
      helas_CD_FFV1_2( w_fp[62], w_fp[6], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[88] );

      // Amplitude(s) for diagram number 251
      helas_CD_FFV1_0( w_fp[88], w_fp[87], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= amp_sv[0];

      // *** DIAGRAM 252 OF 1240 ***

      // Wavefunction(s) for diagram number 252
      // (none)

      // Amplitude(s) for diagram number 252
      helas_CD_FFV1_0( w_fp[88], w_fp[9], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] -= amp_sv[0];

      // *** DIAGRAM 253 OF 1240 ***

      // Wavefunction(s) for diagram number 253
      helas_CD_FFV1P0_3( w_fp[62], w_fp[77], COUPs[1], 1.0, 0., 0., w_fp[89] );

      // Amplitude(s) for diagram number 253
      helas_CD_VVV1_0( w_fp[24], w_fp[6], w_fp[89], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];

      // *** DIAGRAM 254 OF 1240 ***

      // Wavefunction(s) for diagram number 254
      helas_CD_FFV1_2( w_fp[62], w_fp[24], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[90] );

      // Amplitude(s) for diagram number 254
      helas_CD_FFV1_0( w_fp[90], w_fp[77], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 255 OF 1240 ***

      // Wavefunction(s) for diagram number 255
      // (none)

      // Amplitude(s) for diagram number 255
      helas_CD_FFV1_0( w_fp[88], w_fp[77], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 256 OF 1240 ***

      // Wavefunction(s) for diagram number 256
      // (none)

      // Amplitude(s) for diagram number 256
      helas_CD_VVV1_0( w_fp[27], w_fp[5], w_fp[89], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];

      // *** DIAGRAM 257 OF 1240 ***

      // Wavefunction(s) for diagram number 257
      helas_CD_FFV1_2( w_fp[62], w_fp[27], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[91] );

      // Amplitude(s) for diagram number 257
      helas_CD_FFV1_0( w_fp[91], w_fp[77], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 258 OF 1240 ***

      // Wavefunction(s) for diagram number 258
      // (none)

      // Amplitude(s) for diagram number 258
      helas_CD_FFV1_0( w_fp[86], w_fp[77], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 259 OF 1240 ***

      // Wavefunction(s) for diagram number 259
      // (none)

      // Amplitude(s) for diagram number 259
      helas_CD_VVV1_0( w_fp[4], w_fp[29], w_fp[89], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];

      // *** DIAGRAM 260 OF 1240 ***

      // Wavefunction(s) for diagram number 260
      // (none)

      // Amplitude(s) for diagram number 260
      helas_CD_FFV1_0( w_fp[34], w_fp[77], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 261 OF 1240 ***

      // Wavefunction(s) for diagram number 261
      helas_CD_FFV1_2( w_fp[62], w_fp[29], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[89] );

      // Amplitude(s) for diagram number 261
      helas_CD_FFV1_0( w_fp[89], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 262 OF 1240 ***

      // Wavefunction(s) for diagram number 262
      // (none)

      // Amplitude(s) for diagram number 262
      helas_CD_FFV1_0( w_fp[62], w_fp[77], w_fp[30], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[62], w_fp[77], w_fp[31], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[62], w_fp[77], w_fp[32], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];

      // *** DIAGRAM 263 OF 1240 ***

      // Wavefunction(s) for diagram number 263
      helas_CD_FFV1P0_3( w_fp[62], w_fp[2], COUPs[1], 1.0, 0., 0., w_fp[92] );

      // Amplitude(s) for diagram number 263
      helas_CD_VVV1_0( w_fp[92], w_fp[63], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 264 OF 1240 ***

      // Wavefunction(s) for diagram number 264
      // (none)

      // Amplitude(s) for diagram number 264
      helas_CD_VVV1_0( w_fp[92], w_fp[64], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 265 OF 1240 ***

      // Wavefunction(s) for diagram number 265
      // (none)

      // Amplitude(s) for diagram number 265
      helas_CD_VVVV1_0( w_fp[61], w_fp[5], w_fp[6], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[61], w_fp[5], w_fp[6], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[61], w_fp[5], w_fp[6], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 266 OF 1240 ***

      // Wavefunction(s) for diagram number 266
      helas_CD_FFV1_1( w_fp[2], w_fp[61], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[93] );

      // Amplitude(s) for diagram number 266
      helas_CD_FFV1_0( w_fp[86], w_fp[93], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 267 OF 1240 ***

      // Wavefunction(s) for diagram number 267
      // (none)

      // Amplitude(s) for diagram number 267
      helas_CD_FFV1_0( w_fp[86], w_fp[2], w_fp[64], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];

      // *** DIAGRAM 268 OF 1240 ***

      // Wavefunction(s) for diagram number 268
      // (none)

      // Amplitude(s) for diagram number 268
      helas_CD_FFV1_0( w_fp[88], w_fp[93], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 269 OF 1240 ***

      // Wavefunction(s) for diagram number 269
      // (none)

      // Amplitude(s) for diagram number 269
      helas_CD_FFV1_0( w_fp[88], w_fp[2], w_fp[63], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];

      // *** DIAGRAM 270 OF 1240 ***

      // Wavefunction(s) for diagram number 270
      helas_CD_FFV1_2( w_fp[62], w_fp[61], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[94] );

      // Amplitude(s) for diagram number 270
      helas_CD_FFV1_0( w_fp[94], w_fp[39], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 271 OF 1240 ***

      // Wavefunction(s) for diagram number 271
      helas_CD_FFV1P0_3( w_fp[62], w_fp[39], COUPs[1], 1.0, 0., 0., w_fp[95] );

      // Amplitude(s) for diagram number 271
      helas_CD_VVV1_0( w_fp[61], w_fp[6], w_fp[95], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[81] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];

      // *** DIAGRAM 272 OF 1240 ***

      // Wavefunction(s) for diagram number 272
      // (none)

      // Amplitude(s) for diagram number 272
      helas_CD_FFV1_0( w_fp[88], w_fp[39], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 273 OF 1240 ***

      // Wavefunction(s) for diagram number 273
      // (none)

      // Amplitude(s) for diagram number 273
      helas_CD_FFV1_0( w_fp[94], w_fp[47], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 274 OF 1240 ***

      // Wavefunction(s) for diagram number 274
      helas_CD_FFV1P0_3( w_fp[62], w_fp[47], COUPs[1], 1.0, 0., 0., w_fp[96] );

      // Amplitude(s) for diagram number 274
      helas_CD_VVV1_0( w_fp[61], w_fp[5], w_fp[96], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[105] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 275 OF 1240 ***

      // Wavefunction(s) for diagram number 275
      // (none)

      // Amplitude(s) for diagram number 275
      helas_CD_FFV1_0( w_fp[86], w_fp[47], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 276 OF 1240 ***

      // Wavefunction(s) for diagram number 276
      // (none)

      // Amplitude(s) for diagram number 276
      helas_CD_FFV1_0( w_fp[94], w_fp[2], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 277 OF 1240 ***

      // Wavefunction(s) for diagram number 277
      // (none)

      // Amplitude(s) for diagram number 277
      helas_CD_VVV1_0( w_fp[61], w_fp[29], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 278 OF 1240 ***

      // Wavefunction(s) for diagram number 278
      // (none)

      // Amplitude(s) for diagram number 278
      helas_CD_FFV1_0( w_fp[89], w_fp[2], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];

      // *** DIAGRAM 279 OF 1240 ***

      // Wavefunction(s) for diagram number 279
      // (none)

      // Amplitude(s) for diagram number 279
      helas_CD_VVV1_0( w_fp[92], w_fp[69], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 280 OF 1240 ***

      // Wavefunction(s) for diagram number 280
      // (none)

      // Amplitude(s) for diagram number 280
      helas_CD_VVV1_0( w_fp[92], w_fp[70], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 281 OF 1240 ***

      // Wavefunction(s) for diagram number 281
      // (none)

      // Amplitude(s) for diagram number 281
      helas_CD_VVVV1_0( w_fp[66], w_fp[4], w_fp[6], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[66], w_fp[4], w_fp[6], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[66], w_fp[4], w_fp[6], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 282 OF 1240 ***

      // Wavefunction(s) for diagram number 282
      helas_CD_FFV1_1( w_fp[2], w_fp[66], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[94] );

      // Amplitude(s) for diagram number 282
      helas_CD_FFV1_0( w_fp[34], w_fp[94], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 283 OF 1240 ***

      // Wavefunction(s) for diagram number 283
      // (none)

      // Amplitude(s) for diagram number 283
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[70], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];

      // *** DIAGRAM 284 OF 1240 ***

      // Wavefunction(s) for diagram number 284
      // (none)

      // Amplitude(s) for diagram number 284
      helas_CD_FFV1_0( w_fp[88], w_fp[94], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 285 OF 1240 ***

      // Wavefunction(s) for diagram number 285
      // (none)

      // Amplitude(s) for diagram number 285
      helas_CD_FFV1_0( w_fp[88], w_fp[2], w_fp[69], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];

      // *** DIAGRAM 286 OF 1240 ***

      // Wavefunction(s) for diagram number 286
      helas_CD_FFV1_2( w_fp[62], w_fp[66], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[97] );

      // Amplitude(s) for diagram number 286
      helas_CD_FFV1_0( w_fp[97], w_fp[33], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 287 OF 1240 ***

      // Wavefunction(s) for diagram number 287
      helas_CD_FFV1P0_3( w_fp[62], w_fp[33], COUPs[1], 1.0, 0., 0., w_fp[98] );

      // Amplitude(s) for diagram number 287
      helas_CD_VVV1_0( w_fp[66], w_fp[6], w_fp[98], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[57] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];

      // *** DIAGRAM 288 OF 1240 ***

      // Wavefunction(s) for diagram number 288
      // (none)

      // Amplitude(s) for diagram number 288
      helas_CD_FFV1_0( w_fp[88], w_fp[33], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 289 OF 1240 ***

      // Wavefunction(s) for diagram number 289
      // (none)

      // Amplitude(s) for diagram number 289
      helas_CD_FFV1_0( w_fp[97], w_fp[47], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 290 OF 1240 ***

      // Wavefunction(s) for diagram number 290
      // (none)

      // Amplitude(s) for diagram number 290
      helas_CD_VVV1_0( w_fp[66], w_fp[4], w_fp[96], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[107] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];

      // *** DIAGRAM 291 OF 1240 ***

      // Wavefunction(s) for diagram number 291
      // (none)

      // Amplitude(s) for diagram number 291
      helas_CD_FFV1_0( w_fp[34], w_fp[47], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 292 OF 1240 ***

      // Wavefunction(s) for diagram number 292
      // (none)

      // Amplitude(s) for diagram number 292
      helas_CD_FFV1_0( w_fp[97], w_fp[2], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];

      // *** DIAGRAM 293 OF 1240 ***

      // Wavefunction(s) for diagram number 293
      // (none)

      // Amplitude(s) for diagram number 293
      helas_CD_VVV1_0( w_fp[66], w_fp[27], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 294 OF 1240 ***

      // Wavefunction(s) for diagram number 294
      // (none)

      // Amplitude(s) for diagram number 294
      helas_CD_FFV1_0( w_fp[91], w_fp[2], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];

      // *** DIAGRAM 295 OF 1240 ***

      // Wavefunction(s) for diagram number 295
      // (none)

      // Amplitude(s) for diagram number 295
      helas_CD_VVV1_0( w_fp[92], w_fp[74], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 296 OF 1240 ***

      // Wavefunction(s) for diagram number 296
      // (none)

      // Amplitude(s) for diagram number 296
      helas_CD_VVV1_0( w_fp[92], w_fp[75], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 297 OF 1240 ***

      // Wavefunction(s) for diagram number 297
      // (none)

      // Amplitude(s) for diagram number 297
      helas_CD_VVVV1_0( w_fp[72], w_fp[4], w_fp[5], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[72], w_fp[4], w_fp[5], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[72], w_fp[4], w_fp[5], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 298 OF 1240 ***

      // Wavefunction(s) for diagram number 298
      helas_CD_FFV1_1( w_fp[2], w_fp[72], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[97] );

      // Amplitude(s) for diagram number 298
      helas_CD_FFV1_0( w_fp[34], w_fp[97], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 299 OF 1240 ***

      // Wavefunction(s) for diagram number 299
      // (none)

      // Amplitude(s) for diagram number 299
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[75], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[47] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];

      // *** DIAGRAM 300 OF 1240 ***

      // Wavefunction(s) for diagram number 300
      // (none)

      // Amplitude(s) for diagram number 300
      helas_CD_FFV1_0( w_fp[86], w_fp[97], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 301 OF 1240 ***

      // Wavefunction(s) for diagram number 301
      // (none)

      // Amplitude(s) for diagram number 301
      helas_CD_FFV1_0( w_fp[86], w_fp[2], w_fp[74], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];

      // *** DIAGRAM 302 OF 1240 ***

      // Wavefunction(s) for diagram number 302
      helas_CD_FFV1_2( w_fp[62], w_fp[72], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[99] );

      // Amplitude(s) for diagram number 302
      helas_CD_FFV1_0( w_fp[99], w_fp[33], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 303 OF 1240 ***

      // Wavefunction(s) for diagram number 303
      // (none)

      // Amplitude(s) for diagram number 303
      helas_CD_VVV1_0( w_fp[72], w_fp[5], w_fp[98], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[59] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];

      // *** DIAGRAM 304 OF 1240 ***

      // Wavefunction(s) for diagram number 304
      // (none)

      // Amplitude(s) for diagram number 304
      helas_CD_FFV1_0( w_fp[86], w_fp[33], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 305 OF 1240 ***

      // Wavefunction(s) for diagram number 305
      // (none)

      // Amplitude(s) for diagram number 305
      helas_CD_FFV1_0( w_fp[99], w_fp[39], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 306 OF 1240 ***

      // Wavefunction(s) for diagram number 306
      // (none)

      // Amplitude(s) for diagram number 306
      helas_CD_VVV1_0( w_fp[72], w_fp[4], w_fp[95], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[83] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];

      // *** DIAGRAM 307 OF 1240 ***

      // Wavefunction(s) for diagram number 307
      // (none)

      // Amplitude(s) for diagram number 307
      helas_CD_FFV1_0( w_fp[34], w_fp[39], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 308 OF 1240 ***

      // Wavefunction(s) for diagram number 308
      // (none)

      // Amplitude(s) for diagram number 308
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];

      // *** DIAGRAM 309 OF 1240 ***

      // Wavefunction(s) for diagram number 309
      // (none)

      // Amplitude(s) for diagram number 309
      helas_CD_VVV1_0( w_fp[72], w_fp[24], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 310 OF 1240 ***

      // Wavefunction(s) for diagram number 310
      // (none)

      // Amplitude(s) for diagram number 310
      helas_CD_FFV1_0( w_fp[90], w_fp[2], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];

      // *** DIAGRAM 311 OF 1240 ***

      // Wavefunction(s) for diagram number 311
      helas_CD_FFV1_2( w_fp[62], w_fp[1], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[99] );

      // Amplitude(s) for diagram number 311
      helas_CD_FFV1_0( w_fp[99], w_fp[35], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[65] -= amp_sv[0];

      // *** DIAGRAM 312 OF 1240 ***

      // Wavefunction(s) for diagram number 312
      // (none)

      // Amplitude(s) for diagram number 312
      helas_CD_FFV1_0( w_fp[99], w_fp[36], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[71] -= amp_sv[0];

      // *** DIAGRAM 313 OF 1240 ***

      // Wavefunction(s) for diagram number 313
      helas_CD_FFV1_1( w_fp[33], w_fp[1], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[100] );

      // Amplitude(s) for diagram number 313
      helas_CD_FFV1_0( w_fp[86], w_fp[100], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[59] -= amp_sv[0];

      // *** DIAGRAM 314 OF 1240 ***

      // Wavefunction(s) for diagram number 314
      // (none)

      // Amplitude(s) for diagram number 314
      helas_CD_FFV1_0( w_fp[86], w_fp[36], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[69] -= amp_sv[0];

      // *** DIAGRAM 315 OF 1240 ***

      // Wavefunction(s) for diagram number 315
      // (none)

      // Amplitude(s) for diagram number 315
      helas_CD_FFV1_0( w_fp[88], w_fp[100], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[57] -= amp_sv[0];

      // *** DIAGRAM 316 OF 1240 ***

      // Wavefunction(s) for diagram number 316
      // (none)

      // Amplitude(s) for diagram number 316
      helas_CD_FFV1_0( w_fp[88], w_fp[35], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[63] -= amp_sv[0];

      // *** DIAGRAM 317 OF 1240 ***

      // Wavefunction(s) for diagram number 317
      // (none)

      // Amplitude(s) for diagram number 317
      helas_CD_FFV1_0( w_fp[99], w_fp[33], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 318 OF 1240 ***

      // Wavefunction(s) for diagram number 318
      // (none)

      // Amplitude(s) for diagram number 318
      helas_CD_VVV1_0( w_fp[1], w_fp[29], w_fp[98], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];

      // *** DIAGRAM 319 OF 1240 ***

      // Wavefunction(s) for diagram number 319
      // (none)

      // Amplitude(s) for diagram number 319
      helas_CD_FFV1_0( w_fp[89], w_fp[33], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 320 OF 1240 ***

      // Wavefunction(s) for diagram number 320
      // (none)

      // Amplitude(s) for diagram number 320
      helas_CD_FFV1_0( w_fp[99], w_fp[43], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[89] -= amp_sv[0];

      // *** DIAGRAM 321 OF 1240 ***

      // Wavefunction(s) for diagram number 321
      // (none)

      // Amplitude(s) for diagram number 321
      helas_CD_FFV1_0( w_fp[99], w_fp[44], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[95] -= amp_sv[0];

      // *** DIAGRAM 322 OF 1240 ***

      // Wavefunction(s) for diagram number 322
      helas_CD_FFV1_1( w_fp[39], w_fp[1], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[89] );

      // Amplitude(s) for diagram number 322
      helas_CD_FFV1_0( w_fp[34], w_fp[89], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[83] -= amp_sv[0];

      // *** DIAGRAM 323 OF 1240 ***

      // Wavefunction(s) for diagram number 323
      // (none)

      // Amplitude(s) for diagram number 323
      helas_CD_FFV1_0( w_fp[34], w_fp[44], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[93] -= amp_sv[0];

      // *** DIAGRAM 324 OF 1240 ***

      // Wavefunction(s) for diagram number 324
      // (none)

      // Amplitude(s) for diagram number 324
      helas_CD_FFV1_0( w_fp[88], w_fp[89], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[81] -= amp_sv[0];

      // *** DIAGRAM 325 OF 1240 ***

      // Wavefunction(s) for diagram number 325
      // (none)

      // Amplitude(s) for diagram number 325
      helas_CD_FFV1_0( w_fp[88], w_fp[43], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[87] -= amp_sv[0];

      // *** DIAGRAM 326 OF 1240 ***

      // Wavefunction(s) for diagram number 326
      // (none)

      // Amplitude(s) for diagram number 326
      helas_CD_FFV1_0( w_fp[99], w_fp[39], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 327 OF 1240 ***

      // Wavefunction(s) for diagram number 327
      // (none)

      // Amplitude(s) for diagram number 327
      helas_CD_VVV1_0( w_fp[1], w_fp[27], w_fp[95], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];

      // *** DIAGRAM 328 OF 1240 ***

      // Wavefunction(s) for diagram number 328
      // (none)

      // Amplitude(s) for diagram number 328
      helas_CD_FFV1_0( w_fp[91], w_fp[39], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 329 OF 1240 ***

      // Wavefunction(s) for diagram number 329
      // (none)

      // Amplitude(s) for diagram number 329
      helas_CD_FFV1_0( w_fp[99], w_fp[49], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[113] -= amp_sv[0];

      // *** DIAGRAM 330 OF 1240 ***

      // Wavefunction(s) for diagram number 330
      // (none)

      // Amplitude(s) for diagram number 330
      helas_CD_FFV1_0( w_fp[99], w_fp[50], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 331 OF 1240 ***

      // Wavefunction(s) for diagram number 331
      helas_CD_FFV1_1( w_fp[47], w_fp[1], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[91] );

      // Amplitude(s) for diagram number 331
      helas_CD_FFV1_0( w_fp[34], w_fp[91], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[107] -= amp_sv[0];

      // *** DIAGRAM 332 OF 1240 ***

      // Wavefunction(s) for diagram number 332
      // (none)

      // Amplitude(s) for diagram number 332
      helas_CD_FFV1_0( w_fp[34], w_fp[50], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[117] -= amp_sv[0];

      // *** DIAGRAM 333 OF 1240 ***

      // Wavefunction(s) for diagram number 333
      // (none)

      // Amplitude(s) for diagram number 333
      helas_CD_FFV1_0( w_fp[86], w_fp[91], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[105] -= amp_sv[0];

      // *** DIAGRAM 334 OF 1240 ***

      // Wavefunction(s) for diagram number 334
      // (none)

      // Amplitude(s) for diagram number 334
      helas_CD_FFV1_0( w_fp[86], w_fp[49], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[111] -= amp_sv[0];

      // *** DIAGRAM 335 OF 1240 ***

      // Wavefunction(s) for diagram number 335
      // (none)

      // Amplitude(s) for diagram number 335
      helas_CD_FFV1_0( w_fp[99], w_fp[47], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 336 OF 1240 ***

      // Wavefunction(s) for diagram number 336
      // (none)

      // Amplitude(s) for diagram number 336
      helas_CD_VVV1_0( w_fp[1], w_fp[24], w_fp[96], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 337 OF 1240 ***

      // Wavefunction(s) for diagram number 337
      // (none)

      // Amplitude(s) for diagram number 337
      helas_CD_FFV1_0( w_fp[90], w_fp[47], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 338 OF 1240 ***

      // Wavefunction(s) for diagram number 338
      // (none)

      // Amplitude(s) for diagram number 338
      helas_CD_FFV1_0( w_fp[99], w_fp[17], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 339 OF 1240 ***

      // Wavefunction(s) for diagram number 339
      // (none)

      // Amplitude(s) for diagram number 339
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[42], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[65] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 340 OF 1240 ***

      // Wavefunction(s) for diagram number 340
      // (none)

      // Amplitude(s) for diagram number 340
      helas_CD_VVV1_0( w_fp[92], w_fp[59], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 341 OF 1240 ***

      // Wavefunction(s) for diagram number 341
      // (none)

      // Amplitude(s) for diagram number 341
      helas_CD_VVV1_0( w_fp[92], w_fp[1], w_fp[42], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 342 OF 1240 ***

      // Wavefunction(s) for diagram number 342
      // (none)

      // Amplitude(s) for diagram number 342
      helas_CD_VVVV1_0( w_fp[1], w_fp[24], w_fp[6], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[24], w_fp[6], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[24], w_fp[6], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 343 OF 1240 ***

      // Wavefunction(s) for diagram number 343
      // (none)

      // Amplitude(s) for diagram number 343
      helas_CD_FFV1_0( w_fp[88], w_fp[2], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];

      // *** DIAGRAM 344 OF 1240 ***

      // Wavefunction(s) for diagram number 344
      // (none)

      // Amplitude(s) for diagram number 344
      helas_CD_FFV1_0( w_fp[88], w_fp[17], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 345 OF 1240 ***

      // Wavefunction(s) for diagram number 345
      // (none)

      // Amplitude(s) for diagram number 345
      helas_CD_FFV1_0( w_fp[99], w_fp[15], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 346 OF 1240 ***

      // Wavefunction(s) for diagram number 346
      // (none)

      // Amplitude(s) for diagram number 346
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[71] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];

      // *** DIAGRAM 347 OF 1240 ***

      // Wavefunction(s) for diagram number 347
      // (none)

      // Amplitude(s) for diagram number 347
      helas_CD_VVV1_0( w_fp[92], w_fp[68], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 348 OF 1240 ***

      // Wavefunction(s) for diagram number 348
      // (none)

      // Amplitude(s) for diagram number 348
      helas_CD_VVV1_0( w_fp[92], w_fp[1], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 349 OF 1240 ***

      // Wavefunction(s) for diagram number 349
      // (none)

      // Amplitude(s) for diagram number 349
      helas_CD_VVVV1_0( w_fp[1], w_fp[27], w_fp[5], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[27], w_fp[5], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[27], w_fp[5], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 350 OF 1240 ***

      // Wavefunction(s) for diagram number 350
      // (none)

      // Amplitude(s) for diagram number 350
      helas_CD_FFV1_0( w_fp[86], w_fp[2], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];

      // *** DIAGRAM 351 OF 1240 ***

      // Wavefunction(s) for diagram number 351
      // (none)

      // Amplitude(s) for diagram number 351
      helas_CD_FFV1_0( w_fp[86], w_fp[15], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 352 OF 1240 ***

      // Wavefunction(s) for diagram number 352
      // (none)

      // Amplitude(s) for diagram number 352
      helas_CD_FFV1_0( w_fp[99], w_fp[18], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 353 OF 1240 ***

      // Wavefunction(s) for diagram number 353
      // (none)

      // Amplitude(s) for diagram number 353
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[19], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[65] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 354 OF 1240 ***

      // Wavefunction(s) for diagram number 354
      // (none)

      // Amplitude(s) for diagram number 354
      helas_CD_VVV1_0( w_fp[92], w_fp[67], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 355 OF 1240 ***

      // Wavefunction(s) for diagram number 355
      // (none)

      // Amplitude(s) for diagram number 355
      helas_CD_VVV1_0( w_fp[92], w_fp[1], w_fp[19], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 356 OF 1240 ***

      // Wavefunction(s) for diagram number 356
      // (none)

      // Amplitude(s) for diagram number 356
      helas_CD_VVVV1_0( w_fp[1], w_fp[4], w_fp[29], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[4], w_fp[29], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[4], w_fp[29], w_fp[92], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 357 OF 1240 ***

      // Wavefunction(s) for diagram number 357
      // (none)

      // Amplitude(s) for diagram number 357
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[67], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];

      // *** DIAGRAM 358 OF 1240 ***

      // Wavefunction(s) for diagram number 358
      // (none)

      // Amplitude(s) for diagram number 358
      helas_CD_FFV1_0( w_fp[34], w_fp[18], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 359 OF 1240 ***

      // Wavefunction(s) for diagram number 359
      // (none)

      // Amplitude(s) for diagram number 359
      helas_CD_VVV1_0( w_fp[73], w_fp[6], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[79], w_fp[6], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[80], w_fp[6], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 360 OF 1240 ***

      // Wavefunction(s) for diagram number 360
      // (none)

      // Amplitude(s) for diagram number 360
      helas_CD_FFV1_0( w_fp[88], w_fp[2], w_fp[73], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[88], w_fp[2], w_fp[79], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[88], w_fp[2], w_fp[80], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];

      // *** DIAGRAM 361 OF 1240 ***

      // Wavefunction(s) for diagram number 361
      // (none)

      // Amplitude(s) for diagram number 361
      helas_CD_FFV1_0( w_fp[62], w_fp[47], w_fp[73], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[62], w_fp[47], w_fp[79], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[62], w_fp[47], w_fp[80], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 362 OF 1240 ***

      // Wavefunction(s) for diagram number 362
      // (none)

      // Amplitude(s) for diagram number 362
      helas_CD_VVV1_0( w_fp[57], w_fp[5], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[81], w_fp[5], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[82], w_fp[5], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 363 OF 1240 ***

      // Wavefunction(s) for diagram number 363
      // (none)

      // Amplitude(s) for diagram number 363
      helas_CD_FFV1_0( w_fp[86], w_fp[2], w_fp[57], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[86], w_fp[2], w_fp[81], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[86], w_fp[2], w_fp[82], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];

      // *** DIAGRAM 364 OF 1240 ***

      // Wavefunction(s) for diagram number 364
      // (none)

      // Amplitude(s) for diagram number 364
      helas_CD_FFV1_0( w_fp[62], w_fp[39], w_fp[57], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[62], w_fp[39], w_fp[81], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[62], w_fp[39], w_fp[82], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];

      // *** DIAGRAM 365 OF 1240 ***

      // Wavefunction(s) for diagram number 365
      // (none)

      // Amplitude(s) for diagram number 365
      helas_CD_VVV1_0( w_fp[55], w_fp[4], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[83], w_fp[4], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[84], w_fp[4], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 366 OF 1240 ***

      // Wavefunction(s) for diagram number 366
      // (none)

      // Amplitude(s) for diagram number 366
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[55], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[83], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[34], w_fp[2], w_fp[84], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];

      // *** DIAGRAM 367 OF 1240 ***

      // Wavefunction(s) for diagram number 367
      // (none)

      // Amplitude(s) for diagram number 367
      helas_CD_FFV1_0( w_fp[62], w_fp[33], w_fp[55], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[62], w_fp[33], w_fp[83], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[62], w_fp[33], w_fp[84], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];

      // *** DIAGRAM 368 OF 1240 ***

      // Wavefunction(s) for diagram number 368
      // (none)

      // Amplitude(s) for diagram number 368
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[30], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[65] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[31], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[32], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 369 OF 1240 ***

      // Wavefunction(s) for diagram number 369
      // (none)

      // Amplitude(s) for diagram number 369
      helas_CD_VVV1_0( w_fp[1], w_fp[30], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[31], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[32], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 370 OF 1240 ***

      // Wavefunction(s) for diagram number 370
      helas_CD_VVV1P0_1( w_fp[0], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[92] );
      helas_CD_FFV1_2( w_fp[3], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[99] );

      // Amplitude(s) for diagram number 370
      helas_CD_FFV1_0( w_fp[99], w_fp[9], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 371 OF 1240 ***

      // Wavefunction(s) for diagram number 371
      // (none)

      // Amplitude(s) for diagram number 371
      helas_CD_FFV1_0( w_fp[99], w_fp[85], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 372 OF 1240 ***

      // Wavefunction(s) for diagram number 372
      helas_CD_VVV1P0_1( w_fp[92], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[62] );
      helas_CD_FFV1P0_3( w_fp[3], w_fp[77], COUPs[1], 1.0, 0., 0., w_fp[34] );

      // Amplitude(s) for diagram number 372
      helas_CD_VVV1_0( w_fp[62], w_fp[34], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 373 OF 1240 ***

      // Wavefunction(s) for diagram number 373
      // (none)

      // Amplitude(s) for diagram number 373
      helas_CD_FFV1_0( w_fp[3], w_fp[85], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];

      // *** DIAGRAM 374 OF 1240 ***

      // Wavefunction(s) for diagram number 374
      helas_CD_VVV1P0_1( w_fp[92], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[86] );

      // Amplitude(s) for diagram number 374
      helas_CD_VVV1_0( w_fp[86], w_fp[34], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 375 OF 1240 ***

      // Wavefunction(s) for diagram number 375
      // (none)

      // Amplitude(s) for diagram number 375
      helas_CD_FFV1_0( w_fp[3], w_fp[9], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];

      // *** DIAGRAM 376 OF 1240 ***

      // Wavefunction(s) for diagram number 376
      helas_CD_VVVV1P0_1( w_fp[92], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[88] );
      helas_CD_VVVV3P0_1( w_fp[92], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[90] );
      helas_CD_VVVV4P0_1( w_fp[92], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[96] );

      // Amplitude(s) for diagram number 376
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[88], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 377 OF 1240 ***

      // Wavefunction(s) for diagram number 377
      helas_CD_FFV1_1( w_fp[77], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[95] );

      // Amplitude(s) for diagram number 377
      helas_CD_FFV1_0( w_fp[38], w_fp[95], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 378 OF 1240 ***

      // Wavefunction(s) for diagram number 378
      helas_CD_FFV1_2( w_fp[38], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[98] );

      // Amplitude(s) for diagram number 378
      helas_CD_FFV1_0( w_fp[98], w_fp[77], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 379 OF 1240 ***

      // Wavefunction(s) for diagram number 379
      // (none)

      // Amplitude(s) for diagram number 379
      helas_CD_FFV1_0( w_fp[38], w_fp[77], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];

      // *** DIAGRAM 380 OF 1240 ***

      // Wavefunction(s) for diagram number 380
      // (none)

      // Amplitude(s) for diagram number 380
      helas_CD_FFV1_0( w_fp[41], w_fp[95], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 381 OF 1240 ***

      // Wavefunction(s) for diagram number 381
      helas_CD_FFV1_2( w_fp[41], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[101] );

      // Amplitude(s) for diagram number 381
      helas_CD_FFV1_0( w_fp[101], w_fp[77], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 382 OF 1240 ***

      // Wavefunction(s) for diagram number 382
      // (none)

      // Amplitude(s) for diagram number 382
      helas_CD_FFV1_0( w_fp[41], w_fp[77], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];

      // *** DIAGRAM 383 OF 1240 ***

      // Wavefunction(s) for diagram number 383
      // (none)

      // Amplitude(s) for diagram number 383
      helas_CD_FFV1_0( w_fp[3], w_fp[95], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];

      // *** DIAGRAM 384 OF 1240 ***

      // Wavefunction(s) for diagram number 384
      // (none)

      // Amplitude(s) for diagram number 384
      helas_CD_FFV1_0( w_fp[99], w_fp[77], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];

      // *** DIAGRAM 385 OF 1240 ***

      // Wavefunction(s) for diagram number 385
      helas_CD_VVV1P0_1( w_fp[92], w_fp[29], COUPs[0], 1.0, 0., 0., w_fp[95] );

      // Amplitude(s) for diagram number 385
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[95], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 386 OF 1240 ***

      // Wavefunction(s) for diagram number 386
      helas_CD_FFV1_1( w_fp[2], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[102] );

      // Amplitude(s) for diagram number 386
      helas_CD_FFV1_0( w_fp[22], w_fp[102], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 387 OF 1240 ***

      // Wavefunction(s) for diagram number 387
      // (none)

      // Amplitude(s) for diagram number 387
      helas_CD_FFV1_0( w_fp[21], w_fp[102], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 388 OF 1240 ***

      // Wavefunction(s) for diagram number 388
      helas_CD_FFV1P0_3( w_fp[52], w_fp[2], COUPs[1], 1.0, 0., 0., w_fp[103] );

      // Amplitude(s) for diagram number 388
      helas_CD_VVV1_0( w_fp[62], w_fp[103], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 389 OF 1240 ***

      // Wavefunction(s) for diagram number 389
      // (none)

      // Amplitude(s) for diagram number 389
      helas_CD_FFV1_0( w_fp[21], w_fp[2], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];

      // *** DIAGRAM 390 OF 1240 ***

      // Wavefunction(s) for diagram number 390
      // (none)

      // Amplitude(s) for diagram number 390
      helas_CD_VVV1_0( w_fp[86], w_fp[103], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 391 OF 1240 ***

      // Wavefunction(s) for diagram number 391
      // (none)

      // Amplitude(s) for diagram number 391
      helas_CD_FFV1_0( w_fp[22], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 392 OF 1240 ***

      // Wavefunction(s) for diagram number 392
      // (none)

      // Amplitude(s) for diagram number 392
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[88], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 393 OF 1240 ***

      // Wavefunction(s) for diagram number 393
      helas_CD_FFV1_2( w_fp[52], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[104] );

      // Amplitude(s) for diagram number 393
      helas_CD_FFV1_0( w_fp[104], w_fp[39], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 394 OF 1240 ***

      // Wavefunction(s) for diagram number 394
      helas_CD_FFV1_1( w_fp[39], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[105] );

      // Amplitude(s) for diagram number 394
      helas_CD_FFV1_0( w_fp[52], w_fp[105], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 395 OF 1240 ***

      // Wavefunction(s) for diagram number 395
      // (none)

      // Amplitude(s) for diagram number 395
      helas_CD_FFV1_0( w_fp[52], w_fp[39], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];

      // *** DIAGRAM 396 OF 1240 ***

      // Wavefunction(s) for diagram number 396
      // (none)

      // Amplitude(s) for diagram number 396
      helas_CD_FFV1_0( w_fp[104], w_fp[47], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 397 OF 1240 ***

      // Wavefunction(s) for diagram number 397
      helas_CD_FFV1_1( w_fp[47], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[106] );

      // Amplitude(s) for diagram number 397
      helas_CD_FFV1_0( w_fp[52], w_fp[106], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 398 OF 1240 ***

      // Wavefunction(s) for diagram number 398
      // (none)

      // Amplitude(s) for diagram number 398
      helas_CD_FFV1_0( w_fp[52], w_fp[47], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 399 OF 1240 ***

      // Wavefunction(s) for diagram number 399
      // (none)

      // Amplitude(s) for diagram number 399
      helas_CD_FFV1_0( w_fp[104], w_fp[2], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 400 OF 1240 ***

      // Wavefunction(s) for diagram number 400
      // (none)

      // Amplitude(s) for diagram number 400
      helas_CD_FFV1_0( w_fp[52], w_fp[102], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];

      // *** DIAGRAM 401 OF 1240 ***

      // Wavefunction(s) for diagram number 401
      // (none)

      // Amplitude(s) for diagram number 401
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[95], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 402 OF 1240 ***

      // Wavefunction(s) for diagram number 402
      // (none)

      // Amplitude(s) for diagram number 402
      helas_CD_FFV1_0( w_fp[71], w_fp[102], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];

      // *** DIAGRAM 403 OF 1240 ***

      // Wavefunction(s) for diagram number 403
      // (none)

      // Amplitude(s) for diagram number 403
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[70], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 404 OF 1240 ***

      // Wavefunction(s) for diagram number 404
      // (none)

      // Amplitude(s) for diagram number 404
      helas_CD_FFV1_0( w_fp[99], w_fp[94], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];

      // *** DIAGRAM 405 OF 1240 ***

      // Wavefunction(s) for diagram number 405
      // (none)

      // Amplitude(s) for diagram number 405
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[70], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 406 OF 1240 ***

      // Wavefunction(s) for diagram number 406
      // (none)

      // Amplitude(s) for diagram number 406
      helas_CD_FFV1_0( w_fp[3], w_fp[94], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 407 OF 1240 ***

      // Wavefunction(s) for diagram number 407
      // (none)

      // Amplitude(s) for diagram number 407
      helas_CD_FFV1_0( w_fp[71], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 408 OF 1240 ***

      // Wavefunction(s) for diagram number 408
      // (none)

      // Amplitude(s) for diagram number 408
      helas_CD_VVVV1_0( w_fp[92], w_fp[66], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[92], w_fp[66], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[92], w_fp[66], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 409 OF 1240 ***

      // Wavefunction(s) for diagram number 409
      helas_CD_VVV1P0_1( w_fp[92], w_fp[66], COUPs[0], 1.0, 0., 0., w_fp[104] );

      // Amplitude(s) for diagram number 409
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[104], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];

      // *** DIAGRAM 410 OF 1240 ***

      // Wavefunction(s) for diagram number 410
      helas_CD_VVV1P0_1( w_fp[92], w_fp[8], COUPs[0], 1.0, 0., 0., w_fp[107] );

      // Amplitude(s) for diagram number 410
      helas_CD_VVV1_0( w_fp[66], w_fp[6], w_fp[107], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];

      // *** DIAGRAM 411 OF 1240 ***

      // Wavefunction(s) for diagram number 411
      // (none)

      // Amplitude(s) for diagram number 411
      helas_CD_VVV1_0( w_fp[66], w_fp[8], w_fp[86], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 412 OF 1240 ***

      // Wavefunction(s) for diagram number 412
      // (none)

      // Amplitude(s) for diagram number 412
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 413 OF 1240 ***

      // Wavefunction(s) for diagram number 413
      // (none)

      // Amplitude(s) for diagram number 413
      helas_CD_FFV1_0( w_fp[3], w_fp[106], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 414 OF 1240 ***

      // Wavefunction(s) for diagram number 414
      // (none)

      // Amplitude(s) for diagram number 414
      helas_CD_FFV1_0( w_fp[99], w_fp[47], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];

      // *** DIAGRAM 415 OF 1240 ***

      // Wavefunction(s) for diagram number 415
      // (none)

      // Amplitude(s) for diagram number 415
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 416 OF 1240 ***

      // Wavefunction(s) for diagram number 416
      // (none)

      // Amplitude(s) for diagram number 416
      helas_CD_FFV1_0( w_fp[41], w_fp[102], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];

      // *** DIAGRAM 417 OF 1240 ***

      // Wavefunction(s) for diagram number 417
      // (none)

      // Amplitude(s) for diagram number 417
      helas_CD_FFV1_0( w_fp[101], w_fp[2], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];

      // *** DIAGRAM 418 OF 1240 ***

      // Wavefunction(s) for diagram number 418
      // (none)

      // Amplitude(s) for diagram number 418
      helas_CD_FFV1_0( w_fp[76], w_fp[102], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];

      // *** DIAGRAM 419 OF 1240 ***

      // Wavefunction(s) for diagram number 419
      // (none)

      // Amplitude(s) for diagram number 419
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[75], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 420 OF 1240 ***

      // Wavefunction(s) for diagram number 420
      // (none)

      // Amplitude(s) for diagram number 420
      helas_CD_FFV1_0( w_fp[99], w_fp[97], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[46] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];

      // *** DIAGRAM 421 OF 1240 ***

      // Wavefunction(s) for diagram number 421
      // (none)

      // Amplitude(s) for diagram number 421
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[75], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 422 OF 1240 ***

      // Wavefunction(s) for diagram number 422
      // (none)

      // Amplitude(s) for diagram number 422
      helas_CD_FFV1_0( w_fp[3], w_fp[97], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 423 OF 1240 ***

      // Wavefunction(s) for diagram number 423
      // (none)

      // Amplitude(s) for diagram number 423
      helas_CD_FFV1_0( w_fp[76], w_fp[2], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 424 OF 1240 ***

      // Wavefunction(s) for diagram number 424
      // (none)

      // Amplitude(s) for diagram number 424
      helas_CD_VVVV1_0( w_fp[92], w_fp[72], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[92], w_fp[72], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[92], w_fp[72], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];

      // *** DIAGRAM 425 OF 1240 ***

      // Wavefunction(s) for diagram number 425
      helas_CD_VVV1P0_1( w_fp[92], w_fp[72], COUPs[0], 1.0, 0., 0., w_fp[104] );

      // Amplitude(s) for diagram number 425
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[104], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];

      // *** DIAGRAM 426 OF 1240 ***

      // Wavefunction(s) for diagram number 426
      // (none)

      // Amplitude(s) for diagram number 426
      helas_CD_VVV1_0( w_fp[72], w_fp[5], w_fp[107], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];

      // *** DIAGRAM 427 OF 1240 ***

      // Wavefunction(s) for diagram number 427
      // (none)

      // Amplitude(s) for diagram number 427
      helas_CD_VVV1_0( w_fp[72], w_fp[8], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];

      // *** DIAGRAM 428 OF 1240 ***

      // Wavefunction(s) for diagram number 428
      // (none)

      // Amplitude(s) for diagram number 428
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 429 OF 1240 ***

      // Wavefunction(s) for diagram number 429
      // (none)

      // Amplitude(s) for diagram number 429
      helas_CD_FFV1_0( w_fp[3], w_fp[105], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];

      // *** DIAGRAM 430 OF 1240 ***

      // Wavefunction(s) for diagram number 430
      // (none)

      // Amplitude(s) for diagram number 430
      helas_CD_FFV1_0( w_fp[99], w_fp[39], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];

      // *** DIAGRAM 431 OF 1240 ***

      // Wavefunction(s) for diagram number 431
      // (none)

      // Amplitude(s) for diagram number 431
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 432 OF 1240 ***

      // Wavefunction(s) for diagram number 432
      // (none)

      // Amplitude(s) for diagram number 432
      helas_CD_FFV1_0( w_fp[38], w_fp[102], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];

      // *** DIAGRAM 433 OF 1240 ***

      // Wavefunction(s) for diagram number 433
      // (none)

      // Amplitude(s) for diagram number 433
      helas_CD_FFV1_0( w_fp[98], w_fp[2], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];

      // *** DIAGRAM 434 OF 1240 ***

      // Wavefunction(s) for diagram number 434
      helas_CD_VVV1P0_1( w_fp[92], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[104] );

      // Amplitude(s) for diagram number 434
      helas_CD_VVV1_0( w_fp[104], w_fp[10], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];

      // *** DIAGRAM 435 OF 1240 ***

      // Wavefunction(s) for diagram number 435
      // (none)

      // Amplitude(s) for diagram number 435
      helas_CD_VVV1_0( w_fp[104], w_fp[11], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 436 OF 1240 ***

      // Wavefunction(s) for diagram number 436
      // (none)

      // Amplitude(s) for diagram number 436
      helas_CD_VVVV1_0( w_fp[8], w_fp[5], w_fp[6], w_fp[104], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[8], w_fp[5], w_fp[6], w_fp[104], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[8], w_fp[5], w_fp[6], w_fp[104], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 437 OF 1240 ***

      // Wavefunction(s) for diagram number 437
      helas_CD_VVV1P0_1( w_fp[1], w_fp[8], COUPs[0], 1.0, 0., 0., w_fp[108] );

      // Amplitude(s) for diagram number 437
      helas_CD_VVV1_0( w_fp[62], w_fp[108], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 438 OF 1240 ***

      // Wavefunction(s) for diagram number 438
      // (none)

      // Amplitude(s) for diagram number 438
      helas_CD_VVV1_0( w_fp[62], w_fp[1], w_fp[11], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 439 OF 1240 ***

      // Wavefunction(s) for diagram number 439
      // (none)

      // Amplitude(s) for diagram number 439
      helas_CD_VVVV1_0( w_fp[1], w_fp[8], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[8], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[8], w_fp[6], w_fp[62], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 440 OF 1240 ***

      // Wavefunction(s) for diagram number 440
      // (none)

      // Amplitude(s) for diagram number 440
      helas_CD_VVV1_0( w_fp[86], w_fp[108], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 441 OF 1240 ***

      // Wavefunction(s) for diagram number 441
      // (none)

      // Amplitude(s) for diagram number 441
      helas_CD_VVV1_0( w_fp[86], w_fp[1], w_fp[10], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];

      // *** DIAGRAM 442 OF 1240 ***

      // Wavefunction(s) for diagram number 442
      // (none)

      // Amplitude(s) for diagram number 442
      helas_CD_VVVV1_0( w_fp[1], w_fp[8], w_fp[5], w_fp[86], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[8], w_fp[5], w_fp[86], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[8], w_fp[5], w_fp[86], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];

      // *** DIAGRAM 443 OF 1240 ***

      // Wavefunction(s) for diagram number 443
      helas_CD_VVVV1P0_1( w_fp[92], w_fp[1], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[109] );
      helas_CD_VVVV3P0_1( w_fp[92], w_fp[1], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[110] );
      helas_CD_VVVV4P0_1( w_fp[92], w_fp[1], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[111] );

      // Amplitude(s) for diagram number 443
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[109], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[110], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[111], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 444 OF 1240 ***

      // Wavefunction(s) for diagram number 444
      helas_CD_VVVV1P0_1( w_fp[92], w_fp[1], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[112] );
      helas_CD_VVVV3P0_1( w_fp[92], w_fp[1], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[113] );
      helas_CD_VVVV4P0_1( w_fp[92], w_fp[1], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[114] );

      // Amplitude(s) for diagram number 444
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[112], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[113], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[114], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];

      // *** DIAGRAM 445 OF 1240 ***

      // Wavefunction(s) for diagram number 445
      // (none)

      // Amplitude(s) for diagram number 445
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[88], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[90], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[96], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 446 OF 1240 ***

      // Wavefunction(s) for diagram number 446
      // (none)

      // Amplitude(s) for diagram number 446
      helas_CD_VVVV1_0( w_fp[92], w_fp[1], w_fp[8], w_fp[29], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[92], w_fp[1], w_fp[8], w_fp[29], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[92], w_fp[1], w_fp[8], w_fp[29], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 447 OF 1240 ***

      // Wavefunction(s) for diagram number 447
      // (none)

      // Amplitude(s) for diagram number 447
      helas_CD_VVV1_0( w_fp[8], w_fp[29], w_fp[104], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 448 OF 1240 ***

      // Wavefunction(s) for diagram number 448
      // (none)

      // Amplitude(s) for diagram number 448
      helas_CD_VVV1_0( w_fp[1], w_fp[29], w_fp[107], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];

      // *** DIAGRAM 449 OF 1240 ***

      // Wavefunction(s) for diagram number 449
      // (none)

      // Amplitude(s) for diagram number 449
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[95], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 450 OF 1240 ***

      // Wavefunction(s) for diagram number 450
      // (none)

      // Amplitude(s) for diagram number 450
      helas_CD_VVV1_0( w_fp[104], w_fp[45], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 451 OF 1240 ***

      // Wavefunction(s) for diagram number 451
      // (none)

      // Amplitude(s) for diagram number 451
      helas_CD_FFV1_0( w_fp[3], w_fp[44], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[91] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];

      // *** DIAGRAM 452 OF 1240 ***

      // Wavefunction(s) for diagram number 452
      // (none)

      // Amplitude(s) for diagram number 452
      helas_CD_FFV1_0( w_fp[99], w_fp[89], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 453 OF 1240 ***

      // Wavefunction(s) for diagram number 453
      // (none)

      // Amplitude(s) for diagram number 453
      helas_CD_FFV1_0( w_fp[99], w_fp[44], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 454 OF 1240 ***

      // Wavefunction(s) for diagram number 454
      // (none)

      // Amplitude(s) for diagram number 454
      helas_CD_FFV1_0( w_fp[3], w_fp[89], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[78] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];

      // *** DIAGRAM 455 OF 1240 ***

      // Wavefunction(s) for diagram number 455
      // (none)

      // Amplitude(s) for diagram number 455
      helas_CD_VVV1_0( w_fp[86], w_fp[1], w_fp[45], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 456 OF 1240 ***

      // Wavefunction(s) for diagram number 456
      // (none)

      // Amplitude(s) for diagram number 456
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[113], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[114], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 457 OF 1240 ***

      // Wavefunction(s) for diagram number 457
      // (none)

      // Amplitude(s) for diagram number 457
      helas_CD_FFV1_0( w_fp[41], w_fp[39], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];

      // *** DIAGRAM 458 OF 1240 ***

      // Wavefunction(s) for diagram number 458
      // (none)

      // Amplitude(s) for diagram number 458
      helas_CD_FFV1_0( w_fp[41], w_fp[105], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 459 OF 1240 ***

      // Wavefunction(s) for diagram number 459
      // (none)

      // Amplitude(s) for diagram number 459
      helas_CD_FFV1_0( w_fp[101], w_fp[39], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 460 OF 1240 ***

      // Wavefunction(s) for diagram number 460
      // (none)

      // Amplitude(s) for diagram number 460
      helas_CD_VVV1_0( w_fp[104], w_fp[51], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 461 OF 1240 ***

      // Wavefunction(s) for diagram number 461
      // (none)

      // Amplitude(s) for diagram number 461
      helas_CD_FFV1_0( w_fp[3], w_fp[50], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[115] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 462 OF 1240 ***

      // Wavefunction(s) for diagram number 462
      // (none)

      // Amplitude(s) for diagram number 462
      helas_CD_FFV1_0( w_fp[99], w_fp[91], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 463 OF 1240 ***

      // Wavefunction(s) for diagram number 463
      // (none)

      // Amplitude(s) for diagram number 463
      helas_CD_FFV1_0( w_fp[99], w_fp[50], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 464 OF 1240 ***

      // Wavefunction(s) for diagram number 464
      // (none)

      // Amplitude(s) for diagram number 464
      helas_CD_FFV1_0( w_fp[3], w_fp[91], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[102] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];

      // *** DIAGRAM 465 OF 1240 ***

      // Wavefunction(s) for diagram number 465
      // (none)

      // Amplitude(s) for diagram number 465
      helas_CD_VVV1_0( w_fp[62], w_fp[1], w_fp[51], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 466 OF 1240 ***

      // Wavefunction(s) for diagram number 466
      // (none)

      // Amplitude(s) for diagram number 466
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[109], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[110], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 467 OF 1240 ***

      // Wavefunction(s) for diagram number 467
      // (none)

      // Amplitude(s) for diagram number 467
      helas_CD_FFV1_0( w_fp[38], w_fp[47], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];

      // *** DIAGRAM 468 OF 1240 ***

      // Wavefunction(s) for diagram number 468
      // (none)

      // Amplitude(s) for diagram number 468
      helas_CD_FFV1_0( w_fp[38], w_fp[106], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 469 OF 1240 ***

      // Wavefunction(s) for diagram number 469
      // (none)

      // Amplitude(s) for diagram number 469
      helas_CD_FFV1_0( w_fp[98], w_fp[47], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 470 OF 1240 ***

      // Wavefunction(s) for diagram number 470
      // (none)

      // Amplitude(s) for diagram number 470
      helas_CD_VVV1_0( w_fp[104], w_fp[23], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 471 OF 1240 ***

      // Wavefunction(s) for diagram number 471
      // (none)

      // Amplitude(s) for diagram number 471
      helas_CD_FFV1_0( w_fp[48], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];

      // *** DIAGRAM 472 OF 1240 ***

      // Wavefunction(s) for diagram number 472
      // (none)

      // Amplitude(s) for diagram number 472
      helas_CD_FFV1_0( w_fp[58], w_fp[102], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 473 OF 1240 ***

      // Wavefunction(s) for diagram number 473
      // (none)

      // Amplitude(s) for diagram number 473
      helas_CD_FFV1_0( w_fp[48], w_fp[102], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 474 OF 1240 ***

      // Wavefunction(s) for diagram number 474
      // (none)

      // Amplitude(s) for diagram number 474
      helas_CD_FFV1_0( w_fp[58], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];

      // *** DIAGRAM 475 OF 1240 ***

      // Wavefunction(s) for diagram number 475
      // (none)

      // Amplitude(s) for diagram number 475
      helas_CD_VVV1_0( w_fp[86], w_fp[1], w_fp[23], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 476 OF 1240 ***

      // Wavefunction(s) for diagram number 476
      // (none)

      // Amplitude(s) for diagram number 476
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[113], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[114], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 477 OF 1240 ***

      // Wavefunction(s) for diagram number 477
      // (none)

      // Amplitude(s) for diagram number 477
      helas_CD_VVV1_0( w_fp[104], w_fp[20], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 478 OF 1240 ***

      // Wavefunction(s) for diagram number 478
      // (none)

      // Amplitude(s) for diagram number 478
      helas_CD_FFV1_0( w_fp[40], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];

      // *** DIAGRAM 479 OF 1240 ***

      // Wavefunction(s) for diagram number 479
      // (none)

      // Amplitude(s) for diagram number 479
      helas_CD_FFV1_0( w_fp[60], w_fp[102], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 480 OF 1240 ***

      // Wavefunction(s) for diagram number 480
      // (none)

      // Amplitude(s) for diagram number 480
      helas_CD_FFV1_0( w_fp[40], w_fp[102], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 481 OF 1240 ***

      // Wavefunction(s) for diagram number 481
      // (none)

      // Amplitude(s) for diagram number 481
      helas_CD_FFV1_0( w_fp[60], w_fp[2], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];

      // *** DIAGRAM 482 OF 1240 ***

      // Wavefunction(s) for diagram number 482
      // (none)

      // Amplitude(s) for diagram number 482
      helas_CD_VVV1_0( w_fp[62], w_fp[1], w_fp[20], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 483 OF 1240 ***

      // Wavefunction(s) for diagram number 483
      // (none)

      // Amplitude(s) for diagram number 483
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[109], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[110], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 484 OF 1240 ***

      // Wavefunction(s) for diagram number 484
      // (none)

      // Amplitude(s) for diagram number 484
      helas_CD_FFV1_0( w_fp[3], w_fp[18], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 485 OF 1240 ***

      // Wavefunction(s) for diagram number 485
      // (none)

      // Amplitude(s) for diagram number 485
      helas_CD_FFV1_0( w_fp[12], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 486 OF 1240 ***

      // Wavefunction(s) for diagram number 486
      // (none)

      // Amplitude(s) for diagram number 486
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[67], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 487 OF 1240 ***

      // Wavefunction(s) for diagram number 487
      // (none)

      // Amplitude(s) for diagram number 487
      helas_CD_FFV1_0( w_fp[12], w_fp[102], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];

      // *** DIAGRAM 488 OF 1240 ***

      // Wavefunction(s) for diagram number 488
      // (none)

      // Amplitude(s) for diagram number 488
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[67], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 489 OF 1240 ***

      // Wavefunction(s) for diagram number 489
      // (none)

      // Amplitude(s) for diagram number 489
      helas_CD_FFV1_0( w_fp[99], w_fp[18], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];

      // *** DIAGRAM 490 OF 1240 ***

      // Wavefunction(s) for diagram number 490
      // (none)

      // Amplitude(s) for diagram number 490
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[55], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[83], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[84], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 491 OF 1240 ***

      // Wavefunction(s) for diagram number 491
      // (none)

      // Amplitude(s) for diagram number 491
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[55], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[83], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[84], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 492 OF 1240 ***

      // Wavefunction(s) for diagram number 492
      // (none)

      // Amplitude(s) for diagram number 492
      helas_CD_VVV1_0( w_fp[92], w_fp[55], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[92], w_fp[83], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[92], w_fp[84], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];

      // *** DIAGRAM 493 OF 1240 ***

      // Wavefunction(s) for diagram number 493
      helas_CD_VVV1P0_1( w_fp[0], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[92] );
      helas_CD_FFV1_2( w_fp[3], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[99] );

      // Amplitude(s) for diagram number 493
      helas_CD_FFV1_0( w_fp[99], w_fp[87], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 494 OF 1240 ***

      // Wavefunction(s) for diagram number 494
      // (none)

      // Amplitude(s) for diagram number 494
      helas_CD_FFV1_0( w_fp[99], w_fp[85], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 495 OF 1240 ***

      // Wavefunction(s) for diagram number 495
      helas_CD_VVV1P0_1( w_fp[92], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[102] );

      // Amplitude(s) for diagram number 495
      helas_CD_VVV1_0( w_fp[102], w_fp[34], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 496 OF 1240 ***

      // Wavefunction(s) for diagram number 496
      // (none)

      // Amplitude(s) for diagram number 496
      helas_CD_FFV1_0( w_fp[3], w_fp[85], w_fp[102], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[43] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];

      // *** DIAGRAM 497 OF 1240 ***

      // Wavefunction(s) for diagram number 497
      helas_CD_VVV1P0_1( w_fp[92], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[104] );

      // Amplitude(s) for diagram number 497
      helas_CD_VVV1_0( w_fp[104], w_fp[34], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 498 OF 1240 ***

      // Wavefunction(s) for diagram number 498
      // (none)

      // Amplitude(s) for diagram number 498
      helas_CD_FFV1_0( w_fp[3], w_fp[87], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];

      // *** DIAGRAM 499 OF 1240 ***

      // Wavefunction(s) for diagram number 499
      helas_CD_VVVV1P0_1( w_fp[92], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[111] );
      helas_CD_VVVV3P0_1( w_fp[92], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[110] );
      helas_CD_VVVV4P0_1( w_fp[92], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[109] );

      // Amplitude(s) for diagram number 499
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[110], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[109], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 500 OF 1240 ***

      // Wavefunction(s) for diagram number 500
      helas_CD_FFV1_1( w_fp[77], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[62] );

      // Amplitude(s) for diagram number 500
      helas_CD_FFV1_0( w_fp[46], w_fp[62], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 501 OF 1240 ***

      // Wavefunction(s) for diagram number 501
      helas_CD_FFV1_2( w_fp[46], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[114] );

      // Amplitude(s) for diagram number 501
      helas_CD_FFV1_0( w_fp[114], w_fp[77], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 502 OF 1240 ***

      // Wavefunction(s) for diagram number 502
      // (none)

      // Amplitude(s) for diagram number 502
      helas_CD_FFV1_0( w_fp[46], w_fp[77], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];

      // *** DIAGRAM 503 OF 1240 ***

      // Wavefunction(s) for diagram number 503
      // (none)

      // Amplitude(s) for diagram number 503
      helas_CD_FFV1_0( w_fp[41], w_fp[62], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 504 OF 1240 ***

      // Wavefunction(s) for diagram number 504
      helas_CD_FFV1_2( w_fp[41], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[113] );

      // Amplitude(s) for diagram number 504
      helas_CD_FFV1_0( w_fp[113], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 505 OF 1240 ***

      // Wavefunction(s) for diagram number 505
      // (none)

      // Amplitude(s) for diagram number 505
      helas_CD_FFV1_0( w_fp[41], w_fp[77], w_fp[102], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];

      // *** DIAGRAM 506 OF 1240 ***

      // Wavefunction(s) for diagram number 506
      // (none)

      // Amplitude(s) for diagram number 506
      helas_CD_FFV1_0( w_fp[3], w_fp[62], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];

      // *** DIAGRAM 507 OF 1240 ***

      // Wavefunction(s) for diagram number 507
      // (none)

      // Amplitude(s) for diagram number 507
      helas_CD_FFV1_0( w_fp[99], w_fp[77], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];

      // *** DIAGRAM 508 OF 1240 ***

      // Wavefunction(s) for diagram number 508
      helas_CD_VVV1P0_1( w_fp[92], w_fp[27], COUPs[0], 1.0, 0., 0., w_fp[62] );

      // Amplitude(s) for diagram number 508
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 509 OF 1240 ***

      // Wavefunction(s) for diagram number 509
      helas_CD_FFV1_1( w_fp[2], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[112] );

      // Amplitude(s) for diagram number 509
      helas_CD_FFV1_0( w_fp[56], w_fp[112], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 510 OF 1240 ***

      // Wavefunction(s) for diagram number 510
      // (none)

      // Amplitude(s) for diagram number 510
      helas_CD_FFV1_0( w_fp[21], w_fp[112], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 511 OF 1240 ***

      // Wavefunction(s) for diagram number 511
      // (none)

      // Amplitude(s) for diagram number 511
      helas_CD_VVV1_0( w_fp[102], w_fp[103], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 512 OF 1240 ***

      // Wavefunction(s) for diagram number 512
      // (none)

      // Amplitude(s) for diagram number 512
      helas_CD_FFV1_0( w_fp[21], w_fp[2], w_fp[102], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];

      // *** DIAGRAM 513 OF 1240 ***

      // Wavefunction(s) for diagram number 513
      // (none)

      // Amplitude(s) for diagram number 513
      helas_CD_VVV1_0( w_fp[104], w_fp[103], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 514 OF 1240 ***

      // Wavefunction(s) for diagram number 514
      // (none)

      // Amplitude(s) for diagram number 514
      helas_CD_FFV1_0( w_fp[56], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 515 OF 1240 ***

      // Wavefunction(s) for diagram number 515
      // (none)

      // Amplitude(s) for diagram number 515
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[110], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[109], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 516 OF 1240 ***

      // Wavefunction(s) for diagram number 516
      helas_CD_FFV1_2( w_fp[52], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[86] );

      // Amplitude(s) for diagram number 516
      helas_CD_FFV1_0( w_fp[86], w_fp[33], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 517 OF 1240 ***

      // Wavefunction(s) for diagram number 517
      helas_CD_FFV1_1( w_fp[33], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[98] );

      // Amplitude(s) for diagram number 517
      helas_CD_FFV1_0( w_fp[52], w_fp[98], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 518 OF 1240 ***

      // Wavefunction(s) for diagram number 518
      // (none)

      // Amplitude(s) for diagram number 518
      helas_CD_FFV1_0( w_fp[52], w_fp[33], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];

      // *** DIAGRAM 519 OF 1240 ***

      // Wavefunction(s) for diagram number 519
      // (none)

      // Amplitude(s) for diagram number 519
      helas_CD_FFV1_0( w_fp[86], w_fp[47], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 520 OF 1240 ***

      // Wavefunction(s) for diagram number 520
      helas_CD_FFV1_1( w_fp[47], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[106] );

      // Amplitude(s) for diagram number 520
      helas_CD_FFV1_0( w_fp[52], w_fp[106], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 521 OF 1240 ***

      // Wavefunction(s) for diagram number 521
      // (none)

      // Amplitude(s) for diagram number 521
      helas_CD_FFV1_0( w_fp[52], w_fp[47], w_fp[102], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[101] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];

      // *** DIAGRAM 522 OF 1240 ***

      // Wavefunction(s) for diagram number 522
      // (none)

      // Amplitude(s) for diagram number 522
      helas_CD_FFV1_0( w_fp[86], w_fp[2], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];

      // *** DIAGRAM 523 OF 1240 ***

      // Wavefunction(s) for diagram number 523
      // (none)

      // Amplitude(s) for diagram number 523
      helas_CD_FFV1_0( w_fp[52], w_fp[112], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];

      // *** DIAGRAM 524 OF 1240 ***

      // Wavefunction(s) for diagram number 524
      // (none)

      // Amplitude(s) for diagram number 524
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 525 OF 1240 ***

      // Wavefunction(s) for diagram number 525
      // (none)

      // Amplitude(s) for diagram number 525
      helas_CD_FFV1_0( w_fp[65], w_fp[112], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];

      // *** DIAGRAM 526 OF 1240 ***

      // Wavefunction(s) for diagram number 526
      // (none)

      // Amplitude(s) for diagram number 526
      helas_CD_FFV1_0( w_fp[3], w_fp[112], w_fp[64], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 527 OF 1240 ***

      // Wavefunction(s) for diagram number 527
      // (none)

      // Amplitude(s) for diagram number 527
      helas_CD_FFV1_0( w_fp[99], w_fp[93], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];

      // *** DIAGRAM 528 OF 1240 ***

      // Wavefunction(s) for diagram number 528
      // (none)

      // Amplitude(s) for diagram number 528
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[64], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 529 OF 1240 ***

      // Wavefunction(s) for diagram number 529
      // (none)

      // Amplitude(s) for diagram number 529
      helas_CD_FFV1_0( w_fp[3], w_fp[93], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 530 OF 1240 ***

      // Wavefunction(s) for diagram number 530
      // (none)

      // Amplitude(s) for diagram number 530
      helas_CD_FFV1_0( w_fp[65], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 531 OF 1240 ***

      // Wavefunction(s) for diagram number 531
      // (none)

      // Amplitude(s) for diagram number 531
      helas_CD_VVVV1_0( w_fp[92], w_fp[61], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[92], w_fp[61], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[92], w_fp[61], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 532 OF 1240 ***

      // Wavefunction(s) for diagram number 532
      helas_CD_VVV1P0_1( w_fp[92], w_fp[61], COUPs[0], 1.0, 0., 0., w_fp[86] );

      // Amplitude(s) for diagram number 532
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[86], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];

      // *** DIAGRAM 533 OF 1240 ***

      // Wavefunction(s) for diagram number 533
      helas_CD_VVV1P0_1( w_fp[92], w_fp[8], COUPs[0], 1.0, 0., 0., w_fp[101] );

      // Amplitude(s) for diagram number 533
      helas_CD_VVV1_0( w_fp[61], w_fp[6], w_fp[101], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];

      // *** DIAGRAM 534 OF 1240 ***

      // Wavefunction(s) for diagram number 534
      // (none)

      // Amplitude(s) for diagram number 534
      helas_CD_VVV1_0( w_fp[61], w_fp[8], w_fp[104], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 535 OF 1240 ***

      // Wavefunction(s) for diagram number 535
      // (none)

      // Amplitude(s) for diagram number 535
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 536 OF 1240 ***

      // Wavefunction(s) for diagram number 536
      // (none)

      // Amplitude(s) for diagram number 536
      helas_CD_FFV1_0( w_fp[3], w_fp[106], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 537 OF 1240 ***

      // Wavefunction(s) for diagram number 537
      // (none)

      // Amplitude(s) for diagram number 537
      helas_CD_FFV1_0( w_fp[99], w_fp[47], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];

      // *** DIAGRAM 538 OF 1240 ***

      // Wavefunction(s) for diagram number 538
      // (none)

      // Amplitude(s) for diagram number 538
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 539 OF 1240 ***

      // Wavefunction(s) for diagram number 539
      // (none)

      // Amplitude(s) for diagram number 539
      helas_CD_FFV1_0( w_fp[41], w_fp[112], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];

      // *** DIAGRAM 540 OF 1240 ***

      // Wavefunction(s) for diagram number 540
      // (none)

      // Amplitude(s) for diagram number 540
      helas_CD_FFV1_0( w_fp[113], w_fp[2], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];

      // *** DIAGRAM 541 OF 1240 ***

      // Wavefunction(s) for diagram number 541
      // (none)

      // Amplitude(s) for diagram number 541
      helas_CD_FFV1_0( w_fp[76], w_fp[112], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];

      // *** DIAGRAM 542 OF 1240 ***

      // Wavefunction(s) for diagram number 542
      // (none)

      // Amplitude(s) for diagram number 542
      helas_CD_FFV1_0( w_fp[3], w_fp[112], w_fp[74], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 543 OF 1240 ***

      // Wavefunction(s) for diagram number 543
      // (none)

      // Amplitude(s) for diagram number 543
      helas_CD_FFV1_0( w_fp[99], w_fp[97], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[44] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];

      // *** DIAGRAM 544 OF 1240 ***

      // Wavefunction(s) for diagram number 544
      // (none)

      // Amplitude(s) for diagram number 544
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[74], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 545 OF 1240 ***

      // Wavefunction(s) for diagram number 545
      // (none)

      // Amplitude(s) for diagram number 545
      helas_CD_FFV1_0( w_fp[3], w_fp[97], w_fp[102], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 546 OF 1240 ***

      // Wavefunction(s) for diagram number 546
      // (none)

      // Amplitude(s) for diagram number 546
      helas_CD_FFV1_0( w_fp[76], w_fp[2], w_fp[102], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 547 OF 1240 ***

      // Wavefunction(s) for diagram number 547
      // (none)

      // Amplitude(s) for diagram number 547
      helas_CD_VVVV1_0( w_fp[92], w_fp[72], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[92], w_fp[72], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[92], w_fp[72], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];

      // *** DIAGRAM 548 OF 1240 ***

      // Wavefunction(s) for diagram number 548
      helas_CD_VVV1P0_1( w_fp[92], w_fp[72], COUPs[0], 1.0, 0., 0., w_fp[86] );

      // Amplitude(s) for diagram number 548
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[86], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];

      // *** DIAGRAM 549 OF 1240 ***

      // Wavefunction(s) for diagram number 549
      // (none)

      // Amplitude(s) for diagram number 549
      helas_CD_VVV1_0( w_fp[72], w_fp[4], w_fp[101], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];

      // *** DIAGRAM 550 OF 1240 ***

      // Wavefunction(s) for diagram number 550
      // (none)

      // Amplitude(s) for diagram number 550
      helas_CD_VVV1_0( w_fp[72], w_fp[8], w_fp[102], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];

      // *** DIAGRAM 551 OF 1240 ***

      // Wavefunction(s) for diagram number 551
      // (none)

      // Amplitude(s) for diagram number 551
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 552 OF 1240 ***

      // Wavefunction(s) for diagram number 552
      // (none)

      // Amplitude(s) for diagram number 552
      helas_CD_FFV1_0( w_fp[3], w_fp[98], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];

      // *** DIAGRAM 553 OF 1240 ***

      // Wavefunction(s) for diagram number 553
      // (none)

      // Amplitude(s) for diagram number 553
      helas_CD_FFV1_0( w_fp[99], w_fp[33], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];

      // *** DIAGRAM 554 OF 1240 ***

      // Wavefunction(s) for diagram number 554
      // (none)

      // Amplitude(s) for diagram number 554
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 555 OF 1240 ***

      // Wavefunction(s) for diagram number 555
      // (none)

      // Amplitude(s) for diagram number 555
      helas_CD_FFV1_0( w_fp[46], w_fp[112], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];

      // *** DIAGRAM 556 OF 1240 ***

      // Wavefunction(s) for diagram number 556
      // (none)

      // Amplitude(s) for diagram number 556
      helas_CD_FFV1_0( w_fp[114], w_fp[2], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[43] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];

      // *** DIAGRAM 557 OF 1240 ***

      // Wavefunction(s) for diagram number 557
      helas_CD_VVV1P0_1( w_fp[92], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[86] );

      // Amplitude(s) for diagram number 557
      helas_CD_VVV1_0( w_fp[86], w_fp[13], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];

      // *** DIAGRAM 558 OF 1240 ***

      // Wavefunction(s) for diagram number 558
      // (none)

      // Amplitude(s) for diagram number 558
      helas_CD_VVV1_0( w_fp[86], w_fp[11], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];

      // *** DIAGRAM 559 OF 1240 ***

      // Wavefunction(s) for diagram number 559
      // (none)

      // Amplitude(s) for diagram number 559
      helas_CD_VVVV1_0( w_fp[8], w_fp[4], w_fp[6], w_fp[86], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[8], w_fp[4], w_fp[6], w_fp[86], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[8], w_fp[4], w_fp[6], w_fp[86], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];

      // *** DIAGRAM 560 OF 1240 ***

      // Wavefunction(s) for diagram number 560
      // (none)

      // Amplitude(s) for diagram number 560
      helas_CD_VVV1_0( w_fp[102], w_fp[108], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 561 OF 1240 ***

      // Wavefunction(s) for diagram number 561
      // (none)

      // Amplitude(s) for diagram number 561
      helas_CD_VVV1_0( w_fp[102], w_fp[1], w_fp[11], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 562 OF 1240 ***

      // Wavefunction(s) for diagram number 562
      // (none)

      // Amplitude(s) for diagram number 562
      helas_CD_VVVV1_0( w_fp[1], w_fp[8], w_fp[6], w_fp[102], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[8], w_fp[6], w_fp[102], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[8], w_fp[6], w_fp[102], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];

      // *** DIAGRAM 563 OF 1240 ***

      // Wavefunction(s) for diagram number 563
      // (none)

      // Amplitude(s) for diagram number 563
      helas_CD_VVV1_0( w_fp[104], w_fp[108], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 564 OF 1240 ***

      // Wavefunction(s) for diagram number 564
      // (none)

      // Amplitude(s) for diagram number 564
      helas_CD_VVV1_0( w_fp[104], w_fp[1], w_fp[13], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];

      // *** DIAGRAM 565 OF 1240 ***

      // Wavefunction(s) for diagram number 565
      // (none)

      // Amplitude(s) for diagram number 565
      helas_CD_VVVV1_0( w_fp[1], w_fp[8], w_fp[4], w_fp[104], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[8], w_fp[4], w_fp[104], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[8], w_fp[4], w_fp[104], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];

      // *** DIAGRAM 566 OF 1240 ***

      // Wavefunction(s) for diagram number 566
      helas_CD_VVVV1P0_1( w_fp[92], w_fp[1], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[105] );
      helas_CD_VVVV3P0_1( w_fp[92], w_fp[1], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[95] );
      helas_CD_VVVV4P0_1( w_fp[92], w_fp[1], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[107] );

      // Amplitude(s) for diagram number 566
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[105], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[95], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[107], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];

      // *** DIAGRAM 567 OF 1240 ***

      // Wavefunction(s) for diagram number 567
      helas_CD_VVVV1P0_1( w_fp[92], w_fp[1], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[96] );
      helas_CD_VVVV3P0_1( w_fp[92], w_fp[1], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[90] );
      helas_CD_VVVV4P0_1( w_fp[92], w_fp[1], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[88] );

      // Amplitude(s) for diagram number 567
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[96], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[90], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[88], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];

      // *** DIAGRAM 568 OF 1240 ***

      // Wavefunction(s) for diagram number 568
      // (none)

      // Amplitude(s) for diagram number 568
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[111], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[110], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[109], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 569 OF 1240 ***

      // Wavefunction(s) for diagram number 569
      // (none)

      // Amplitude(s) for diagram number 569
      helas_CD_VVVV1_0( w_fp[92], w_fp[1], w_fp[8], w_fp[27], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[92], w_fp[1], w_fp[8], w_fp[27], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[92], w_fp[1], w_fp[8], w_fp[27], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];

      // *** DIAGRAM 570 OF 1240 ***

      // Wavefunction(s) for diagram number 570
      // (none)

      // Amplitude(s) for diagram number 570
      helas_CD_VVV1_0( w_fp[8], w_fp[27], w_fp[86], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];

      // *** DIAGRAM 571 OF 1240 ***

      // Wavefunction(s) for diagram number 571
      // (none)

      // Amplitude(s) for diagram number 571
      helas_CD_VVV1_0( w_fp[1], w_fp[27], w_fp[101], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];

      // *** DIAGRAM 572 OF 1240 ***

      // Wavefunction(s) for diagram number 572
      // (none)

      // Amplitude(s) for diagram number 572
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];

      // *** DIAGRAM 573 OF 1240 ***

      // Wavefunction(s) for diagram number 573
      // (none)

      // Amplitude(s) for diagram number 573
      helas_CD_VVV1_0( w_fp[86], w_fp[37], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 574 OF 1240 ***

      // Wavefunction(s) for diagram number 574
      // (none)

      // Amplitude(s) for diagram number 574
      helas_CD_FFV1_0( w_fp[3], w_fp[36], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[67] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];

      // *** DIAGRAM 575 OF 1240 ***

      // Wavefunction(s) for diagram number 575
      // (none)

      // Amplitude(s) for diagram number 575
      helas_CD_FFV1_0( w_fp[99], w_fp[100], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 576 OF 1240 ***

      // Wavefunction(s) for diagram number 576
      // (none)

      // Amplitude(s) for diagram number 576
      helas_CD_FFV1_0( w_fp[99], w_fp[36], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 577 OF 1240 ***

      // Wavefunction(s) for diagram number 577
      // (none)

      // Amplitude(s) for diagram number 577
      helas_CD_FFV1_0( w_fp[3], w_fp[100], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[54] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];

      // *** DIAGRAM 578 OF 1240 ***

      // Wavefunction(s) for diagram number 578
      // (none)

      // Amplitude(s) for diagram number 578
      helas_CD_VVV1_0( w_fp[104], w_fp[1], w_fp[37], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 579 OF 1240 ***

      // Wavefunction(s) for diagram number 579
      // (none)

      // Amplitude(s) for diagram number 579
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[88], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 580 OF 1240 ***

      // Wavefunction(s) for diagram number 580
      // (none)

      // Amplitude(s) for diagram number 580
      helas_CD_FFV1_0( w_fp[41], w_fp[33], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];

      // *** DIAGRAM 581 OF 1240 ***

      // Wavefunction(s) for diagram number 581
      // (none)

      // Amplitude(s) for diagram number 581
      helas_CD_FFV1_0( w_fp[41], w_fp[98], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 582 OF 1240 ***

      // Wavefunction(s) for diagram number 582
      // (none)

      // Amplitude(s) for diagram number 582
      helas_CD_FFV1_0( w_fp[113], w_fp[33], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 583 OF 1240 ***

      // Wavefunction(s) for diagram number 583
      // (none)

      // Amplitude(s) for diagram number 583
      helas_CD_VVV1_0( w_fp[86], w_fp[51], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 584 OF 1240 ***

      // Wavefunction(s) for diagram number 584
      // (none)

      // Amplitude(s) for diagram number 584
      helas_CD_FFV1_0( w_fp[3], w_fp[49], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[109] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];

      // *** DIAGRAM 585 OF 1240 ***

      // Wavefunction(s) for diagram number 585
      // (none)

      // Amplitude(s) for diagram number 585
      helas_CD_FFV1_0( w_fp[99], w_fp[91], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 586 OF 1240 ***

      // Wavefunction(s) for diagram number 586
      // (none)

      // Amplitude(s) for diagram number 586
      helas_CD_FFV1_0( w_fp[99], w_fp[49], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 587 OF 1240 ***

      // Wavefunction(s) for diagram number 587
      // (none)

      // Amplitude(s) for diagram number 587
      helas_CD_FFV1_0( w_fp[3], w_fp[91], w_fp[102], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[103] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];

      // *** DIAGRAM 588 OF 1240 ***

      // Wavefunction(s) for diagram number 588
      // (none)

      // Amplitude(s) for diagram number 588
      helas_CD_VVV1_0( w_fp[102], w_fp[1], w_fp[51], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 589 OF 1240 ***

      // Wavefunction(s) for diagram number 589
      // (none)

      // Amplitude(s) for diagram number 589
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[105], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[95], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[107], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 590 OF 1240 ***

      // Wavefunction(s) for diagram number 590
      // (none)

      // Amplitude(s) for diagram number 590
      helas_CD_FFV1_0( w_fp[46], w_fp[47], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];

      // *** DIAGRAM 591 OF 1240 ***

      // Wavefunction(s) for diagram number 591
      // (none)

      // Amplitude(s) for diagram number 591
      helas_CD_FFV1_0( w_fp[46], w_fp[106], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 592 OF 1240 ***

      // Wavefunction(s) for diagram number 592
      // (none)

      // Amplitude(s) for diagram number 592
      helas_CD_FFV1_0( w_fp[114], w_fp[47], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 593 OF 1240 ***

      // Wavefunction(s) for diagram number 593
      // (none)

      // Amplitude(s) for diagram number 593
      helas_CD_VVV1_0( w_fp[86], w_fp[54], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 594 OF 1240 ***

      // Wavefunction(s) for diagram number 594
      // (none)

      // Amplitude(s) for diagram number 594
      helas_CD_FFV1_0( w_fp[53], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];

      // *** DIAGRAM 595 OF 1240 ***

      // Wavefunction(s) for diagram number 595
      // (none)

      // Amplitude(s) for diagram number 595
      helas_CD_FFV1_0( w_fp[78], w_fp[112], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 596 OF 1240 ***

      // Wavefunction(s) for diagram number 596
      // (none)

      // Amplitude(s) for diagram number 596
      helas_CD_FFV1_0( w_fp[53], w_fp[112], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 597 OF 1240 ***

      // Wavefunction(s) for diagram number 597
      // (none)

      // Amplitude(s) for diagram number 597
      helas_CD_FFV1_0( w_fp[78], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];

      // *** DIAGRAM 598 OF 1240 ***

      // Wavefunction(s) for diagram number 598
      // (none)

      // Amplitude(s) for diagram number 598
      helas_CD_VVV1_0( w_fp[104], w_fp[1], w_fp[54], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 599 OF 1240 ***

      // Wavefunction(s) for diagram number 599
      // (none)

      // Amplitude(s) for diagram number 599
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[88], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 600 OF 1240 ***

      // Wavefunction(s) for diagram number 600
      // (none)

      // Amplitude(s) for diagram number 600
      helas_CD_VVV1_0( w_fp[86], w_fp[20], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 601 OF 1240 ***

      // Wavefunction(s) for diagram number 601
      // (none)

      // Amplitude(s) for diagram number 601
      helas_CD_FFV1_0( w_fp[28], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];

      // *** DIAGRAM 602 OF 1240 ***

      // Wavefunction(s) for diagram number 602
      // (none)

      // Amplitude(s) for diagram number 602
      helas_CD_FFV1_0( w_fp[60], w_fp[112], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 603 OF 1240 ***

      // Wavefunction(s) for diagram number 603
      // (none)

      // Amplitude(s) for diagram number 603
      helas_CD_FFV1_0( w_fp[28], w_fp[112], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 604 OF 1240 ***

      // Wavefunction(s) for diagram number 604
      // (none)

      // Amplitude(s) for diagram number 604
      helas_CD_FFV1_0( w_fp[60], w_fp[2], w_fp[102], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];

      // *** DIAGRAM 605 OF 1240 ***

      // Wavefunction(s) for diagram number 605
      // (none)

      // Amplitude(s) for diagram number 605
      helas_CD_VVV1_0( w_fp[102], w_fp[1], w_fp[20], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 606 OF 1240 ***

      // Wavefunction(s) for diagram number 606
      // (none)

      // Amplitude(s) for diagram number 606
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[105], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[95], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[107], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 607 OF 1240 ***

      // Wavefunction(s) for diagram number 607
      // (none)

      // Amplitude(s) for diagram number 607
      helas_CD_FFV1_0( w_fp[3], w_fp[15], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 608 OF 1240 ***

      // Wavefunction(s) for diagram number 608
      // (none)

      // Amplitude(s) for diagram number 608
      helas_CD_FFV1_0( w_fp[14], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 609 OF 1240 ***

      // Wavefunction(s) for diagram number 609
      // (none)

      // Amplitude(s) for diagram number 609
      helas_CD_FFV1_0( w_fp[3], w_fp[112], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 610 OF 1240 ***

      // Wavefunction(s) for diagram number 610
      // (none)

      // Amplitude(s) for diagram number 610
      helas_CD_FFV1_0( w_fp[14], w_fp[112], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];

      // *** DIAGRAM 611 OF 1240 ***

      // Wavefunction(s) for diagram number 611
      // (none)

      // Amplitude(s) for diagram number 611
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 612 OF 1240 ***

      // Wavefunction(s) for diagram number 612
      // (none)

      // Amplitude(s) for diagram number 612
      helas_CD_FFV1_0( w_fp[99], w_fp[15], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];

      // *** DIAGRAM 613 OF 1240 ***

      // Wavefunction(s) for diagram number 613
      // (none)

      // Amplitude(s) for diagram number 613
      helas_CD_FFV1_0( w_fp[3], w_fp[112], w_fp[57], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[112], w_fp[81], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[112], w_fp[82], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 614 OF 1240 ***

      // Wavefunction(s) for diagram number 614
      // (none)

      // Amplitude(s) for diagram number 614
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[57], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[81], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[82], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 615 OF 1240 ***

      // Wavefunction(s) for diagram number 615
      // (none)

      // Amplitude(s) for diagram number 615
      helas_CD_VVV1_0( w_fp[92], w_fp[57], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[92], w_fp[81], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[92], w_fp[82], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];

      // *** DIAGRAM 616 OF 1240 ***

      // Wavefunction(s) for diagram number 616
      helas_CD_VVV1P0_1( w_fp[0], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[92] );
      helas_CD_FFV1_2( w_fp[3], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[99] );

      // Amplitude(s) for diagram number 616
      helas_CD_FFV1_0( w_fp[99], w_fp[87], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 617 OF 1240 ***

      // Wavefunction(s) for diagram number 617
      // (none)

      // Amplitude(s) for diagram number 617
      helas_CD_FFV1_0( w_fp[99], w_fp[9], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 618 OF 1240 ***

      // Wavefunction(s) for diagram number 618
      helas_CD_VVV1P0_1( w_fp[92], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[112] );

      // Amplitude(s) for diagram number 618
      helas_CD_VVV1_0( w_fp[112], w_fp[34], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 619 OF 1240 ***

      // Wavefunction(s) for diagram number 619
      // (none)

      // Amplitude(s) for diagram number 619
      helas_CD_FFV1_0( w_fp[3], w_fp[9], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[37] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];

      // *** DIAGRAM 620 OF 1240 ***

      // Wavefunction(s) for diagram number 620
      helas_CD_VVV1P0_1( w_fp[92], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[86] );

      // Amplitude(s) for diagram number 620
      helas_CD_VVV1_0( w_fp[86], w_fp[34], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 621 OF 1240 ***

      // Wavefunction(s) for diagram number 621
      // (none)

      // Amplitude(s) for diagram number 621
      helas_CD_FFV1_0( w_fp[3], w_fp[87], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[31] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];

      // *** DIAGRAM 622 OF 1240 ***

      // Wavefunction(s) for diagram number 622
      helas_CD_VVVV1P0_1( w_fp[92], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[107] );
      helas_CD_VVVV3P0_1( w_fp[92], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[95] );
      helas_CD_VVVV4P0_1( w_fp[92], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[105] );

      // Amplitude(s) for diagram number 622
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[107], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[95], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[105], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 623 OF 1240 ***

      // Wavefunction(s) for diagram number 623
      helas_CD_FFV1_1( w_fp[77], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[102] );

      // Amplitude(s) for diagram number 623
      helas_CD_FFV1_0( w_fp[46], w_fp[102], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 624 OF 1240 ***

      // Wavefunction(s) for diagram number 624
      helas_CD_FFV1_2( w_fp[46], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[88] );

      // Amplitude(s) for diagram number 624
      helas_CD_FFV1_0( w_fp[88], w_fp[77], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 625 OF 1240 ***

      // Wavefunction(s) for diagram number 625
      // (none)

      // Amplitude(s) for diagram number 625
      helas_CD_FFV1_0( w_fp[46], w_fp[77], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[29] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];

      // *** DIAGRAM 626 OF 1240 ***

      // Wavefunction(s) for diagram number 626
      // (none)

      // Amplitude(s) for diagram number 626
      helas_CD_FFV1_0( w_fp[38], w_fp[102], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 627 OF 1240 ***

      // Wavefunction(s) for diagram number 627
      helas_CD_FFV1_2( w_fp[38], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[90] );

      // Amplitude(s) for diagram number 627
      helas_CD_FFV1_0( w_fp[90], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 628 OF 1240 ***

      // Wavefunction(s) for diagram number 628
      // (none)

      // Amplitude(s) for diagram number 628
      helas_CD_FFV1_0( w_fp[38], w_fp[77], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];

      // *** DIAGRAM 629 OF 1240 ***

      // Wavefunction(s) for diagram number 629
      // (none)

      // Amplitude(s) for diagram number 629
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];

      // *** DIAGRAM 630 OF 1240 ***

      // Wavefunction(s) for diagram number 630
      // (none)

      // Amplitude(s) for diagram number 630
      helas_CD_FFV1_0( w_fp[99], w_fp[77], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];

      // *** DIAGRAM 631 OF 1240 ***

      // Wavefunction(s) for diagram number 631
      helas_CD_VVV1P0_1( w_fp[92], w_fp[24], COUPs[0], 1.0, 0., 0., w_fp[102] );

      // Amplitude(s) for diagram number 631
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[102], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 632 OF 1240 ***

      // Wavefunction(s) for diagram number 632
      helas_CD_FFV1_1( w_fp[2], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[96] );

      // Amplitude(s) for diagram number 632
      helas_CD_FFV1_0( w_fp[56], w_fp[96], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 633 OF 1240 ***

      // Wavefunction(s) for diagram number 633
      // (none)

      // Amplitude(s) for diagram number 633
      helas_CD_FFV1_0( w_fp[22], w_fp[96], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 634 OF 1240 ***

      // Wavefunction(s) for diagram number 634
      // (none)

      // Amplitude(s) for diagram number 634
      helas_CD_VVV1_0( w_fp[112], w_fp[103], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 635 OF 1240 ***

      // Wavefunction(s) for diagram number 635
      // (none)

      // Amplitude(s) for diagram number 635
      helas_CD_FFV1_0( w_fp[22], w_fp[2], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];

      // *** DIAGRAM 636 OF 1240 ***

      // Wavefunction(s) for diagram number 636
      // (none)

      // Amplitude(s) for diagram number 636
      helas_CD_VVV1_0( w_fp[86], w_fp[103], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 637 OF 1240 ***

      // Wavefunction(s) for diagram number 637
      // (none)

      // Amplitude(s) for diagram number 637
      helas_CD_FFV1_0( w_fp[56], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 638 OF 1240 ***

      // Wavefunction(s) for diagram number 638
      // (none)

      // Amplitude(s) for diagram number 638
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[107], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[95], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[105], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 639 OF 1240 ***

      // Wavefunction(s) for diagram number 639
      helas_CD_FFV1_2( w_fp[52], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[104] );

      // Amplitude(s) for diagram number 639
      helas_CD_FFV1_0( w_fp[104], w_fp[33], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 640 OF 1240 ***

      // Wavefunction(s) for diagram number 640
      helas_CD_FFV1_1( w_fp[33], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[114] );

      // Amplitude(s) for diagram number 640
      helas_CD_FFV1_0( w_fp[52], w_fp[114], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 641 OF 1240 ***

      // Wavefunction(s) for diagram number 641
      // (none)

      // Amplitude(s) for diagram number 641
      helas_CD_FFV1_0( w_fp[52], w_fp[33], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[53] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];

      // *** DIAGRAM 642 OF 1240 ***

      // Wavefunction(s) for diagram number 642
      // (none)

      // Amplitude(s) for diagram number 642
      helas_CD_FFV1_0( w_fp[104], w_fp[39], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 643 OF 1240 ***

      // Wavefunction(s) for diagram number 643
      helas_CD_FFV1_1( w_fp[39], w_fp[92], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[106] );

      // Amplitude(s) for diagram number 643
      helas_CD_FFV1_0( w_fp[52], w_fp[106], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 644 OF 1240 ***

      // Wavefunction(s) for diagram number 644
      // (none)

      // Amplitude(s) for diagram number 644
      helas_CD_FFV1_0( w_fp[52], w_fp[39], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[77] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];

      // *** DIAGRAM 645 OF 1240 ***

      // Wavefunction(s) for diagram number 645
      // (none)

      // Amplitude(s) for diagram number 645
      helas_CD_FFV1_0( w_fp[104], w_fp[2], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];

      // *** DIAGRAM 646 OF 1240 ***

      // Wavefunction(s) for diagram number 646
      // (none)

      // Amplitude(s) for diagram number 646
      helas_CD_FFV1_0( w_fp[52], w_fp[96], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];

      // *** DIAGRAM 647 OF 1240 ***

      // Wavefunction(s) for diagram number 647
      // (none)

      // Amplitude(s) for diagram number 647
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[102], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 648 OF 1240 ***

      // Wavefunction(s) for diagram number 648
      // (none)

      // Amplitude(s) for diagram number 648
      helas_CD_FFV1_0( w_fp[65], w_fp[96], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];

      // *** DIAGRAM 649 OF 1240 ***

      // Wavefunction(s) for diagram number 649
      // (none)

      // Amplitude(s) for diagram number 649
      helas_CD_FFV1_0( w_fp[3], w_fp[96], w_fp[63], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 650 OF 1240 ***

      // Wavefunction(s) for diagram number 650
      // (none)

      // Amplitude(s) for diagram number 650
      helas_CD_FFV1_0( w_fp[99], w_fp[93], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];

      // *** DIAGRAM 651 OF 1240 ***

      // Wavefunction(s) for diagram number 651
      // (none)

      // Amplitude(s) for diagram number 651
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[63], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 652 OF 1240 ***

      // Wavefunction(s) for diagram number 652
      // (none)

      // Amplitude(s) for diagram number 652
      helas_CD_FFV1_0( w_fp[3], w_fp[93], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 653 OF 1240 ***

      // Wavefunction(s) for diagram number 653
      // (none)

      // Amplitude(s) for diagram number 653
      helas_CD_FFV1_0( w_fp[65], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 654 OF 1240 ***

      // Wavefunction(s) for diagram number 654
      // (none)

      // Amplitude(s) for diagram number 654
      helas_CD_VVVV1_0( w_fp[92], w_fp[61], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[92], w_fp[61], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[92], w_fp[61], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 655 OF 1240 ***

      // Wavefunction(s) for diagram number 655
      helas_CD_VVV1P0_1( w_fp[92], w_fp[61], COUPs[0], 1.0, 0., 0., w_fp[104] );

      // Amplitude(s) for diagram number 655
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[104], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];

      // *** DIAGRAM 656 OF 1240 ***

      // Wavefunction(s) for diagram number 656
      helas_CD_VVV1P0_1( w_fp[92], w_fp[8], COUPs[0], 1.0, 0., 0., w_fp[113] );

      // Amplitude(s) for diagram number 656
      helas_CD_VVV1_0( w_fp[61], w_fp[5], w_fp[113], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 657 OF 1240 ***

      // Wavefunction(s) for diagram number 657
      // (none)

      // Amplitude(s) for diagram number 657
      helas_CD_VVV1_0( w_fp[61], w_fp[8], w_fp[86], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 658 OF 1240 ***

      // Wavefunction(s) for diagram number 658
      // (none)

      // Amplitude(s) for diagram number 658
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 659 OF 1240 ***

      // Wavefunction(s) for diagram number 659
      // (none)

      // Amplitude(s) for diagram number 659
      helas_CD_FFV1_0( w_fp[3], w_fp[106], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];

      // *** DIAGRAM 660 OF 1240 ***

      // Wavefunction(s) for diagram number 660
      // (none)

      // Amplitude(s) for diagram number 660
      helas_CD_FFV1_0( w_fp[99], w_fp[39], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];

      // *** DIAGRAM 661 OF 1240 ***

      // Wavefunction(s) for diagram number 661
      // (none)

      // Amplitude(s) for diagram number 661
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 662 OF 1240 ***

      // Wavefunction(s) for diagram number 662
      // (none)

      // Amplitude(s) for diagram number 662
      helas_CD_FFV1_0( w_fp[38], w_fp[96], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];

      // *** DIAGRAM 663 OF 1240 ***

      // Wavefunction(s) for diagram number 663
      // (none)

      // Amplitude(s) for diagram number 663
      helas_CD_FFV1_0( w_fp[90], w_fp[2], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[31] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];

      // *** DIAGRAM 664 OF 1240 ***

      // Wavefunction(s) for diagram number 664
      // (none)

      // Amplitude(s) for diagram number 664
      helas_CD_FFV1_0( w_fp[71], w_fp[96], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];

      // *** DIAGRAM 665 OF 1240 ***

      // Wavefunction(s) for diagram number 665
      // (none)

      // Amplitude(s) for diagram number 665
      helas_CD_FFV1_0( w_fp[3], w_fp[96], w_fp[69], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 666 OF 1240 ***

      // Wavefunction(s) for diagram number 666
      // (none)

      // Amplitude(s) for diagram number 666
      helas_CD_FFV1_0( w_fp[99], w_fp[94], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[38] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];

      // *** DIAGRAM 667 OF 1240 ***

      // Wavefunction(s) for diagram number 667
      // (none)

      // Amplitude(s) for diagram number 667
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[69], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 668 OF 1240 ***

      // Wavefunction(s) for diagram number 668
      // (none)

      // Amplitude(s) for diagram number 668
      helas_CD_FFV1_0( w_fp[3], w_fp[94], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 669 OF 1240 ***

      // Wavefunction(s) for diagram number 669
      // (none)

      // Amplitude(s) for diagram number 669
      helas_CD_FFV1_0( w_fp[71], w_fp[2], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 670 OF 1240 ***

      // Wavefunction(s) for diagram number 670
      // (none)

      // Amplitude(s) for diagram number 670
      helas_CD_VVVV1_0( w_fp[92], w_fp[66], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[92], w_fp[66], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[92], w_fp[66], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];

      // *** DIAGRAM 671 OF 1240 ***

      // Wavefunction(s) for diagram number 671
      helas_CD_VVV1P0_1( w_fp[92], w_fp[66], COUPs[0], 1.0, 0., 0., w_fp[104] );

      // Amplitude(s) for diagram number 671
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[104], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];

      // *** DIAGRAM 672 OF 1240 ***

      // Wavefunction(s) for diagram number 672
      // (none)

      // Amplitude(s) for diagram number 672
      helas_CD_VVV1_0( w_fp[66], w_fp[4], w_fp[113], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];

      // *** DIAGRAM 673 OF 1240 ***

      // Wavefunction(s) for diagram number 673
      // (none)

      // Amplitude(s) for diagram number 673
      helas_CD_VVV1_0( w_fp[66], w_fp[8], w_fp[112], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];

      // *** DIAGRAM 674 OF 1240 ***

      // Wavefunction(s) for diagram number 674
      // (none)

      // Amplitude(s) for diagram number 674
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 675 OF 1240 ***

      // Wavefunction(s) for diagram number 675
      // (none)

      // Amplitude(s) for diagram number 675
      helas_CD_FFV1_0( w_fp[3], w_fp[114], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];

      // *** DIAGRAM 676 OF 1240 ***

      // Wavefunction(s) for diagram number 676
      // (none)

      // Amplitude(s) for diagram number 676
      helas_CD_FFV1_0( w_fp[99], w_fp[33], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];

      // *** DIAGRAM 677 OF 1240 ***

      // Wavefunction(s) for diagram number 677
      // (none)

      // Amplitude(s) for diagram number 677
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 678 OF 1240 ***

      // Wavefunction(s) for diagram number 678
      // (none)

      // Amplitude(s) for diagram number 678
      helas_CD_FFV1_0( w_fp[46], w_fp[96], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];

      // *** DIAGRAM 679 OF 1240 ***

      // Wavefunction(s) for diagram number 679
      // (none)

      // Amplitude(s) for diagram number 679
      helas_CD_FFV1_0( w_fp[88], w_fp[2], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[37] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];

      // *** DIAGRAM 680 OF 1240 ***

      // Wavefunction(s) for diagram number 680
      helas_CD_VVV1P0_1( w_fp[92], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[104] );

      // Amplitude(s) for diagram number 680
      helas_CD_VVV1_0( w_fp[104], w_fp[13], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];

      // *** DIAGRAM 681 OF 1240 ***

      // Wavefunction(s) for diagram number 681
      // (none)

      // Amplitude(s) for diagram number 681
      helas_CD_VVV1_0( w_fp[104], w_fp[10], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];

      // *** DIAGRAM 682 OF 1240 ***

      // Wavefunction(s) for diagram number 682
      // (none)

      // Amplitude(s) for diagram number 682
      helas_CD_VVVV1_0( w_fp[8], w_fp[4], w_fp[5], w_fp[104], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[8], w_fp[4], w_fp[5], w_fp[104], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[8], w_fp[4], w_fp[5], w_fp[104], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];

      // *** DIAGRAM 683 OF 1240 ***

      // Wavefunction(s) for diagram number 683
      // (none)

      // Amplitude(s) for diagram number 683
      helas_CD_VVV1_0( w_fp[112], w_fp[108], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];

      // *** DIAGRAM 684 OF 1240 ***

      // Wavefunction(s) for diagram number 684
      // (none)

      // Amplitude(s) for diagram number 684
      helas_CD_VVV1_0( w_fp[112], w_fp[1], w_fp[10], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];

      // *** DIAGRAM 685 OF 1240 ***

      // Wavefunction(s) for diagram number 685
      // (none)

      // Amplitude(s) for diagram number 685
      helas_CD_VVVV1_0( w_fp[1], w_fp[8], w_fp[5], w_fp[112], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[8], w_fp[5], w_fp[112], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[8], w_fp[5], w_fp[112], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];

      // *** DIAGRAM 686 OF 1240 ***

      // Wavefunction(s) for diagram number 686
      // (none)

      // Amplitude(s) for diagram number 686
      helas_CD_VVV1_0( w_fp[86], w_fp[108], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 687 OF 1240 ***

      // Wavefunction(s) for diagram number 687
      // (none)

      // Amplitude(s) for diagram number 687
      helas_CD_VVV1_0( w_fp[86], w_fp[1], w_fp[13], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];

      // *** DIAGRAM 688 OF 1240 ***

      // Wavefunction(s) for diagram number 688
      // (none)

      // Amplitude(s) for diagram number 688
      helas_CD_VVVV1_0( w_fp[1], w_fp[8], w_fp[4], w_fp[86], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[8], w_fp[4], w_fp[86], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[8], w_fp[4], w_fp[86], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];

      // *** DIAGRAM 689 OF 1240 ***

      // Wavefunction(s) for diagram number 689
      helas_CD_VVVV1P0_1( w_fp[92], w_fp[1], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[98] );
      helas_CD_VVVV3P0_1( w_fp[92], w_fp[1], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[62] );
      helas_CD_VVVV4P0_1( w_fp[92], w_fp[1], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[101] );

      // Amplitude(s) for diagram number 689
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[98], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[101], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];

      // *** DIAGRAM 690 OF 1240 ***

      // Wavefunction(s) for diagram number 690
      helas_CD_VVVV1P0_1( w_fp[92], w_fp[1], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[109] );
      helas_CD_VVVV3P0_1( w_fp[92], w_fp[1], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[110] );
      helas_CD_VVVV4P0_1( w_fp[92], w_fp[1], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[111] );

      // Amplitude(s) for diagram number 690
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[109], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[110], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[111], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];

      // *** DIAGRAM 691 OF 1240 ***

      // Wavefunction(s) for diagram number 691
      // (none)

      // Amplitude(s) for diagram number 691
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[107], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[95], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[105], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];

      // *** DIAGRAM 692 OF 1240 ***

      // Wavefunction(s) for diagram number 692
      // (none)

      // Amplitude(s) for diagram number 692
      helas_CD_VVVV1_0( w_fp[92], w_fp[1], w_fp[8], w_fp[24], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[92], w_fp[1], w_fp[8], w_fp[24], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[92], w_fp[1], w_fp[8], w_fp[24], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 693 OF 1240 ***

      // Wavefunction(s) for diagram number 693
      // (none)

      // Amplitude(s) for diagram number 693
      helas_CD_VVV1_0( w_fp[8], w_fp[24], w_fp[104], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];

      // *** DIAGRAM 694 OF 1240 ***

      // Wavefunction(s) for diagram number 694
      // (none)

      // Amplitude(s) for diagram number 694
      helas_CD_VVV1_0( w_fp[1], w_fp[24], w_fp[113], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 695 OF 1240 ***

      // Wavefunction(s) for diagram number 695
      // (none)

      // Amplitude(s) for diagram number 695
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[102], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 696 OF 1240 ***

      // Wavefunction(s) for diagram number 696
      // (none)

      // Amplitude(s) for diagram number 696
      helas_CD_VVV1_0( w_fp[104], w_fp[37], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 697 OF 1240 ***

      // Wavefunction(s) for diagram number 697
      // (none)

      // Amplitude(s) for diagram number 697
      helas_CD_FFV1_0( w_fp[3], w_fp[35], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[61] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];

      // *** DIAGRAM 698 OF 1240 ***

      // Wavefunction(s) for diagram number 698
      // (none)

      // Amplitude(s) for diagram number 698
      helas_CD_FFV1_0( w_fp[99], w_fp[100], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 699 OF 1240 ***

      // Wavefunction(s) for diagram number 699
      // (none)

      // Amplitude(s) for diagram number 699
      helas_CD_FFV1_0( w_fp[99], w_fp[35], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 700 OF 1240 ***

      // Wavefunction(s) for diagram number 700
      // (none)

      // Amplitude(s) for diagram number 700
      helas_CD_FFV1_0( w_fp[3], w_fp[100], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[55] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];

      // *** DIAGRAM 701 OF 1240 ***

      // Wavefunction(s) for diagram number 701
      // (none)

      // Amplitude(s) for diagram number 701
      helas_CD_VVV1_0( w_fp[86], w_fp[1], w_fp[37], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 702 OF 1240 ***

      // Wavefunction(s) for diagram number 702
      // (none)

      // Amplitude(s) for diagram number 702
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[109], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[110], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 703 OF 1240 ***

      // Wavefunction(s) for diagram number 703
      // (none)

      // Amplitude(s) for diagram number 703
      helas_CD_FFV1_0( w_fp[38], w_fp[33], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];

      // *** DIAGRAM 704 OF 1240 ***

      // Wavefunction(s) for diagram number 704
      // (none)

      // Amplitude(s) for diagram number 704
      helas_CD_FFV1_0( w_fp[38], w_fp[114], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 705 OF 1240 ***

      // Wavefunction(s) for diagram number 705
      // (none)

      // Amplitude(s) for diagram number 705
      helas_CD_FFV1_0( w_fp[90], w_fp[33], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 706 OF 1240 ***

      // Wavefunction(s) for diagram number 706
      // (none)

      // Amplitude(s) for diagram number 706
      helas_CD_VVV1_0( w_fp[104], w_fp[45], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 707 OF 1240 ***

      // Wavefunction(s) for diagram number 707
      // (none)

      // Amplitude(s) for diagram number 707
      helas_CD_FFV1_0( w_fp[3], w_fp[43], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[85] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];

      // *** DIAGRAM 708 OF 1240 ***

      // Wavefunction(s) for diagram number 708
      // (none)

      // Amplitude(s) for diagram number 708
      helas_CD_FFV1_0( w_fp[99], w_fp[89], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 709 OF 1240 ***

      // Wavefunction(s) for diagram number 709
      // (none)

      // Amplitude(s) for diagram number 709
      helas_CD_FFV1_0( w_fp[99], w_fp[43], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 710 OF 1240 ***

      // Wavefunction(s) for diagram number 710
      // (none)

      // Amplitude(s) for diagram number 710
      helas_CD_FFV1_0( w_fp[3], w_fp[89], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[79] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];

      // *** DIAGRAM 711 OF 1240 ***

      // Wavefunction(s) for diagram number 711
      // (none)

      // Amplitude(s) for diagram number 711
      helas_CD_VVV1_0( w_fp[112], w_fp[1], w_fp[45], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 712 OF 1240 ***

      // Wavefunction(s) for diagram number 712
      // (none)

      // Amplitude(s) for diagram number 712
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[101], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 713 OF 1240 ***

      // Wavefunction(s) for diagram number 713
      // (none)

      // Amplitude(s) for diagram number 713
      helas_CD_FFV1_0( w_fp[46], w_fp[39], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];

      // *** DIAGRAM 714 OF 1240 ***

      // Wavefunction(s) for diagram number 714
      // (none)

      // Amplitude(s) for diagram number 714
      helas_CD_FFV1_0( w_fp[46], w_fp[106], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 715 OF 1240 ***

      // Wavefunction(s) for diagram number 715
      // (none)

      // Amplitude(s) for diagram number 715
      helas_CD_FFV1_0( w_fp[88], w_fp[39], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 716 OF 1240 ***

      // Wavefunction(s) for diagram number 716
      // (none)

      // Amplitude(s) for diagram number 716
      helas_CD_VVV1_0( w_fp[104], w_fp[54], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 717 OF 1240 ***

      // Wavefunction(s) for diagram number 717
      // (none)

      // Amplitude(s) for diagram number 717
      helas_CD_FFV1_0( w_fp[7], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];

      // *** DIAGRAM 718 OF 1240 ***

      // Wavefunction(s) for diagram number 718
      // (none)

      // Amplitude(s) for diagram number 718
      helas_CD_FFV1_0( w_fp[78], w_fp[96], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 719 OF 1240 ***

      // Wavefunction(s) for diagram number 719
      // (none)

      // Amplitude(s) for diagram number 719
      helas_CD_FFV1_0( w_fp[7], w_fp[96], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 720 OF 1240 ***

      // Wavefunction(s) for diagram number 720
      // (none)

      // Amplitude(s) for diagram number 720
      helas_CD_FFV1_0( w_fp[78], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];

      // *** DIAGRAM 721 OF 1240 ***

      // Wavefunction(s) for diagram number 721
      // (none)

      // Amplitude(s) for diagram number 721
      helas_CD_VVV1_0( w_fp[86], w_fp[1], w_fp[54], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 722 OF 1240 ***

      // Wavefunction(s) for diagram number 722
      // (none)

      // Amplitude(s) for diagram number 722
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[109], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[110], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 723 OF 1240 ***

      // Wavefunction(s) for diagram number 723
      // (none)

      // Amplitude(s) for diagram number 723
      helas_CD_VVV1_0( w_fp[104], w_fp[23], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 724 OF 1240 ***

      // Wavefunction(s) for diagram number 724
      // (none)

      // Amplitude(s) for diagram number 724
      helas_CD_FFV1_0( w_fp[25], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];

      // *** DIAGRAM 725 OF 1240 ***

      // Wavefunction(s) for diagram number 725
      // (none)

      // Amplitude(s) for diagram number 725
      helas_CD_FFV1_0( w_fp[58], w_fp[96], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 726 OF 1240 ***

      // Wavefunction(s) for diagram number 726
      // (none)

      // Amplitude(s) for diagram number 726
      helas_CD_FFV1_0( w_fp[25], w_fp[96], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 727 OF 1240 ***

      // Wavefunction(s) for diagram number 727
      // (none)

      // Amplitude(s) for diagram number 727
      helas_CD_FFV1_0( w_fp[58], w_fp[2], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];

      // *** DIAGRAM 728 OF 1240 ***

      // Wavefunction(s) for diagram number 728
      // (none)

      // Amplitude(s) for diagram number 728
      helas_CD_VVV1_0( w_fp[112], w_fp[1], w_fp[23], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 729 OF 1240 ***

      // Wavefunction(s) for diagram number 729
      // (none)

      // Amplitude(s) for diagram number 729
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[101], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 730 OF 1240 ***

      // Wavefunction(s) for diagram number 730
      // (none)

      // Amplitude(s) for diagram number 730
      helas_CD_FFV1_0( w_fp[3], w_fp[17], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 731 OF 1240 ***

      // Wavefunction(s) for diagram number 731
      // (none)

      // Amplitude(s) for diagram number 731
      helas_CD_FFV1_0( w_fp[26], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 732 OF 1240 ***

      // Wavefunction(s) for diagram number 732
      // (none)

      // Amplitude(s) for diagram number 732
      helas_CD_FFV1_0( w_fp[3], w_fp[96], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 733 OF 1240 ***

      // Wavefunction(s) for diagram number 733
      // (none)

      // Amplitude(s) for diagram number 733
      helas_CD_FFV1_0( w_fp[26], w_fp[96], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];

      // *** DIAGRAM 734 OF 1240 ***

      // Wavefunction(s) for diagram number 734
      // (none)

      // Amplitude(s) for diagram number 734
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 735 OF 1240 ***

      // Wavefunction(s) for diagram number 735
      // (none)

      // Amplitude(s) for diagram number 735
      helas_CD_FFV1_0( w_fp[99], w_fp[17], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];

      // *** DIAGRAM 736 OF 1240 ***

      // Wavefunction(s) for diagram number 736
      // (none)

      // Amplitude(s) for diagram number 736
      helas_CD_FFV1_0( w_fp[3], w_fp[96], w_fp[73], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[96], w_fp[79], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[96], w_fp[80], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 737 OF 1240 ***

      // Wavefunction(s) for diagram number 737
      // (none)

      // Amplitude(s) for diagram number 737
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[73], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[79], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[80], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 738 OF 1240 ***

      // Wavefunction(s) for diagram number 738
      // (none)

      // Amplitude(s) for diagram number 738
      helas_CD_VVV1_0( w_fp[92], w_fp[73], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[92], w_fp[79], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[92], w_fp[80], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 739 OF 1240 ***

      // Wavefunction(s) for diagram number 739
      helas_CD_FFV1_1( w_fp[77], w_fp[0], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[92] );

      // Amplitude(s) for diagram number 739
      helas_CD_FFV1_0( w_fp[7], w_fp[92], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[29] -= amp_sv[0];

      // *** DIAGRAM 740 OF 1240 ***

      // Wavefunction(s) for diagram number 740
      // (none)

      // Amplitude(s) for diagram number 740
      helas_CD_FFV1_0( w_fp[53], w_fp[92], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] -= amp_sv[0];

      // *** DIAGRAM 741 OF 1240 ***

      // Wavefunction(s) for diagram number 741
      helas_CD_FFV1_2( w_fp[46], w_fp[0], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[99] );

      // Amplitude(s) for diagram number 741
      helas_CD_FFV1_0( w_fp[99], w_fp[9], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] -= amp_sv[0];

      // *** DIAGRAM 742 OF 1240 ***

      // Wavefunction(s) for diagram number 742
      // (none)

      // Amplitude(s) for diagram number 742
      helas_CD_FFV1_0( w_fp[99], w_fp[85], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[46] -= amp_sv[0];

      // *** DIAGRAM 743 OF 1240 ***

      // Wavefunction(s) for diagram number 743
      // (none)

      // Amplitude(s) for diagram number 743
      helas_CD_FFV1_0( w_fp[53], w_fp[9], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[37] -= amp_sv[0];

      // *** DIAGRAM 744 OF 1240 ***

      // Wavefunction(s) for diagram number 744
      // (none)

      // Amplitude(s) for diagram number 744
      helas_CD_FFV1_0( w_fp[7], w_fp[85], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[43] -= amp_sv[0];

      // *** DIAGRAM 745 OF 1240 ***

      // Wavefunction(s) for diagram number 745
      // (none)

      // Amplitude(s) for diagram number 745
      helas_CD_FFV1_0( w_fp[46], w_fp[92], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 746 OF 1240 ***

      // Wavefunction(s) for diagram number 746
      // (none)

      // Amplitude(s) for diagram number 746
      helas_CD_FFV1_0( w_fp[99], w_fp[77], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 747 OF 1240 ***

      // Wavefunction(s) for diagram number 747
      helas_CD_VVV1P0_1( w_fp[0], w_fp[29], COUPs[0], 1.0, 0., 0., w_fp[96] );

      // Amplitude(s) for diagram number 747
      helas_CD_FFV1_0( w_fp[46], w_fp[77], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];

      // *** DIAGRAM 748 OF 1240 ***

      // Wavefunction(s) for diagram number 748
      // (none)

      // Amplitude(s) for diagram number 748
      helas_CD_FFV1_0( w_fp[25], w_fp[92], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] -= amp_sv[0];

      // *** DIAGRAM 749 OF 1240 ***

      // Wavefunction(s) for diagram number 749
      // (none)

      // Amplitude(s) for diagram number 749
      helas_CD_FFV1_0( w_fp[48], w_fp[92], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] -= amp_sv[0];

      // *** DIAGRAM 750 OF 1240 ***

      // Wavefunction(s) for diagram number 750
      helas_CD_FFV1_2( w_fp[38], w_fp[0], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[104] );

      // Amplitude(s) for diagram number 750
      helas_CD_FFV1_0( w_fp[104], w_fp[87], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] -= amp_sv[0];

      // *** DIAGRAM 751 OF 1240 ***

      // Wavefunction(s) for diagram number 751
      // (none)

      // Amplitude(s) for diagram number 751
      helas_CD_FFV1_0( w_fp[104], w_fp[85], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[44] -= amp_sv[0];

      // *** DIAGRAM 752 OF 1240 ***

      // Wavefunction(s) for diagram number 752
      // (none)

      // Amplitude(s) for diagram number 752
      helas_CD_FFV1_0( w_fp[48], w_fp[87], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[31] -= amp_sv[0];

      // *** DIAGRAM 753 OF 1240 ***

      // Wavefunction(s) for diagram number 753
      // (none)

      // Amplitude(s) for diagram number 753
      helas_CD_FFV1_0( w_fp[25], w_fp[85], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] -= amp_sv[0];

      // *** DIAGRAM 754 OF 1240 ***

      // Wavefunction(s) for diagram number 754
      // (none)

      // Amplitude(s) for diagram number 754
      helas_CD_FFV1_0( w_fp[38], w_fp[92], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 755 OF 1240 ***

      // Wavefunction(s) for diagram number 755
      // (none)

      // Amplitude(s) for diagram number 755
      helas_CD_FFV1_0( w_fp[104], w_fp[77], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 756 OF 1240 ***

      // Wavefunction(s) for diagram number 756
      helas_CD_VVV1P0_1( w_fp[0], w_fp[27], COUPs[0], 1.0, 0., 0., w_fp[101] );

      // Amplitude(s) for diagram number 756
      helas_CD_FFV1_0( w_fp[38], w_fp[77], w_fp[101], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];

      // *** DIAGRAM 757 OF 1240 ***

      // Wavefunction(s) for diagram number 757
      // (none)

      // Amplitude(s) for diagram number 757
      helas_CD_FFV1_0( w_fp[28], w_fp[92], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] -= amp_sv[0];

      // *** DIAGRAM 758 OF 1240 ***

      // Wavefunction(s) for diagram number 758
      // (none)

      // Amplitude(s) for diagram number 758
      helas_CD_FFV1_0( w_fp[40], w_fp[92], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] -= amp_sv[0];

      // *** DIAGRAM 759 OF 1240 ***

      // Wavefunction(s) for diagram number 759
      helas_CD_FFV1_2( w_fp[41], w_fp[0], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[62] );

      // Amplitude(s) for diagram number 759
      helas_CD_FFV1_0( w_fp[62], w_fp[87], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] -= amp_sv[0];

      // *** DIAGRAM 760 OF 1240 ***

      // Wavefunction(s) for diagram number 760
      // (none)

      // Amplitude(s) for diagram number 760
      helas_CD_FFV1_0( w_fp[62], w_fp[9], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[38] -= amp_sv[0];

      // *** DIAGRAM 761 OF 1240 ***

      // Wavefunction(s) for diagram number 761
      // (none)

      // Amplitude(s) for diagram number 761
      helas_CD_FFV1_0( w_fp[40], w_fp[87], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] -= amp_sv[0];

      // *** DIAGRAM 762 OF 1240 ***

      // Wavefunction(s) for diagram number 762
      // (none)

      // Amplitude(s) for diagram number 762
      helas_CD_FFV1_0( w_fp[28], w_fp[9], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] -= amp_sv[0];

      // *** DIAGRAM 763 OF 1240 ***

      // Wavefunction(s) for diagram number 763
      // (none)

      // Amplitude(s) for diagram number 763
      helas_CD_FFV1_0( w_fp[41], w_fp[92], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 764 OF 1240 ***

      // Wavefunction(s) for diagram number 764
      // (none)

      // Amplitude(s) for diagram number 764
      helas_CD_FFV1_0( w_fp[62], w_fp[77], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 765 OF 1240 ***

      // Wavefunction(s) for diagram number 765
      helas_CD_VVV1P0_1( w_fp[0], w_fp[24], COUPs[0], 1.0, 0., 0., w_fp[98] );

      // Amplitude(s) for diagram number 765
      helas_CD_FFV1_0( w_fp[41], w_fp[77], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];

      // *** DIAGRAM 766 OF 1240 ***

      // Wavefunction(s) for diagram number 766
      // (none)

      // Amplitude(s) for diagram number 766
      helas_CD_FFV1_0( w_fp[26], w_fp[92], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 767 OF 1240 ***

      // Wavefunction(s) for diagram number 767
      // (none)

      // Amplitude(s) for diagram number 767
      helas_CD_FFV1_0( w_fp[3], w_fp[92], w_fp[42], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];

      // *** DIAGRAM 768 OF 1240 ***

      // Wavefunction(s) for diagram number 768
      // (none)

      // Amplitude(s) for diagram number 768
      helas_CD_VVV1_0( w_fp[98], w_fp[34], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 769 OF 1240 ***

      // Wavefunction(s) for diagram number 769
      // (none)

      // Amplitude(s) for diagram number 769
      helas_CD_FFV1_0( w_fp[3], w_fp[85], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];

      // *** DIAGRAM 770 OF 1240 ***

      // Wavefunction(s) for diagram number 770
      // (none)

      // Amplitude(s) for diagram number 770
      helas_CD_VVV1_0( w_fp[0], w_fp[34], w_fp[42], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 771 OF 1240 ***

      // Wavefunction(s) for diagram number 771
      // (none)

      // Amplitude(s) for diagram number 771
      helas_CD_FFV1_0( w_fp[26], w_fp[85], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 772 OF 1240 ***

      // Wavefunction(s) for diagram number 772
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[24], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[85] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[24], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[112] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[24], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[111] );

      // Amplitude(s) for diagram number 772
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[85], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 773 OF 1240 ***

      // Wavefunction(s) for diagram number 773
      // (none)

      // Amplitude(s) for diagram number 773
      helas_CD_FFV1_0( w_fp[14], w_fp[92], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 774 OF 1240 ***

      // Wavefunction(s) for diagram number 774
      // (none)

      // Amplitude(s) for diagram number 774
      helas_CD_FFV1_0( w_fp[3], w_fp[92], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];

      // *** DIAGRAM 775 OF 1240 ***

      // Wavefunction(s) for diagram number 775
      // (none)

      // Amplitude(s) for diagram number 775
      helas_CD_VVV1_0( w_fp[101], w_fp[34], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 776 OF 1240 ***

      // Wavefunction(s) for diagram number 776
      // (none)

      // Amplitude(s) for diagram number 776
      helas_CD_FFV1_0( w_fp[3], w_fp[9], w_fp[101], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];

      // *** DIAGRAM 777 OF 1240 ***

      // Wavefunction(s) for diagram number 777
      // (none)

      // Amplitude(s) for diagram number 777
      helas_CD_VVV1_0( w_fp[0], w_fp[34], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 778 OF 1240 ***

      // Wavefunction(s) for diagram number 778
      // (none)

      // Amplitude(s) for diagram number 778
      helas_CD_FFV1_0( w_fp[14], w_fp[9], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 779 OF 1240 ***

      // Wavefunction(s) for diagram number 779
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[27], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[9] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[27], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[110] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[27], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[109] );

      // Amplitude(s) for diagram number 779
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[9], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[110], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[109], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 780 OF 1240 ***

      // Wavefunction(s) for diagram number 780
      // (none)

      // Amplitude(s) for diagram number 780
      helas_CD_FFV1_0( w_fp[12], w_fp[92], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 781 OF 1240 ***

      // Wavefunction(s) for diagram number 781
      // (none)

      // Amplitude(s) for diagram number 781
      helas_CD_FFV1_0( w_fp[3], w_fp[92], w_fp[19], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];

      // *** DIAGRAM 782 OF 1240 ***

      // Wavefunction(s) for diagram number 782
      // (none)

      // Amplitude(s) for diagram number 782
      helas_CD_VVV1_0( w_fp[96], w_fp[34], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 783 OF 1240 ***

      // Wavefunction(s) for diagram number 783
      // (none)

      // Amplitude(s) for diagram number 783
      helas_CD_FFV1_0( w_fp[3], w_fp[87], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];

      // *** DIAGRAM 784 OF 1240 ***

      // Wavefunction(s) for diagram number 784
      // (none)

      // Amplitude(s) for diagram number 784
      helas_CD_VVV1_0( w_fp[0], w_fp[34], w_fp[19], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 785 OF 1240 ***

      // Wavefunction(s) for diagram number 785
      // (none)

      // Amplitude(s) for diagram number 785
      helas_CD_FFV1_0( w_fp[12], w_fp[87], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 786 OF 1240 ***

      // Wavefunction(s) for diagram number 786
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[4], w_fp[29], COUPs[2], 1.0, 0., 0., w_fp[87] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[4], w_fp[29], COUPs[2], 1.0, 0., 0., w_fp[34] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[4], w_fp[29], COUPs[2], 1.0, 0., 0., w_fp[86] );

      // Amplitude(s) for diagram number 786
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[87], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[34], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 787 OF 1240 ***

      // Wavefunction(s) for diagram number 787
      // (none)

      // Amplitude(s) for diagram number 787
      helas_CD_FFV1_0( w_fp[3], w_fp[92], w_fp[30], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[92], w_fp[31], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[92], w_fp[32], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];

      // *** DIAGRAM 788 OF 1240 ***

      // Wavefunction(s) for diagram number 788
      helas_CD_VVV1P0_1( w_fp[0], w_fp[30], COUPs[0], 1.0, 0., 0., w_fp[92] );
      helas_CD_VVV1P0_1( w_fp[0], w_fp[31], COUPs[0], 1.0, 0., 0., w_fp[88] );
      helas_CD_VVV1P0_1( w_fp[0], w_fp[32], COUPs[0], 1.0, 0., 0., w_fp[106] );

      // Amplitude(s) for diagram number 788
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[92], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[88], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[106], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 789 OF 1240 ***

      // Wavefunction(s) for diagram number 789
      helas_CD_FFV1_2( w_fp[52], w_fp[0], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[90] );

      // Amplitude(s) for diagram number 789
      helas_CD_FFV1_0( w_fp[90], w_fp[35], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] -= amp_sv[0];

      // *** DIAGRAM 790 OF 1240 ***

      // Wavefunction(s) for diagram number 790
      // (none)

      // Amplitude(s) for diagram number 790
      helas_CD_FFV1_0( w_fp[90], w_fp[36], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[70] -= amp_sv[0];

      // *** DIAGRAM 791 OF 1240 ***

      // Wavefunction(s) for diagram number 791
      helas_CD_FFV1_1( w_fp[33], w_fp[0], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[114] );

      // Amplitude(s) for diagram number 791
      helas_CD_FFV1_0( w_fp[22], w_fp[114], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[53] -= amp_sv[0];

      // *** DIAGRAM 792 OF 1240 ***

      // Wavefunction(s) for diagram number 792
      // (none)

      // Amplitude(s) for diagram number 792
      helas_CD_FFV1_0( w_fp[21], w_fp[114], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] -= amp_sv[0];

      // *** DIAGRAM 793 OF 1240 ***

      // Wavefunction(s) for diagram number 793
      // (none)

      // Amplitude(s) for diagram number 793
      helas_CD_FFV1_0( w_fp[22], w_fp[36], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[67] -= amp_sv[0];

      // *** DIAGRAM 794 OF 1240 ***

      // Wavefunction(s) for diagram number 794
      // (none)

      // Amplitude(s) for diagram number 794
      helas_CD_FFV1_0( w_fp[21], w_fp[35], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[61] -= amp_sv[0];

      // *** DIAGRAM 795 OF 1240 ***

      // Wavefunction(s) for diagram number 795
      // (none)

      // Amplitude(s) for diagram number 795
      helas_CD_FFV1_0( w_fp[90], w_fp[33], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 796 OF 1240 ***

      // Wavefunction(s) for diagram number 796
      // (none)

      // Amplitude(s) for diagram number 796
      helas_CD_FFV1_0( w_fp[52], w_fp[114], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 797 OF 1240 ***

      // Wavefunction(s) for diagram number 797
      // (none)

      // Amplitude(s) for diagram number 797
      helas_CD_FFV1_0( w_fp[52], w_fp[33], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];

      // *** DIAGRAM 798 OF 1240 ***

      // Wavefunction(s) for diagram number 798
      // (none)

      // Amplitude(s) for diagram number 798
      helas_CD_FFV1_0( w_fp[90], w_fp[43], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[88] -= amp_sv[0];

      // *** DIAGRAM 799 OF 1240 ***

      // Wavefunction(s) for diagram number 799
      // (none)

      // Amplitude(s) for diagram number 799
      helas_CD_FFV1_0( w_fp[90], w_fp[44], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[94] -= amp_sv[0];

      // *** DIAGRAM 800 OF 1240 ***

      // Wavefunction(s) for diagram number 800
      helas_CD_FFV1_1( w_fp[39], w_fp[0], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[102] );

      // Amplitude(s) for diagram number 800
      helas_CD_FFV1_0( w_fp[56], w_fp[102], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[77] -= amp_sv[0];

      // *** DIAGRAM 801 OF 1240 ***

      // Wavefunction(s) for diagram number 801
      // (none)

      // Amplitude(s) for diagram number 801
      helas_CD_FFV1_0( w_fp[21], w_fp[102], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] -= amp_sv[0];

      // *** DIAGRAM 802 OF 1240 ***

      // Wavefunction(s) for diagram number 802
      // (none)

      // Amplitude(s) for diagram number 802
      helas_CD_FFV1_0( w_fp[56], w_fp[44], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[91] -= amp_sv[0];

      // *** DIAGRAM 803 OF 1240 ***

      // Wavefunction(s) for diagram number 803
      // (none)

      // Amplitude(s) for diagram number 803
      helas_CD_FFV1_0( w_fp[21], w_fp[43], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[85] -= amp_sv[0];

      // *** DIAGRAM 804 OF 1240 ***

      // Wavefunction(s) for diagram number 804
      // (none)

      // Amplitude(s) for diagram number 804
      helas_CD_FFV1_0( w_fp[90], w_fp[39], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 805 OF 1240 ***

      // Wavefunction(s) for diagram number 805
      // (none)

      // Amplitude(s) for diagram number 805
      helas_CD_FFV1_0( w_fp[52], w_fp[102], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 806 OF 1240 ***

      // Wavefunction(s) for diagram number 806
      // (none)

      // Amplitude(s) for diagram number 806
      helas_CD_FFV1_0( w_fp[52], w_fp[39], w_fp[101], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];

      // *** DIAGRAM 807 OF 1240 ***

      // Wavefunction(s) for diagram number 807
      // (none)

      // Amplitude(s) for diagram number 807
      helas_CD_FFV1_0( w_fp[90], w_fp[49], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[112] -= amp_sv[0];

      // *** DIAGRAM 808 OF 1240 ***

      // Wavefunction(s) for diagram number 808
      // (none)

      // Amplitude(s) for diagram number 808
      helas_CD_FFV1_0( w_fp[90], w_fp[50], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 809 OF 1240 ***

      // Wavefunction(s) for diagram number 809
      helas_CD_FFV1_1( w_fp[47], w_fp[0], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[113] );

      // Amplitude(s) for diagram number 809
      helas_CD_FFV1_0( w_fp[56], w_fp[113], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 810 OF 1240 ***

      // Wavefunction(s) for diagram number 810
      // (none)

      // Amplitude(s) for diagram number 810
      helas_CD_FFV1_0( w_fp[22], w_fp[113], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] -= amp_sv[0];

      // *** DIAGRAM 811 OF 1240 ***

      // Wavefunction(s) for diagram number 811
      // (none)

      // Amplitude(s) for diagram number 811
      helas_CD_FFV1_0( w_fp[56], w_fp[50], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[115] -= amp_sv[0];

      // *** DIAGRAM 812 OF 1240 ***

      // Wavefunction(s) for diagram number 812
      // (none)

      // Amplitude(s) for diagram number 812
      helas_CD_FFV1_0( w_fp[22], w_fp[49], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[109] -= amp_sv[0];

      // *** DIAGRAM 813 OF 1240 ***

      // Wavefunction(s) for diagram number 813
      // (none)

      // Amplitude(s) for diagram number 813
      helas_CD_FFV1_0( w_fp[90], w_fp[47], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 814 OF 1240 ***

      // Wavefunction(s) for diagram number 814
      // (none)

      // Amplitude(s) for diagram number 814
      helas_CD_FFV1_0( w_fp[52], w_fp[113], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 815 OF 1240 ***

      // Wavefunction(s) for diagram number 815
      // (none)

      // Amplitude(s) for diagram number 815
      helas_CD_FFV1_0( w_fp[52], w_fp[47], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 816 OF 1240 ***

      // Wavefunction(s) for diagram number 816
      // (none)

      // Amplitude(s) for diagram number 816
      helas_CD_FFV1_0( w_fp[90], w_fp[17], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 817 OF 1240 ***

      // Wavefunction(s) for diagram number 817
      // (none)

      // Amplitude(s) for diagram number 817
      helas_CD_FFV1_0( w_fp[90], w_fp[2], w_fp[42], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 818 OF 1240 ***

      // Wavefunction(s) for diagram number 818
      // (none)

      // Amplitude(s) for diagram number 818
      helas_CD_VVV1_0( w_fp[98], w_fp[103], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 819 OF 1240 ***

      // Wavefunction(s) for diagram number 819
      // (none)

      // Amplitude(s) for diagram number 819
      helas_CD_FFV1_0( w_fp[21], w_fp[2], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];

      // *** DIAGRAM 820 OF 1240 ***

      // Wavefunction(s) for diagram number 820
      // (none)

      // Amplitude(s) for diagram number 820
      helas_CD_VVV1_0( w_fp[0], w_fp[103], w_fp[42], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 821 OF 1240 ***

      // Wavefunction(s) for diagram number 821
      // (none)

      // Amplitude(s) for diagram number 821
      helas_CD_FFV1_0( w_fp[21], w_fp[17], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 822 OF 1240 ***

      // Wavefunction(s) for diagram number 822
      // (none)

      // Amplitude(s) for diagram number 822
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[85], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[112], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 823 OF 1240 ***

      // Wavefunction(s) for diagram number 823
      // (none)

      // Amplitude(s) for diagram number 823
      helas_CD_FFV1_0( w_fp[90], w_fp[15], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 824 OF 1240 ***

      // Wavefunction(s) for diagram number 824
      // (none)

      // Amplitude(s) for diagram number 824
      helas_CD_FFV1_0( w_fp[90], w_fp[2], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[70] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];

      // *** DIAGRAM 825 OF 1240 ***

      // Wavefunction(s) for diagram number 825
      // (none)

      // Amplitude(s) for diagram number 825
      helas_CD_VVV1_0( w_fp[101], w_fp[103], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 826 OF 1240 ***

      // Wavefunction(s) for diagram number 826
      // (none)

      // Amplitude(s) for diagram number 826
      helas_CD_FFV1_0( w_fp[22], w_fp[2], w_fp[101], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 827 OF 1240 ***

      // Wavefunction(s) for diagram number 827
      // (none)

      // Amplitude(s) for diagram number 827
      helas_CD_VVV1_0( w_fp[0], w_fp[103], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 828 OF 1240 ***

      // Wavefunction(s) for diagram number 828
      // (none)

      // Amplitude(s) for diagram number 828
      helas_CD_FFV1_0( w_fp[22], w_fp[15], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 829 OF 1240 ***

      // Wavefunction(s) for diagram number 829
      // (none)

      // Amplitude(s) for diagram number 829
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[9], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[110], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[109], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 830 OF 1240 ***

      // Wavefunction(s) for diagram number 830
      // (none)

      // Amplitude(s) for diagram number 830
      helas_CD_FFV1_0( w_fp[90], w_fp[18], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 831 OF 1240 ***

      // Wavefunction(s) for diagram number 831
      // (none)

      // Amplitude(s) for diagram number 831
      helas_CD_FFV1_0( w_fp[90], w_fp[2], w_fp[19], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 832 OF 1240 ***

      // Wavefunction(s) for diagram number 832
      // (none)

      // Amplitude(s) for diagram number 832
      helas_CD_VVV1_0( w_fp[96], w_fp[103], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 833 OF 1240 ***

      // Wavefunction(s) for diagram number 833
      // (none)

      // Amplitude(s) for diagram number 833
      helas_CD_FFV1_0( w_fp[56], w_fp[2], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 834 OF 1240 ***

      // Wavefunction(s) for diagram number 834
      // (none)

      // Amplitude(s) for diagram number 834
      helas_CD_VVV1_0( w_fp[0], w_fp[103], w_fp[19], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 835 OF 1240 ***

      // Wavefunction(s) for diagram number 835
      // (none)

      // Amplitude(s) for diagram number 835
      helas_CD_FFV1_0( w_fp[56], w_fp[18], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 836 OF 1240 ***

      // Wavefunction(s) for diagram number 836
      // (none)

      // Amplitude(s) for diagram number 836
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[87], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[34], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[86], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 837 OF 1240 ***

      // Wavefunction(s) for diagram number 837
      // (none)

      // Amplitude(s) for diagram number 837
      helas_CD_FFV1_0( w_fp[90], w_fp[2], w_fp[30], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[90], w_fp[2], w_fp[31], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[90], w_fp[2], w_fp[32], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 838 OF 1240 ***

      // Wavefunction(s) for diagram number 838
      // (none)

      // Amplitude(s) for diagram number 838
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[92], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[88], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[106], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 839 OF 1240 ***

      // Wavefunction(s) for diagram number 839
      helas_CD_VVV1P0_1( w_fp[0], w_fp[61], COUPs[0], 1.0, 0., 0., w_fp[90] );

      // Amplitude(s) for diagram number 839
      helas_CD_VVV1_0( w_fp[90], w_fp[10], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 840 OF 1240 ***

      // Wavefunction(s) for diagram number 840
      // (none)

      // Amplitude(s) for diagram number 840
      helas_CD_VVV1_0( w_fp[90], w_fp[11], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 841 OF 1240 ***

      // Wavefunction(s) for diagram number 841
      // (none)

      // Amplitude(s) for diagram number 841
      helas_CD_VVVV1_0( w_fp[8], w_fp[5], w_fp[6], w_fp[90], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[8], w_fp[5], w_fp[6], w_fp[90], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[8], w_fp[5], w_fp[6], w_fp[90], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[1] += amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 842 OF 1240 ***

      // Wavefunction(s) for diagram number 842
      helas_CD_VVV1P0_1( w_fp[0], w_fp[8], COUPs[0], 1.0, 0., 0., w_fp[56] );

      // Amplitude(s) for diagram number 842
      helas_CD_VVV1_0( w_fp[56], w_fp[63], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 843 OF 1240 ***

      // Wavefunction(s) for diagram number 843
      // (none)

      // Amplitude(s) for diagram number 843
      helas_CD_VVV1_0( w_fp[56], w_fp[64], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];

      // *** DIAGRAM 844 OF 1240 ***

      // Wavefunction(s) for diagram number 844
      // (none)

      // Amplitude(s) for diagram number 844
      helas_CD_VVVV1_0( w_fp[61], w_fp[5], w_fp[6], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[61], w_fp[5], w_fp[6], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[61], w_fp[5], w_fp[6], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[1] += amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 845 OF 1240 ***

      // Wavefunction(s) for diagram number 845
      // (none)

      // Amplitude(s) for diagram number 845
      helas_CD_VVV1_0( w_fp[0], w_fp[63], w_fp[11], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 846 OF 1240 ***

      // Wavefunction(s) for diagram number 846
      // (none)

      // Amplitude(s) for diagram number 846
      helas_CD_VVV1_0( w_fp[0], w_fp[64], w_fp[10], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];

      // *** DIAGRAM 847 OF 1240 ***

      // Wavefunction(s) for diagram number 847
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[61], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[103] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[61], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[22] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[61], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[21] );

      // Amplitude(s) for diagram number 847
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[103], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[22], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[21], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 848 OF 1240 ***

      // Wavefunction(s) for diagram number 848
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[61], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[105] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[61], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[95] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[61], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[107] );

      // Amplitude(s) for diagram number 848
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[105], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[95], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[107], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 849 OF 1240 ***

      // Wavefunction(s) for diagram number 849
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[8], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[115] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[8], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[116] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[8], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[117] );

      // Amplitude(s) for diagram number 849
      helas_CD_VVV1_0( w_fp[61], w_fp[6], w_fp[115], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[61], w_fp[6], w_fp[116], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[61], w_fp[6], w_fp[117], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];

      // *** DIAGRAM 850 OF 1240 ***

      // Wavefunction(s) for diagram number 850
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[8], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[118] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[8], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[119] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[8], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[120] );

      // Amplitude(s) for diagram number 850
      helas_CD_VVV1_0( w_fp[61], w_fp[5], w_fp[118], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[61], w_fp[5], w_fp[119], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[61], w_fp[5], w_fp[120], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 851 OF 1240 ***

      // Wavefunction(s) for diagram number 851
      // (none)

      // Amplitude(s) for diagram number 851
      helas_CD_VVVV1_0( w_fp[0], w_fp[61], w_fp[8], w_fp[29], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[61], w_fp[8], w_fp[29], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[61], w_fp[8], w_fp[29], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 852 OF 1240 ***

      // Wavefunction(s) for diagram number 852
      // (none)

      // Amplitude(s) for diagram number 852
      helas_CD_VVV1_0( w_fp[8], w_fp[29], w_fp[90], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 853 OF 1240 ***

      // Wavefunction(s) for diagram number 853
      // (none)

      // Amplitude(s) for diagram number 853
      helas_CD_VVV1_0( w_fp[61], w_fp[29], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 854 OF 1240 ***

      // Wavefunction(s) for diagram number 854
      // (none)

      // Amplitude(s) for diagram number 854
      helas_CD_VVV1_0( w_fp[61], w_fp[8], w_fp[96], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 855 OF 1240 ***

      // Wavefunction(s) for diagram number 855
      // (none)

      // Amplitude(s) for diagram number 855
      helas_CD_VVV1_0( w_fp[90], w_fp[45], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 856 OF 1240 ***

      // Wavefunction(s) for diagram number 856
      // (none)

      // Amplitude(s) for diagram number 856
      helas_CD_FFV1_0( w_fp[3], w_fp[44], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];

      // *** DIAGRAM 857 OF 1240 ***

      // Wavefunction(s) for diagram number 857
      // (none)

      // Amplitude(s) for diagram number 857
      helas_CD_FFV1_0( w_fp[65], w_fp[102], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 858 OF 1240 ***

      // Wavefunction(s) for diagram number 858
      // (none)

      // Amplitude(s) for diagram number 858
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[64], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];

      // *** DIAGRAM 859 OF 1240 ***

      // Wavefunction(s) for diagram number 859
      // (none)

      // Amplitude(s) for diagram number 859
      helas_CD_FFV1_0( w_fp[65], w_fp[44], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 860 OF 1240 ***

      // Wavefunction(s) for diagram number 860
      // (none)

      // Amplitude(s) for diagram number 860
      helas_CD_VVV1_0( w_fp[0], w_fp[64], w_fp[45], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 861 OF 1240 ***

      // Wavefunction(s) for diagram number 861
      // (none)

      // Amplitude(s) for diagram number 861
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[105], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[95], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[107], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 862 OF 1240 ***

      // Wavefunction(s) for diagram number 862
      // (none)

      // Amplitude(s) for diagram number 862
      helas_CD_FFV1_0( w_fp[41], w_fp[39], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];

      // *** DIAGRAM 863 OF 1240 ***

      // Wavefunction(s) for diagram number 863
      // (none)

      // Amplitude(s) for diagram number 863
      helas_CD_FFV1_0( w_fp[41], w_fp[102], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 864 OF 1240 ***

      // Wavefunction(s) for diagram number 864
      // (none)

      // Amplitude(s) for diagram number 864
      helas_CD_FFV1_0( w_fp[62], w_fp[39], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 865 OF 1240 ***

      // Wavefunction(s) for diagram number 865
      // (none)

      // Amplitude(s) for diagram number 865
      helas_CD_VVV1_0( w_fp[90], w_fp[51], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 866 OF 1240 ***

      // Wavefunction(s) for diagram number 866
      // (none)

      // Amplitude(s) for diagram number 866
      helas_CD_FFV1_0( w_fp[3], w_fp[50], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 867 OF 1240 ***

      // Wavefunction(s) for diagram number 867
      // (none)

      // Amplitude(s) for diagram number 867
      helas_CD_FFV1_0( w_fp[65], w_fp[113], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 868 OF 1240 ***

      // Wavefunction(s) for diagram number 868
      // (none)

      // Amplitude(s) for diagram number 868
      helas_CD_FFV1_0( w_fp[3], w_fp[113], w_fp[63], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];

      // *** DIAGRAM 869 OF 1240 ***

      // Wavefunction(s) for diagram number 869
      // (none)

      // Amplitude(s) for diagram number 869
      helas_CD_FFV1_0( w_fp[65], w_fp[50], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 870 OF 1240 ***

      // Wavefunction(s) for diagram number 870
      // (none)

      // Amplitude(s) for diagram number 870
      helas_CD_VVV1_0( w_fp[0], w_fp[63], w_fp[51], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 871 OF 1240 ***

      // Wavefunction(s) for diagram number 871
      // (none)

      // Amplitude(s) for diagram number 871
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[103], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[22], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 872 OF 1240 ***

      // Wavefunction(s) for diagram number 872
      // (none)

      // Amplitude(s) for diagram number 872
      helas_CD_FFV1_0( w_fp[38], w_fp[47], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 873 OF 1240 ***

      // Wavefunction(s) for diagram number 873
      // (none)

      // Amplitude(s) for diagram number 873
      helas_CD_FFV1_0( w_fp[38], w_fp[113], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 874 OF 1240 ***

      // Wavefunction(s) for diagram number 874
      // (none)

      // Amplitude(s) for diagram number 874
      helas_CD_FFV1_0( w_fp[104], w_fp[47], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 875 OF 1240 ***

      // Wavefunction(s) for diagram number 875
      // (none)

      // Amplitude(s) for diagram number 875
      helas_CD_VVV1_0( w_fp[90], w_fp[23], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 876 OF 1240 ***

      // Wavefunction(s) for diagram number 876
      // (none)

      // Amplitude(s) for diagram number 876
      helas_CD_FFV1_0( w_fp[48], w_fp[2], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];

      // *** DIAGRAM 877 OF 1240 ***

      // Wavefunction(s) for diagram number 877
      // (none)

      // Amplitude(s) for diagram number 877
      helas_CD_FFV1_0( w_fp[104], w_fp[93], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 878 OF 1240 ***

      // Wavefunction(s) for diagram number 878
      // (none)

      // Amplitude(s) for diagram number 878
      helas_CD_FFV1_0( w_fp[104], w_fp[2], w_fp[64], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 879 OF 1240 ***

      // Wavefunction(s) for diagram number 879
      // (none)

      // Amplitude(s) for diagram number 879
      helas_CD_FFV1_0( w_fp[48], w_fp[93], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 880 OF 1240 ***

      // Wavefunction(s) for diagram number 880
      // (none)

      // Amplitude(s) for diagram number 880
      helas_CD_VVV1_0( w_fp[0], w_fp[64], w_fp[23], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 881 OF 1240 ***

      // Wavefunction(s) for diagram number 881
      // (none)

      // Amplitude(s) for diagram number 881
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[105], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[95], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[107], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 882 OF 1240 ***

      // Wavefunction(s) for diagram number 882
      // (none)

      // Amplitude(s) for diagram number 882
      helas_CD_VVV1_0( w_fp[90], w_fp[20], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 883 OF 1240 ***

      // Wavefunction(s) for diagram number 883
      // (none)

      // Amplitude(s) for diagram number 883
      helas_CD_FFV1_0( w_fp[40], w_fp[2], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[54] += amp_sv[0];

      // *** DIAGRAM 884 OF 1240 ***

      // Wavefunction(s) for diagram number 884
      // (none)

      // Amplitude(s) for diagram number 884
      helas_CD_FFV1_0( w_fp[62], w_fp[93], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 885 OF 1240 ***

      // Wavefunction(s) for diagram number 885
      // (none)

      // Amplitude(s) for diagram number 885
      helas_CD_FFV1_0( w_fp[62], w_fp[2], w_fp[63], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];

      // *** DIAGRAM 886 OF 1240 ***

      // Wavefunction(s) for diagram number 886
      // (none)

      // Amplitude(s) for diagram number 886
      helas_CD_FFV1_0( w_fp[40], w_fp[93], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 887 OF 1240 ***

      // Wavefunction(s) for diagram number 887
      // (none)

      // Amplitude(s) for diagram number 887
      helas_CD_VVV1_0( w_fp[0], w_fp[63], w_fp[20], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 888 OF 1240 ***

      // Wavefunction(s) for diagram number 888
      // (none)

      // Amplitude(s) for diagram number 888
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[103], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[22], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 889 OF 1240 ***

      // Wavefunction(s) for diagram number 889
      // (none)

      // Amplitude(s) for diagram number 889
      helas_CD_FFV1_0( w_fp[3], w_fp[18], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 890 OF 1240 ***

      // Wavefunction(s) for diagram number 890
      // (none)

      // Amplitude(s) for diagram number 890
      helas_CD_FFV1_0( w_fp[12], w_fp[2], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 891 OF 1240 ***

      // Wavefunction(s) for diagram number 891
      // (none)

      // Amplitude(s) for diagram number 891
      helas_CD_FFV1_0( w_fp[3], w_fp[93], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 892 OF 1240 ***

      // Wavefunction(s) for diagram number 892
      // (none)

      // Amplitude(s) for diagram number 892
      helas_CD_FFV1_0( w_fp[65], w_fp[2], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 893 OF 1240 ***

      // Wavefunction(s) for diagram number 893
      // (none)

      // Amplitude(s) for diagram number 893
      helas_CD_FFV1_0( w_fp[12], w_fp[93], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];

      // *** DIAGRAM 894 OF 1240 ***

      // Wavefunction(s) for diagram number 894
      // (none)

      // Amplitude(s) for diagram number 894
      helas_CD_FFV1_0( w_fp[65], w_fp[18], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 895 OF 1240 ***

      // Wavefunction(s) for diagram number 895
      helas_CD_VVV1P0_1( w_fp[0], w_fp[66], COUPs[0], 1.0, 0., 0., w_fp[65] );

      // Amplitude(s) for diagram number 895
      helas_CD_VVV1_0( w_fp[65], w_fp[13], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 896 OF 1240 ***

      // Wavefunction(s) for diagram number 896
      // (none)

      // Amplitude(s) for diagram number 896
      helas_CD_VVV1_0( w_fp[65], w_fp[11], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 897 OF 1240 ***

      // Wavefunction(s) for diagram number 897
      // (none)

      // Amplitude(s) for diagram number 897
      helas_CD_VVVV1_0( w_fp[8], w_fp[4], w_fp[6], w_fp[65], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[8], w_fp[4], w_fp[6], w_fp[65], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[8], w_fp[4], w_fp[6], w_fp[65], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];

      // *** DIAGRAM 898 OF 1240 ***

      // Wavefunction(s) for diagram number 898
      // (none)

      // Amplitude(s) for diagram number 898
      helas_CD_VVV1_0( w_fp[56], w_fp[69], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];

      // *** DIAGRAM 899 OF 1240 ***

      // Wavefunction(s) for diagram number 899
      // (none)

      // Amplitude(s) for diagram number 899
      helas_CD_VVV1_0( w_fp[56], w_fp[70], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];

      // *** DIAGRAM 900 OF 1240 ***

      // Wavefunction(s) for diagram number 900
      // (none)

      // Amplitude(s) for diagram number 900
      helas_CD_VVVV1_0( w_fp[66], w_fp[4], w_fp[6], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[66], w_fp[4], w_fp[6], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[66], w_fp[4], w_fp[6], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];

      // *** DIAGRAM 901 OF 1240 ***

      // Wavefunction(s) for diagram number 901
      // (none)

      // Amplitude(s) for diagram number 901
      helas_CD_VVV1_0( w_fp[0], w_fp[69], w_fp[11], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];

      // *** DIAGRAM 902 OF 1240 ***

      // Wavefunction(s) for diagram number 902
      // (none)

      // Amplitude(s) for diagram number 902
      helas_CD_VVV1_0( w_fp[0], w_fp[70], w_fp[13], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];

      // *** DIAGRAM 903 OF 1240 ***

      // Wavefunction(s) for diagram number 903
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[66], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[93] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[66], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[90] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[66], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[21] );

      // Amplitude(s) for diagram number 903
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[93], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[90], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[21], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 904 OF 1240 ***

      // Wavefunction(s) for diagram number 904
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[66], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[22] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[66], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[103] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[66], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[63] );

      // Amplitude(s) for diagram number 904
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[22], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[103], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[63], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 905 OF 1240 ***

      // Wavefunction(s) for diagram number 905
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[8], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[107] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[8], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[95] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[8], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[105] );

      // Amplitude(s) for diagram number 905
      helas_CD_VVV1_0( w_fp[66], w_fp[6], w_fp[107], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[66], w_fp[6], w_fp[95], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[66], w_fp[6], w_fp[105], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];

      // *** DIAGRAM 906 OF 1240 ***

      // Wavefunction(s) for diagram number 906
      // (none)

      // Amplitude(s) for diagram number 906
      helas_CD_VVV1_0( w_fp[66], w_fp[4], w_fp[118], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[66], w_fp[4], w_fp[119], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[66], w_fp[4], w_fp[120], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];

      // *** DIAGRAM 907 OF 1240 ***

      // Wavefunction(s) for diagram number 907
      // (none)

      // Amplitude(s) for diagram number 907
      helas_CD_VVVV1_0( w_fp[0], w_fp[66], w_fp[8], w_fp[27], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[66], w_fp[8], w_fp[27], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[66], w_fp[8], w_fp[27], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 908 OF 1240 ***

      // Wavefunction(s) for diagram number 908
      // (none)

      // Amplitude(s) for diagram number 908
      helas_CD_VVV1_0( w_fp[8], w_fp[27], w_fp[65], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];

      // *** DIAGRAM 909 OF 1240 ***

      // Wavefunction(s) for diagram number 909
      // (none)

      // Amplitude(s) for diagram number 909
      helas_CD_VVV1_0( w_fp[66], w_fp[27], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];

      // *** DIAGRAM 910 OF 1240 ***

      // Wavefunction(s) for diagram number 910
      // (none)

      // Amplitude(s) for diagram number 910
      helas_CD_VVV1_0( w_fp[66], w_fp[8], w_fp[101], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 911 OF 1240 ***

      // Wavefunction(s) for diagram number 911
      // (none)

      // Amplitude(s) for diagram number 911
      helas_CD_VVV1_0( w_fp[65], w_fp[37], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 912 OF 1240 ***

      // Wavefunction(s) for diagram number 912
      // (none)

      // Amplitude(s) for diagram number 912
      helas_CD_FFV1_0( w_fp[3], w_fp[36], w_fp[65], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];

      // *** DIAGRAM 913 OF 1240 ***

      // Wavefunction(s) for diagram number 913
      // (none)

      // Amplitude(s) for diagram number 913
      helas_CD_FFV1_0( w_fp[71], w_fp[114], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 914 OF 1240 ***

      // Wavefunction(s) for diagram number 914
      // (none)

      // Amplitude(s) for diagram number 914
      helas_CD_FFV1_0( w_fp[3], w_fp[114], w_fp[70], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];

      // *** DIAGRAM 915 OF 1240 ***

      // Wavefunction(s) for diagram number 915
      // (none)

      // Amplitude(s) for diagram number 915
      helas_CD_FFV1_0( w_fp[71], w_fp[36], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 916 OF 1240 ***

      // Wavefunction(s) for diagram number 916
      // (none)

      // Amplitude(s) for diagram number 916
      helas_CD_VVV1_0( w_fp[0], w_fp[70], w_fp[37], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 917 OF 1240 ***

      // Wavefunction(s) for diagram number 917
      // (none)

      // Amplitude(s) for diagram number 917
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[22], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[103], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[63], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 918 OF 1240 ***

      // Wavefunction(s) for diagram number 918
      // (none)

      // Amplitude(s) for diagram number 918
      helas_CD_FFV1_0( w_fp[41], w_fp[33], w_fp[65], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];

      // *** DIAGRAM 919 OF 1240 ***

      // Wavefunction(s) for diagram number 919
      // (none)

      // Amplitude(s) for diagram number 919
      helas_CD_FFV1_0( w_fp[41], w_fp[114], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 920 OF 1240 ***

      // Wavefunction(s) for diagram number 920
      // (none)

      // Amplitude(s) for diagram number 920
      helas_CD_FFV1_0( w_fp[62], w_fp[33], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 921 OF 1240 ***

      // Wavefunction(s) for diagram number 921
      // (none)

      // Amplitude(s) for diagram number 921
      helas_CD_VVV1_0( w_fp[65], w_fp[51], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 922 OF 1240 ***

      // Wavefunction(s) for diagram number 922
      // (none)

      // Amplitude(s) for diagram number 922
      helas_CD_FFV1_0( w_fp[3], w_fp[49], w_fp[65], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];

      // *** DIAGRAM 923 OF 1240 ***

      // Wavefunction(s) for diagram number 923
      // (none)

      // Amplitude(s) for diagram number 923
      helas_CD_FFV1_0( w_fp[71], w_fp[113], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 924 OF 1240 ***

      // Wavefunction(s) for diagram number 924
      // (none)

      // Amplitude(s) for diagram number 924
      helas_CD_FFV1_0( w_fp[3], w_fp[113], w_fp[69], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];

      // *** DIAGRAM 925 OF 1240 ***

      // Wavefunction(s) for diagram number 925
      // (none)

      // Amplitude(s) for diagram number 925
      helas_CD_FFV1_0( w_fp[71], w_fp[49], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 926 OF 1240 ***

      // Wavefunction(s) for diagram number 926
      // (none)

      // Amplitude(s) for diagram number 926
      helas_CD_VVV1_0( w_fp[0], w_fp[69], w_fp[51], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 927 OF 1240 ***

      // Wavefunction(s) for diagram number 927
      // (none)

      // Amplitude(s) for diagram number 927
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[93], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 928 OF 1240 ***

      // Wavefunction(s) for diagram number 928
      // (none)

      // Amplitude(s) for diagram number 928
      helas_CD_FFV1_0( w_fp[46], w_fp[47], w_fp[65], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 929 OF 1240 ***

      // Wavefunction(s) for diagram number 929
      // (none)

      // Amplitude(s) for diagram number 929
      helas_CD_FFV1_0( w_fp[46], w_fp[113], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 930 OF 1240 ***

      // Wavefunction(s) for diagram number 930
      // (none)

      // Amplitude(s) for diagram number 930
      helas_CD_FFV1_0( w_fp[99], w_fp[47], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 931 OF 1240 ***

      // Wavefunction(s) for diagram number 931
      // (none)

      // Amplitude(s) for diagram number 931
      helas_CD_VVV1_0( w_fp[65], w_fp[54], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 932 OF 1240 ***

      // Wavefunction(s) for diagram number 932
      // (none)

      // Amplitude(s) for diagram number 932
      helas_CD_FFV1_0( w_fp[53], w_fp[2], w_fp[65], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];

      // *** DIAGRAM 933 OF 1240 ***

      // Wavefunction(s) for diagram number 933
      // (none)

      // Amplitude(s) for diagram number 933
      helas_CD_FFV1_0( w_fp[99], w_fp[94], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 934 OF 1240 ***

      // Wavefunction(s) for diagram number 934
      // (none)

      // Amplitude(s) for diagram number 934
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[70], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 935 OF 1240 ***

      // Wavefunction(s) for diagram number 935
      // (none)

      // Amplitude(s) for diagram number 935
      helas_CD_FFV1_0( w_fp[53], w_fp[94], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 936 OF 1240 ***

      // Wavefunction(s) for diagram number 936
      // (none)

      // Amplitude(s) for diagram number 936
      helas_CD_VVV1_0( w_fp[0], w_fp[70], w_fp[54], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 937 OF 1240 ***

      // Wavefunction(s) for diagram number 937
      // (none)

      // Amplitude(s) for diagram number 937
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[22], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[103], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[63], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 938 OF 1240 ***

      // Wavefunction(s) for diagram number 938
      // (none)

      // Amplitude(s) for diagram number 938
      helas_CD_VVV1_0( w_fp[65], w_fp[20], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 939 OF 1240 ***

      // Wavefunction(s) for diagram number 939
      // (none)

      // Amplitude(s) for diagram number 939
      helas_CD_FFV1_0( w_fp[28], w_fp[2], w_fp[65], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];

      // *** DIAGRAM 940 OF 1240 ***

      // Wavefunction(s) for diagram number 940
      // (none)

      // Amplitude(s) for diagram number 940
      helas_CD_FFV1_0( w_fp[62], w_fp[94], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 941 OF 1240 ***

      // Wavefunction(s) for diagram number 941
      // (none)

      // Amplitude(s) for diagram number 941
      helas_CD_FFV1_0( w_fp[62], w_fp[2], w_fp[69], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[38] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];

      // *** DIAGRAM 942 OF 1240 ***

      // Wavefunction(s) for diagram number 942
      // (none)

      // Amplitude(s) for diagram number 942
      helas_CD_FFV1_0( w_fp[28], w_fp[94], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 943 OF 1240 ***

      // Wavefunction(s) for diagram number 943
      // (none)

      // Amplitude(s) for diagram number 943
      helas_CD_VVV1_0( w_fp[0], w_fp[69], w_fp[20], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 944 OF 1240 ***

      // Wavefunction(s) for diagram number 944
      // (none)

      // Amplitude(s) for diagram number 944
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[93], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 945 OF 1240 ***

      // Wavefunction(s) for diagram number 945
      // (none)

      // Amplitude(s) for diagram number 945
      helas_CD_FFV1_0( w_fp[3], w_fp[15], w_fp[65], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 946 OF 1240 ***

      // Wavefunction(s) for diagram number 946
      // (none)

      // Amplitude(s) for diagram number 946
      helas_CD_FFV1_0( w_fp[14], w_fp[2], w_fp[65], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 947 OF 1240 ***

      // Wavefunction(s) for diagram number 947
      // (none)

      // Amplitude(s) for diagram number 947
      helas_CD_FFV1_0( w_fp[3], w_fp[94], w_fp[101], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 948 OF 1240 ***

      // Wavefunction(s) for diagram number 948
      // (none)

      // Amplitude(s) for diagram number 948
      helas_CD_FFV1_0( w_fp[71], w_fp[2], w_fp[101], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 949 OF 1240 ***

      // Wavefunction(s) for diagram number 949
      // (none)

      // Amplitude(s) for diagram number 949
      helas_CD_FFV1_0( w_fp[14], w_fp[94], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];

      // *** DIAGRAM 950 OF 1240 ***

      // Wavefunction(s) for diagram number 950
      // (none)

      // Amplitude(s) for diagram number 950
      helas_CD_FFV1_0( w_fp[71], w_fp[15], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 951 OF 1240 ***

      // Wavefunction(s) for diagram number 951
      helas_CD_VVV1P0_1( w_fp[0], w_fp[72], COUPs[0], 1.0, 0., 0., w_fp[71] );

      // Amplitude(s) for diagram number 951
      helas_CD_VVV1_0( w_fp[71], w_fp[13], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];

      // *** DIAGRAM 952 OF 1240 ***

      // Wavefunction(s) for diagram number 952
      // (none)

      // Amplitude(s) for diagram number 952
      helas_CD_VVV1_0( w_fp[71], w_fp[10], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];

      // *** DIAGRAM 953 OF 1240 ***

      // Wavefunction(s) for diagram number 953
      // (none)

      // Amplitude(s) for diagram number 953
      helas_CD_VVVV1_0( w_fp[8], w_fp[4], w_fp[5], w_fp[71], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[8], w_fp[4], w_fp[5], w_fp[71], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[8], w_fp[4], w_fp[5], w_fp[71], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];

      // *** DIAGRAM 954 OF 1240 ***

      // Wavefunction(s) for diagram number 954
      // (none)

      // Amplitude(s) for diagram number 954
      helas_CD_VVV1_0( w_fp[56], w_fp[74], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];

      // *** DIAGRAM 955 OF 1240 ***

      // Wavefunction(s) for diagram number 955
      // (none)

      // Amplitude(s) for diagram number 955
      helas_CD_VVV1_0( w_fp[56], w_fp[75], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];

      // *** DIAGRAM 956 OF 1240 ***

      // Wavefunction(s) for diagram number 956
      // (none)

      // Amplitude(s) for diagram number 956
      helas_CD_VVVV1_0( w_fp[72], w_fp[4], w_fp[5], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[72], w_fp[4], w_fp[5], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[72], w_fp[4], w_fp[5], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];

      // *** DIAGRAM 957 OF 1240 ***

      // Wavefunction(s) for diagram number 957
      // (none)

      // Amplitude(s) for diagram number 957
      helas_CD_VVV1_0( w_fp[0], w_fp[74], w_fp[10], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];

      // *** DIAGRAM 958 OF 1240 ***

      // Wavefunction(s) for diagram number 958
      // (none)

      // Amplitude(s) for diagram number 958
      helas_CD_VVV1_0( w_fp[0], w_fp[75], w_fp[13], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];

      // *** DIAGRAM 959 OF 1240 ***

      // Wavefunction(s) for diagram number 959
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[72], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[94] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[72], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[65] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[72], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[21] );

      // Amplitude(s) for diagram number 959
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[94], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[65], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[21], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];

      // *** DIAGRAM 960 OF 1240 ***

      // Wavefunction(s) for diagram number 960
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[72], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[90] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[72], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[93] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[72], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[69] );

      // Amplitude(s) for diagram number 960
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[90], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[93], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[69], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];

      // *** DIAGRAM 961 OF 1240 ***

      // Wavefunction(s) for diagram number 961
      // (none)

      // Amplitude(s) for diagram number 961
      helas_CD_VVV1_0( w_fp[72], w_fp[5], w_fp[107], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[72], w_fp[5], w_fp[95], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[72], w_fp[5], w_fp[105], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];

      // *** DIAGRAM 962 OF 1240 ***

      // Wavefunction(s) for diagram number 962
      // (none)

      // Amplitude(s) for diagram number 962
      helas_CD_VVV1_0( w_fp[72], w_fp[4], w_fp[115], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[72], w_fp[4], w_fp[116], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[72], w_fp[4], w_fp[117], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];

      // *** DIAGRAM 963 OF 1240 ***

      // Wavefunction(s) for diagram number 963
      // (none)

      // Amplitude(s) for diagram number 963
      helas_CD_VVVV1_0( w_fp[0], w_fp[72], w_fp[8], w_fp[24], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[72], w_fp[8], w_fp[24], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[72], w_fp[8], w_fp[24], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];

      // *** DIAGRAM 964 OF 1240 ***

      // Wavefunction(s) for diagram number 964
      // (none)

      // Amplitude(s) for diagram number 964
      helas_CD_VVV1_0( w_fp[8], w_fp[24], w_fp[71], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];

      // *** DIAGRAM 965 OF 1240 ***

      // Wavefunction(s) for diagram number 965
      // (none)

      // Amplitude(s) for diagram number 965
      helas_CD_VVV1_0( w_fp[72], w_fp[24], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];

      // *** DIAGRAM 966 OF 1240 ***

      // Wavefunction(s) for diagram number 966
      // (none)

      // Amplitude(s) for diagram number 966
      helas_CD_VVV1_0( w_fp[72], w_fp[8], w_fp[98], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];

      // *** DIAGRAM 967 OF 1240 ***

      // Wavefunction(s) for diagram number 967
      // (none)

      // Amplitude(s) for diagram number 967
      helas_CD_VVV1_0( w_fp[71], w_fp[37], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 968 OF 1240 ***

      // Wavefunction(s) for diagram number 968
      // (none)

      // Amplitude(s) for diagram number 968
      helas_CD_FFV1_0( w_fp[3], w_fp[35], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];

      // *** DIAGRAM 969 OF 1240 ***

      // Wavefunction(s) for diagram number 969
      // (none)

      // Amplitude(s) for diagram number 969
      helas_CD_FFV1_0( w_fp[76], w_fp[114], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 970 OF 1240 ***

      // Wavefunction(s) for diagram number 970
      // (none)

      // Amplitude(s) for diagram number 970
      helas_CD_FFV1_0( w_fp[3], w_fp[114], w_fp[75], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];

      // *** DIAGRAM 971 OF 1240 ***

      // Wavefunction(s) for diagram number 971
      // (none)

      // Amplitude(s) for diagram number 971
      helas_CD_FFV1_0( w_fp[76], w_fp[35], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 972 OF 1240 ***

      // Wavefunction(s) for diagram number 972
      // (none)

      // Amplitude(s) for diagram number 972
      helas_CD_VVV1_0( w_fp[0], w_fp[75], w_fp[37], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 973 OF 1240 ***

      // Wavefunction(s) for diagram number 973
      // (none)

      // Amplitude(s) for diagram number 973
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[93], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[69], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 974 OF 1240 ***

      // Wavefunction(s) for diagram number 974
      // (none)

      // Amplitude(s) for diagram number 974
      helas_CD_FFV1_0( w_fp[38], w_fp[33], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];

      // *** DIAGRAM 975 OF 1240 ***

      // Wavefunction(s) for diagram number 975
      // (none)

      // Amplitude(s) for diagram number 975
      helas_CD_FFV1_0( w_fp[38], w_fp[114], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 976 OF 1240 ***

      // Wavefunction(s) for diagram number 976
      // (none)

      // Amplitude(s) for diagram number 976
      helas_CD_FFV1_0( w_fp[104], w_fp[33], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 977 OF 1240 ***

      // Wavefunction(s) for diagram number 977
      // (none)

      // Amplitude(s) for diagram number 977
      helas_CD_VVV1_0( w_fp[71], w_fp[45], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 978 OF 1240 ***

      // Wavefunction(s) for diagram number 978
      // (none)

      // Amplitude(s) for diagram number 978
      helas_CD_FFV1_0( w_fp[3], w_fp[43], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];

      // *** DIAGRAM 979 OF 1240 ***

      // Wavefunction(s) for diagram number 979
      // (none)

      // Amplitude(s) for diagram number 979
      helas_CD_FFV1_0( w_fp[76], w_fp[102], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 980 OF 1240 ***

      // Wavefunction(s) for diagram number 980
      // (none)

      // Amplitude(s) for diagram number 980
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[74], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];

      // *** DIAGRAM 981 OF 1240 ***

      // Wavefunction(s) for diagram number 981
      // (none)

      // Amplitude(s) for diagram number 981
      helas_CD_FFV1_0( w_fp[76], w_fp[43], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 982 OF 1240 ***

      // Wavefunction(s) for diagram number 982
      // (none)

      // Amplitude(s) for diagram number 982
      helas_CD_VVV1_0( w_fp[0], w_fp[74], w_fp[45], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 983 OF 1240 ***

      // Wavefunction(s) for diagram number 983
      // (none)

      // Amplitude(s) for diagram number 983
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[94], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[65], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 984 OF 1240 ***

      // Wavefunction(s) for diagram number 984
      // (none)

      // Amplitude(s) for diagram number 984
      helas_CD_FFV1_0( w_fp[46], w_fp[39], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];

      // *** DIAGRAM 985 OF 1240 ***

      // Wavefunction(s) for diagram number 985
      // (none)

      // Amplitude(s) for diagram number 985
      helas_CD_FFV1_0( w_fp[46], w_fp[102], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 986 OF 1240 ***

      // Wavefunction(s) for diagram number 986
      // (none)

      // Amplitude(s) for diagram number 986
      helas_CD_FFV1_0( w_fp[99], w_fp[39], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 987 OF 1240 ***

      // Wavefunction(s) for diagram number 987
      // (none)

      // Amplitude(s) for diagram number 987
      helas_CD_VVV1_0( w_fp[71], w_fp[54], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 988 OF 1240 ***

      // Wavefunction(s) for diagram number 988
      // (none)

      // Amplitude(s) for diagram number 988
      helas_CD_FFV1_0( w_fp[7], w_fp[2], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];

      // *** DIAGRAM 989 OF 1240 ***

      // Wavefunction(s) for diagram number 989
      // (none)

      // Amplitude(s) for diagram number 989
      helas_CD_FFV1_0( w_fp[99], w_fp[97], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 990 OF 1240 ***

      // Wavefunction(s) for diagram number 990
      // (none)

      // Amplitude(s) for diagram number 990
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[75], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[46] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];

      // *** DIAGRAM 991 OF 1240 ***

      // Wavefunction(s) for diagram number 991
      // (none)

      // Amplitude(s) for diagram number 991
      helas_CD_FFV1_0( w_fp[7], w_fp[97], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 992 OF 1240 ***

      // Wavefunction(s) for diagram number 992
      // (none)

      // Amplitude(s) for diagram number 992
      helas_CD_VVV1_0( w_fp[0], w_fp[75], w_fp[54], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 993 OF 1240 ***

      // Wavefunction(s) for diagram number 993
      // (none)

      // Amplitude(s) for diagram number 993
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[90], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[93], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[69], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 994 OF 1240 ***

      // Wavefunction(s) for diagram number 994
      // (none)

      // Amplitude(s) for diagram number 994
      helas_CD_VVV1_0( w_fp[71], w_fp[23], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 995 OF 1240 ***

      // Wavefunction(s) for diagram number 995
      // (none)

      // Amplitude(s) for diagram number 995
      helas_CD_FFV1_0( w_fp[25], w_fp[2], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[102] += amp_sv[0];

      // *** DIAGRAM 996 OF 1240 ***

      // Wavefunction(s) for diagram number 996
      // (none)

      // Amplitude(s) for diagram number 996
      helas_CD_FFV1_0( w_fp[104], w_fp[97], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 997 OF 1240 ***

      // Wavefunction(s) for diagram number 997
      // (none)

      // Amplitude(s) for diagram number 997
      helas_CD_FFV1_0( w_fp[104], w_fp[2], w_fp[74], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[44] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];

      // *** DIAGRAM 998 OF 1240 ***

      // Wavefunction(s) for diagram number 998
      // (none)

      // Amplitude(s) for diagram number 998
      helas_CD_FFV1_0( w_fp[25], w_fp[97], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 999 OF 1240 ***

      // Wavefunction(s) for diagram number 999
      // (none)

      // Amplitude(s) for diagram number 999
      helas_CD_VVV1_0( w_fp[0], w_fp[74], w_fp[23], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1000 OF 1240 ***

      // Wavefunction(s) for diagram number 1000
      // (none)

      // Amplitude(s) for diagram number 1000
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[94], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[65], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1001 OF 1240 ***

      // Wavefunction(s) for diagram number 1001
      // (none)

      // Amplitude(s) for diagram number 1001
      helas_CD_FFV1_0( w_fp[3], w_fp[17], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1002 OF 1240 ***

      // Wavefunction(s) for diagram number 1002
      // (none)

      // Amplitude(s) for diagram number 1002
      helas_CD_FFV1_0( w_fp[26], w_fp[2], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1003 OF 1240 ***

      // Wavefunction(s) for diagram number 1003
      // (none)

      // Amplitude(s) for diagram number 1003
      helas_CD_FFV1_0( w_fp[3], w_fp[97], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1004 OF 1240 ***

      // Wavefunction(s) for diagram number 1004
      // (none)

      // Amplitude(s) for diagram number 1004
      helas_CD_FFV1_0( w_fp[76], w_fp[2], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1005 OF 1240 ***

      // Wavefunction(s) for diagram number 1005
      // (none)

      // Amplitude(s) for diagram number 1005
      helas_CD_FFV1_0( w_fp[26], w_fp[97], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];

      // *** DIAGRAM 1006 OF 1240 ***

      // Wavefunction(s) for diagram number 1006
      // (none)

      // Amplitude(s) for diagram number 1006
      helas_CD_FFV1_0( w_fp[76], w_fp[17], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];

      // *** DIAGRAM 1007 OF 1240 ***

      // Wavefunction(s) for diagram number 1007
      // (none)

      // Amplitude(s) for diagram number 1007
      helas_CD_VVV1_0( w_fp[56], w_fp[59], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 1008 OF 1240 ***

      // Wavefunction(s) for diagram number 1008
      // (none)

      // Amplitude(s) for diagram number 1008
      helas_CD_VVV1_0( w_fp[56], w_fp[1], w_fp[42], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 1009 OF 1240 ***

      // Wavefunction(s) for diagram number 1009
      // (none)

      // Amplitude(s) for diagram number 1009
      helas_CD_VVVV1_0( w_fp[1], w_fp[24], w_fp[6], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[24], w_fp[6], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[24], w_fp[6], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1010 OF 1240 ***

      // Wavefunction(s) for diagram number 1010
      // (none)

      // Amplitude(s) for diagram number 1010
      helas_CD_VVV1_0( w_fp[98], w_fp[108], w_fp[6], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1011 OF 1240 ***

      // Wavefunction(s) for diagram number 1011
      // (none)

      // Amplitude(s) for diagram number 1011
      helas_CD_VVV1_0( w_fp[98], w_fp[1], w_fp[11], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1012 OF 1240 ***

      // Wavefunction(s) for diagram number 1012
      // (none)

      // Amplitude(s) for diagram number 1012
      helas_CD_VVVV1_0( w_fp[1], w_fp[8], w_fp[6], w_fp[98], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[8], w_fp[6], w_fp[98], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[8], w_fp[6], w_fp[98], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 1013 OF 1240 ***

      // Wavefunction(s) for diagram number 1013
      // (none)

      // Amplitude(s) for diagram number 1013
      helas_CD_VVV1_0( w_fp[0], w_fp[108], w_fp[42], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1014 OF 1240 ***

      // Wavefunction(s) for diagram number 1014
      // (none)

      // Amplitude(s) for diagram number 1014
      helas_CD_VVV1_0( w_fp[0], w_fp[59], w_fp[11], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 1015 OF 1240 ***

      // Wavefunction(s) for diagram number 1015
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[1], w_fp[8], COUPs[2], 1.0, 0., 0., w_fp[11] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[1], w_fp[8], COUPs[2], 1.0, 0., 0., w_fp[42] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[1], w_fp[8], COUPs[2], 1.0, 0., 0., w_fp[76] );

      // Amplitude(s) for diagram number 1015
      helas_CD_VVV1_0( w_fp[24], w_fp[6], w_fp[11], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[24], w_fp[6], w_fp[42], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[24], w_fp[6], w_fp[76], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1016 OF 1240 ***

      // Wavefunction(s) for diagram number 1016
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[1], w_fp[24], COUPs[2], 1.0, 0., 0., w_fp[97] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[1], w_fp[24], COUPs[2], 1.0, 0., 0., w_fp[71] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[1], w_fp[24], COUPs[2], 1.0, 0., 0., w_fp[21] );

      // Amplitude(s) for diagram number 1016
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[97], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[71], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[21], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1017 OF 1240 ***

      // Wavefunction(s) for diagram number 1017
      // (none)

      // Amplitude(s) for diagram number 1017
      helas_CD_VVV1_0( w_fp[1], w_fp[24], w_fp[118], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[8] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[24], w_fp[119], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[24], w_fp[120], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 1018 OF 1240 ***

      // Wavefunction(s) for diagram number 1018
      // (none)

      // Amplitude(s) for diagram number 1018
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[85], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[112], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[111], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1019 OF 1240 ***

      // Wavefunction(s) for diagram number 1019
      // (none)

      // Amplitude(s) for diagram number 1019
      helas_CD_VVV1_0( w_fp[56], w_fp[68], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];

      // *** DIAGRAM 1020 OF 1240 ***

      // Wavefunction(s) for diagram number 1020
      // (none)

      // Amplitude(s) for diagram number 1020
      helas_CD_VVV1_0( w_fp[56], w_fp[1], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];

      // *** DIAGRAM 1021 OF 1240 ***

      // Wavefunction(s) for diagram number 1021
      // (none)

      // Amplitude(s) for diagram number 1021
      helas_CD_VVVV1_0( w_fp[1], w_fp[27], w_fp[5], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[27], w_fp[5], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[27], w_fp[5], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];

      // *** DIAGRAM 1022 OF 1240 ***

      // Wavefunction(s) for diagram number 1022
      // (none)

      // Amplitude(s) for diagram number 1022
      helas_CD_VVV1_0( w_fp[101], w_fp[108], w_fp[5], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 1023 OF 1240 ***

      // Wavefunction(s) for diagram number 1023
      // (none)

      // Amplitude(s) for diagram number 1023
      helas_CD_VVV1_0( w_fp[101], w_fp[1], w_fp[10], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];

      // *** DIAGRAM 1024 OF 1240 ***

      // Wavefunction(s) for diagram number 1024
      // (none)

      // Amplitude(s) for diagram number 1024
      helas_CD_VVVV1_0( w_fp[1], w_fp[8], w_fp[5], w_fp[101], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[8], w_fp[5], w_fp[101], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[8], w_fp[5], w_fp[101], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];

      // *** DIAGRAM 1025 OF 1240 ***

      // Wavefunction(s) for diagram number 1025
      // (none)

      // Amplitude(s) for diagram number 1025
      helas_CD_VVV1_0( w_fp[0], w_fp[108], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];

      // *** DIAGRAM 1026 OF 1240 ***

      // Wavefunction(s) for diagram number 1026
      // (none)

      // Amplitude(s) for diagram number 1026
      helas_CD_VVV1_0( w_fp[0], w_fp[68], w_fp[10], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];

      // *** DIAGRAM 1027 OF 1240 ***

      // Wavefunction(s) for diagram number 1027
      // (none)

      // Amplitude(s) for diagram number 1027
      helas_CD_VVV1_0( w_fp[27], w_fp[5], w_fp[11], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[27], w_fp[5], w_fp[42], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[27], w_fp[5], w_fp[76], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];

      // *** DIAGRAM 1028 OF 1240 ***

      // Wavefunction(s) for diagram number 1028
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[1], w_fp[27], COUPs[2], 1.0, 0., 0., w_fp[10] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[1], w_fp[27], COUPs[2], 1.0, 0., 0., w_fp[16] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[1], w_fp[27], COUPs[2], 1.0, 0., 0., w_fp[111] );

      // Amplitude(s) for diagram number 1028
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[10], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[111], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 1029 OF 1240 ***

      // Wavefunction(s) for diagram number 1029
      // (none)

      // Amplitude(s) for diagram number 1029
      helas_CD_VVV1_0( w_fp[1], w_fp[27], w_fp[115], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[10] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[27], w_fp[116], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[27], w_fp[117], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];

      // *** DIAGRAM 1030 OF 1240 ***

      // Wavefunction(s) for diagram number 1030
      // (none)

      // Amplitude(s) for diagram number 1030
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[9], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[110], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[109], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 1031 OF 1240 ***

      // Wavefunction(s) for diagram number 1031
      // (none)

      // Amplitude(s) for diagram number 1031
      helas_CD_VVV1_0( w_fp[56], w_fp[67], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];

      // *** DIAGRAM 1032 OF 1240 ***

      // Wavefunction(s) for diagram number 1032
      // (none)

      // Amplitude(s) for diagram number 1032
      helas_CD_VVV1_0( w_fp[56], w_fp[1], w_fp[19], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];

      // *** DIAGRAM 1033 OF 1240 ***

      // Wavefunction(s) for diagram number 1033
      // (none)

      // Amplitude(s) for diagram number 1033
      helas_CD_VVVV1_0( w_fp[1], w_fp[4], w_fp[29], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[4], w_fp[29], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[4], w_fp[29], w_fp[56], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[1] += amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1034 OF 1240 ***

      // Wavefunction(s) for diagram number 1034
      // (none)

      // Amplitude(s) for diagram number 1034
      helas_CD_VVV1_0( w_fp[96], w_fp[108], w_fp[4], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 1035 OF 1240 ***

      // Wavefunction(s) for diagram number 1035
      // (none)

      // Amplitude(s) for diagram number 1035
      helas_CD_VVV1_0( w_fp[96], w_fp[1], w_fp[13], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];

      // *** DIAGRAM 1036 OF 1240 ***

      // Wavefunction(s) for diagram number 1036
      // (none)

      // Amplitude(s) for diagram number 1036
      helas_CD_VVVV1_0( w_fp[1], w_fp[8], w_fp[4], w_fp[96], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[1], w_fp[8], w_fp[4], w_fp[96], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[1], w_fp[8], w_fp[4], w_fp[96], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];

      // *** DIAGRAM 1037 OF 1240 ***

      // Wavefunction(s) for diagram number 1037
      // (none)

      // Amplitude(s) for diagram number 1037
      helas_CD_VVV1_0( w_fp[0], w_fp[108], w_fp[19], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1038 OF 1240 ***

      // Wavefunction(s) for diagram number 1038
      // (none)

      // Amplitude(s) for diagram number 1038
      helas_CD_VVV1_0( w_fp[0], w_fp[67], w_fp[13], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];

      // *** DIAGRAM 1039 OF 1240 ***

      // Wavefunction(s) for diagram number 1039
      // (none)

      // Amplitude(s) for diagram number 1039
      helas_CD_VVV1_0( w_fp[4], w_fp[29], w_fp[11], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[4], w_fp[29], w_fp[42], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[1] += amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[4], w_fp[29], w_fp[76], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[1] += amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1040 OF 1240 ***

      // Wavefunction(s) for diagram number 1040
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[1], w_fp[29], COUPs[2], 1.0, 0., 0., w_fp[76] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[1], w_fp[29], COUPs[2], 1.0, 0., 0., w_fp[42] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[1], w_fp[29], COUPs[2], 1.0, 0., 0., w_fp[11] );

      // Amplitude(s) for diagram number 1040
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[76], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[42], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[11], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 1041 OF 1240 ***

      // Wavefunction(s) for diagram number 1041
      // (none)

      // Amplitude(s) for diagram number 1041
      helas_CD_VVV1_0( w_fp[1], w_fp[29], w_fp[107], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[16] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[29], w_fp[95], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[29], w_fp[105], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];

      // *** DIAGRAM 1042 OF 1240 ***

      // Wavefunction(s) for diagram number 1042
      // (none)

      // Amplitude(s) for diagram number 1042
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[87], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[34], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[86], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1043 OF 1240 ***

      // Wavefunction(s) for diagram number 1043
      // (none)

      // Amplitude(s) for diagram number 1043
      helas_CD_VVVV1_0( w_fp[0], w_fp[1], w_fp[8], w_fp[30], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[1], w_fp[8], w_fp[30], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[1], w_fp[8], w_fp[30], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVVV1_0( w_fp[0], w_fp[1], w_fp[8], w_fp[31], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[1], w_fp[8], w_fp[31], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[1], w_fp[8], w_fp[31], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      helas_CD_VVVV1_0( w_fp[0], w_fp[1], w_fp[8], w_fp[32], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[1], w_fp[8], w_fp[32], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[1], w_fp[8], w_fp[32], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1044 OF 1240 ***

      // Wavefunction(s) for diagram number 1044
      // (none)

      // Amplitude(s) for diagram number 1044
      helas_CD_VVV1_0( w_fp[1], w_fp[30], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[31], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[32], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[2] += amp_sv[0];
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1045 OF 1240 ***

      // Wavefunction(s) for diagram number 1045
      // (none)

      // Amplitude(s) for diagram number 1045
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[92], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[88], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[106], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1046 OF 1240 ***

      // Wavefunction(s) for diagram number 1046
      // (none)

      // Amplitude(s) for diagram number 1046
      helas_CD_FFV1_0( w_fp[58], w_fp[114], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] -= amp_sv[0];

      // *** DIAGRAM 1047 OF 1240 ***

      // Wavefunction(s) for diagram number 1047
      // (none)

      // Amplitude(s) for diagram number 1047
      helas_CD_FFV1_0( w_fp[48], w_fp[114], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] -= amp_sv[0];

      // *** DIAGRAM 1048 OF 1240 ***

      // Wavefunction(s) for diagram number 1048
      // (none)

      // Amplitude(s) for diagram number 1048
      helas_CD_FFV1_0( w_fp[104], w_fp[100], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[58] -= amp_sv[0];

      // *** DIAGRAM 1049 OF 1240 ***

      // Wavefunction(s) for diagram number 1049
      // (none)

      // Amplitude(s) for diagram number 1049
      helas_CD_FFV1_0( w_fp[104], w_fp[36], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[68] -= amp_sv[0];

      // *** DIAGRAM 1050 OF 1240 ***

      // Wavefunction(s) for diagram number 1050
      // (none)

      // Amplitude(s) for diagram number 1050
      helas_CD_FFV1_0( w_fp[48], w_fp[100], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[55] -= amp_sv[0];

      // *** DIAGRAM 1051 OF 1240 ***

      // Wavefunction(s) for diagram number 1051
      // (none)

      // Amplitude(s) for diagram number 1051
      helas_CD_FFV1_0( w_fp[58], w_fp[36], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] -= amp_sv[0];

      // *** DIAGRAM 1052 OF 1240 ***

      // Wavefunction(s) for diagram number 1052
      // (none)

      // Amplitude(s) for diagram number 1052
      helas_CD_FFV1_0( w_fp[60], w_fp[114], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] -= amp_sv[0];

      // *** DIAGRAM 1053 OF 1240 ***

      // Wavefunction(s) for diagram number 1053
      // (none)

      // Amplitude(s) for diagram number 1053
      helas_CD_FFV1_0( w_fp[40], w_fp[114], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= amp_sv[0];

      // *** DIAGRAM 1054 OF 1240 ***

      // Wavefunction(s) for diagram number 1054
      // (none)

      // Amplitude(s) for diagram number 1054
      helas_CD_FFV1_0( w_fp[62], w_fp[100], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[56] -= amp_sv[0];

      // *** DIAGRAM 1055 OF 1240 ***

      // Wavefunction(s) for diagram number 1055
      // (none)

      // Amplitude(s) for diagram number 1055
      helas_CD_FFV1_0( w_fp[62], w_fp[35], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[62] -= amp_sv[0];

      // *** DIAGRAM 1056 OF 1240 ***

      // Wavefunction(s) for diagram number 1056
      // (none)

      // Amplitude(s) for diagram number 1056
      helas_CD_FFV1_0( w_fp[40], w_fp[100], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[54] -= amp_sv[0];

      // *** DIAGRAM 1057 OF 1240 ***

      // Wavefunction(s) for diagram number 1057
      // (none)

      // Amplitude(s) for diagram number 1057
      helas_CD_FFV1_0( w_fp[60], w_fp[35], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] -= amp_sv[0];

      // *** DIAGRAM 1058 OF 1240 ***

      // Wavefunction(s) for diagram number 1058
      // (none)

      // Amplitude(s) for diagram number 1058
      helas_CD_FFV1_0( w_fp[3], w_fp[114], w_fp[67], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];

      // *** DIAGRAM 1059 OF 1240 ***

      // Wavefunction(s) for diagram number 1059
      // (none)

      // Amplitude(s) for diagram number 1059
      helas_CD_FFV1_0( w_fp[12], w_fp[114], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1060 OF 1240 ***

      // Wavefunction(s) for diagram number 1060
      // (none)

      // Amplitude(s) for diagram number 1060
      helas_CD_FFV1_0( w_fp[3], w_fp[100], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];

      // *** DIAGRAM 1061 OF 1240 ***

      // Wavefunction(s) for diagram number 1061
      // (none)

      // Amplitude(s) for diagram number 1061
      helas_CD_VVV1_0( w_fp[96], w_fp[1], w_fp[37], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1062 OF 1240 ***

      // Wavefunction(s) for diagram number 1062
      // (none)

      // Amplitude(s) for diagram number 1062
      helas_CD_FFV1_0( w_fp[12], w_fp[100], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1063 OF 1240 ***

      // Wavefunction(s) for diagram number 1063
      // (none)

      // Amplitude(s) for diagram number 1063
      helas_CD_VVV1_0( w_fp[0], w_fp[67], w_fp[37], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1064 OF 1240 ***

      // Wavefunction(s) for diagram number 1064
      // (none)

      // Amplitude(s) for diagram number 1064
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[76], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[42], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[11], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1065 OF 1240 ***

      // Wavefunction(s) for diagram number 1065
      // (none)

      // Amplitude(s) for diagram number 1065
      helas_CD_FFV1_0( w_fp[78], w_fp[102], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] -= amp_sv[0];

      // *** DIAGRAM 1066 OF 1240 ***

      // Wavefunction(s) for diagram number 1066
      // (none)

      // Amplitude(s) for diagram number 1066
      helas_CD_FFV1_0( w_fp[53], w_fp[102], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] -= amp_sv[0];

      // *** DIAGRAM 1067 OF 1240 ***

      // Wavefunction(s) for diagram number 1067
      // (none)

      // Amplitude(s) for diagram number 1067
      helas_CD_FFV1_0( w_fp[99], w_fp[89], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[82] -= amp_sv[0];

      // *** DIAGRAM 1068 OF 1240 ***

      // Wavefunction(s) for diagram number 1068
      // (none)

      // Amplitude(s) for diagram number 1068
      helas_CD_FFV1_0( w_fp[99], w_fp[44], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[92] -= amp_sv[0];

      // *** DIAGRAM 1069 OF 1240 ***

      // Wavefunction(s) for diagram number 1069
      // (none)

      // Amplitude(s) for diagram number 1069
      helas_CD_FFV1_0( w_fp[53], w_fp[89], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[79] -= amp_sv[0];

      // *** DIAGRAM 1070 OF 1240 ***

      // Wavefunction(s) for diagram number 1070
      // (none)

      // Amplitude(s) for diagram number 1070
      helas_CD_FFV1_0( w_fp[78], w_fp[44], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] -= amp_sv[0];

      // *** DIAGRAM 1071 OF 1240 ***

      // Wavefunction(s) for diagram number 1071
      // (none)

      // Amplitude(s) for diagram number 1071
      helas_CD_FFV1_0( w_fp[60], w_fp[102], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] -= amp_sv[0];

      // *** DIAGRAM 1072 OF 1240 ***

      // Wavefunction(s) for diagram number 1072
      // (none)

      // Amplitude(s) for diagram number 1072
      helas_CD_FFV1_0( w_fp[28], w_fp[102], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= amp_sv[0];

      // *** DIAGRAM 1073 OF 1240 ***

      // Wavefunction(s) for diagram number 1073
      // (none)

      // Amplitude(s) for diagram number 1073
      helas_CD_FFV1_0( w_fp[62], w_fp[89], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[80] -= amp_sv[0];

      // *** DIAGRAM 1074 OF 1240 ***

      // Wavefunction(s) for diagram number 1074
      // (none)

      // Amplitude(s) for diagram number 1074
      helas_CD_FFV1_0( w_fp[62], w_fp[43], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[86] -= amp_sv[0];

      // *** DIAGRAM 1075 OF 1240 ***

      // Wavefunction(s) for diagram number 1075
      // (none)

      // Amplitude(s) for diagram number 1075
      helas_CD_FFV1_0( w_fp[28], w_fp[89], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[78] -= amp_sv[0];

      // *** DIAGRAM 1076 OF 1240 ***

      // Wavefunction(s) for diagram number 1076
      // (none)

      // Amplitude(s) for diagram number 1076
      helas_CD_FFV1_0( w_fp[60], w_fp[43], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[84] -= amp_sv[0];

      // *** DIAGRAM 1077 OF 1240 ***

      // Wavefunction(s) for diagram number 1077
      // (none)

      // Amplitude(s) for diagram number 1077
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];

      // *** DIAGRAM 1078 OF 1240 ***

      // Wavefunction(s) for diagram number 1078
      // (none)

      // Amplitude(s) for diagram number 1078
      helas_CD_FFV1_0( w_fp[14], w_fp[102], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1079 OF 1240 ***

      // Wavefunction(s) for diagram number 1079
      // (none)

      // Amplitude(s) for diagram number 1079
      helas_CD_FFV1_0( w_fp[3], w_fp[89], w_fp[101], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];

      // *** DIAGRAM 1080 OF 1240 ***

      // Wavefunction(s) for diagram number 1080
      // (none)

      // Amplitude(s) for diagram number 1080
      helas_CD_VVV1_0( w_fp[101], w_fp[1], w_fp[45], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1081 OF 1240 ***

      // Wavefunction(s) for diagram number 1081
      // (none)

      // Amplitude(s) for diagram number 1081
      helas_CD_FFV1_0( w_fp[14], w_fp[89], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1082 OF 1240 ***

      // Wavefunction(s) for diagram number 1082
      // (none)

      // Amplitude(s) for diagram number 1082
      helas_CD_VVV1_0( w_fp[0], w_fp[68], w_fp[45], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1083 OF 1240 ***

      // Wavefunction(s) for diagram number 1083
      // (none)

      // Amplitude(s) for diagram number 1083
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[10], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1084 OF 1240 ***

      // Wavefunction(s) for diagram number 1084
      // (none)

      // Amplitude(s) for diagram number 1084
      helas_CD_FFV1_0( w_fp[78], w_fp[113], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] -= amp_sv[0];

      // *** DIAGRAM 1085 OF 1240 ***

      // Wavefunction(s) for diagram number 1085
      // (none)

      // Amplitude(s) for diagram number 1085
      helas_CD_FFV1_0( w_fp[7], w_fp[113], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] -= amp_sv[0];

      // *** DIAGRAM 1086 OF 1240 ***

      // Wavefunction(s) for diagram number 1086
      // (none)

      // Amplitude(s) for diagram number 1086
      helas_CD_FFV1_0( w_fp[99], w_fp[91], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[106] -= amp_sv[0];

      // *** DIAGRAM 1087 OF 1240 ***

      // Wavefunction(s) for diagram number 1087
      // (none)

      // Amplitude(s) for diagram number 1087
      helas_CD_FFV1_0( w_fp[99], w_fp[50], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[116] -= amp_sv[0];

      // *** DIAGRAM 1088 OF 1240 ***

      // Wavefunction(s) for diagram number 1088
      // (none)

      // Amplitude(s) for diagram number 1088
      helas_CD_FFV1_0( w_fp[7], w_fp[91], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[103] -= amp_sv[0];

      // *** DIAGRAM 1089 OF 1240 ***

      // Wavefunction(s) for diagram number 1089
      // (none)

      // Amplitude(s) for diagram number 1089
      helas_CD_FFV1_0( w_fp[78], w_fp[50], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[114] -= amp_sv[0];

      // *** DIAGRAM 1090 OF 1240 ***

      // Wavefunction(s) for diagram number 1090
      // (none)

      // Amplitude(s) for diagram number 1090
      helas_CD_FFV1_0( w_fp[58], w_fp[113], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] -= amp_sv[0];

      // *** DIAGRAM 1091 OF 1240 ***

      // Wavefunction(s) for diagram number 1091
      // (none)

      // Amplitude(s) for diagram number 1091
      helas_CD_FFV1_0( w_fp[25], w_fp[113], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= amp_sv[0];

      // *** DIAGRAM 1092 OF 1240 ***

      // Wavefunction(s) for diagram number 1092
      // (none)

      // Amplitude(s) for diagram number 1092
      helas_CD_FFV1_0( w_fp[104], w_fp[91], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[104] -= amp_sv[0];

      // *** DIAGRAM 1093 OF 1240 ***

      // Wavefunction(s) for diagram number 1093
      // (none)

      // Amplitude(s) for diagram number 1093
      helas_CD_FFV1_0( w_fp[104], w_fp[49], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[110] -= amp_sv[0];

      // *** DIAGRAM 1094 OF 1240 ***

      // Wavefunction(s) for diagram number 1094
      // (none)

      // Amplitude(s) for diagram number 1094
      helas_CD_FFV1_0( w_fp[25], w_fp[91], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[102] -= amp_sv[0];

      // *** DIAGRAM 1095 OF 1240 ***

      // Wavefunction(s) for diagram number 1095
      // (none)

      // Amplitude(s) for diagram number 1095
      helas_CD_FFV1_0( w_fp[58], w_fp[49], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[108] -= amp_sv[0];

      // *** DIAGRAM 1096 OF 1240 ***

      // Wavefunction(s) for diagram number 1096
      // (none)

      // Amplitude(s) for diagram number 1096
      helas_CD_FFV1_0( w_fp[3], w_fp[113], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];

      // *** DIAGRAM 1097 OF 1240 ***

      // Wavefunction(s) for diagram number 1097
      // (none)

      // Amplitude(s) for diagram number 1097
      helas_CD_FFV1_0( w_fp[26], w_fp[113], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1098 OF 1240 ***

      // Wavefunction(s) for diagram number 1098
      // (none)

      // Amplitude(s) for diagram number 1098
      helas_CD_FFV1_0( w_fp[3], w_fp[91], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];

      // *** DIAGRAM 1099 OF 1240 ***

      // Wavefunction(s) for diagram number 1099
      // (none)

      // Amplitude(s) for diagram number 1099
      helas_CD_VVV1_0( w_fp[98], w_fp[1], w_fp[51], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1100 OF 1240 ***

      // Wavefunction(s) for diagram number 1100
      // (none)

      // Amplitude(s) for diagram number 1100
      helas_CD_FFV1_0( w_fp[26], w_fp[91], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1101 OF 1240 ***

      // Wavefunction(s) for diagram number 1101
      // (none)

      // Amplitude(s) for diagram number 1101
      helas_CD_VVV1_0( w_fp[0], w_fp[59], w_fp[51], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1102 OF 1240 ***

      // Wavefunction(s) for diagram number 1102
      // (none)

      // Amplitude(s) for diagram number 1102
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[97], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1103 OF 1240 ***

      // Wavefunction(s) for diagram number 1103
      // (none)

      // Amplitude(s) for diagram number 1103
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[67], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 1104 OF 1240 ***

      // Wavefunction(s) for diagram number 1104
      // (none)

      // Amplitude(s) for diagram number 1104
      helas_CD_FFV1_0( w_fp[99], w_fp[18], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1105 OF 1240 ***

      // Wavefunction(s) for diagram number 1105
      // (none)

      // Amplitude(s) for diagram number 1105
      helas_CD_FFV1_0( w_fp[78], w_fp[2], w_fp[96], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];

      // *** DIAGRAM 1106 OF 1240 ***

      // Wavefunction(s) for diagram number 1106
      // (none)

      // Amplitude(s) for diagram number 1106
      helas_CD_VVV1_0( w_fp[96], w_fp[1], w_fp[54], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1107 OF 1240 ***

      // Wavefunction(s) for diagram number 1107
      // (none)

      // Amplitude(s) for diagram number 1107
      helas_CD_FFV1_0( w_fp[78], w_fp[18], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1108 OF 1240 ***

      // Wavefunction(s) for diagram number 1108
      // (none)

      // Amplitude(s) for diagram number 1108
      helas_CD_VVV1_0( w_fp[0], w_fp[67], w_fp[54], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1109 OF 1240 ***

      // Wavefunction(s) for diagram number 1109
      // (none)

      // Amplitude(s) for diagram number 1109
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[76], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[42], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[11], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1110 OF 1240 ***

      // Wavefunction(s) for diagram number 1110
      // (none)

      // Amplitude(s) for diagram number 1110
      helas_CD_FFV1_0( w_fp[104], w_fp[2], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 1111 OF 1240 ***

      // Wavefunction(s) for diagram number 1111
      // (none)

      // Amplitude(s) for diagram number 1111
      helas_CD_FFV1_0( w_fp[104], w_fp[15], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1112 OF 1240 ***

      // Wavefunction(s) for diagram number 1112
      // (none)

      // Amplitude(s) for diagram number 1112
      helas_CD_FFV1_0( w_fp[58], w_fp[2], w_fp[101], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];

      // *** DIAGRAM 1113 OF 1240 ***

      // Wavefunction(s) for diagram number 1113
      // (none)

      // Amplitude(s) for diagram number 1113
      helas_CD_VVV1_0( w_fp[101], w_fp[1], w_fp[23], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1114 OF 1240 ***

      // Wavefunction(s) for diagram number 1114
      // (none)

      // Amplitude(s) for diagram number 1114
      helas_CD_FFV1_0( w_fp[58], w_fp[15], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1115 OF 1240 ***

      // Wavefunction(s) for diagram number 1115
      // (none)

      // Amplitude(s) for diagram number 1115
      helas_CD_VVV1_0( w_fp[0], w_fp[68], w_fp[23], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1116 OF 1240 ***

      // Wavefunction(s) for diagram number 1116
      // (none)

      // Amplitude(s) for diagram number 1116
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[10], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1117 OF 1240 ***

      // Wavefunction(s) for diagram number 1117
      // (none)

      // Amplitude(s) for diagram number 1117
      helas_CD_FFV1_0( w_fp[62], w_fp[2], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];

      // *** DIAGRAM 1118 OF 1240 ***

      // Wavefunction(s) for diagram number 1118
      // (none)

      // Amplitude(s) for diagram number 1118
      helas_CD_FFV1_0( w_fp[62], w_fp[17], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1119 OF 1240 ***

      // Wavefunction(s) for diagram number 1119
      // (none)

      // Amplitude(s) for diagram number 1119
      helas_CD_FFV1_0( w_fp[60], w_fp[2], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];

      // *** DIAGRAM 1120 OF 1240 ***

      // Wavefunction(s) for diagram number 1120
      // (none)

      // Amplitude(s) for diagram number 1120
      helas_CD_VVV1_0( w_fp[98], w_fp[1], w_fp[20], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1121 OF 1240 ***

      // Wavefunction(s) for diagram number 1121
      // (none)

      // Amplitude(s) for diagram number 1121
      helas_CD_FFV1_0( w_fp[60], w_fp[17], w_fp[0], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1122 OF 1240 ***

      // Wavefunction(s) for diagram number 1122
      // (none)

      // Amplitude(s) for diagram number 1122
      helas_CD_VVV1_0( w_fp[0], w_fp[59], w_fp[20], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1123 OF 1240 ***

      // Wavefunction(s) for diagram number 1123
      // (none)

      // Amplitude(s) for diagram number 1123
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[97], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1124 OF 1240 ***

      // Wavefunction(s) for diagram number 1124
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[1], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[21] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[1], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[71] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[1], w_fp[4], COUPs[2], 1.0, 0., 0., w_fp[97] );

      // Amplitude(s) for diagram number 1124
      helas_CD_VVVV1_0( w_fp[21], w_fp[8], w_fp[5], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[21], w_fp[8], w_fp[5], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[21], w_fp[8], w_fp[5], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[71], w_fp[8], w_fp[5], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[71], w_fp[8], w_fp[5], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[71], w_fp[8], w_fp[5], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[97], w_fp[8], w_fp[5], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[1] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[97], w_fp[8], w_fp[5], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[97], w_fp[8], w_fp[5], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 1125 OF 1240 ***

      // Wavefunction(s) for diagram number 1125
      helas_CD_VVV1P0_1( w_fp[21], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[59] );
      helas_CD_VVV1P0_1( w_fp[71], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[20] );
      helas_CD_VVV1P0_1( w_fp[97], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[60] );

      // Amplitude(s) for diagram number 1125
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[59], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[20], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[60], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1126 OF 1240 ***

      // Wavefunction(s) for diagram number 1126
      helas_CD_VVV1P0_1( w_fp[21], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[17] );
      helas_CD_VVV1P0_1( w_fp[71], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[98] );
      helas_CD_VVV1P0_1( w_fp[97], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[111] );

      // Amplitude(s) for diagram number 1126
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[17], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[98], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[111], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 1127 OF 1240 ***

      // Wavefunction(s) for diagram number 1127
      // (none)

      // Amplitude(s) for diagram number 1127
      helas_CD_VVV1_0( w_fp[21], w_fp[8], w_fp[29], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[71], w_fp[8], w_fp[29], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[97], w_fp[8], w_fp[29], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[1] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1128 OF 1240 ***

      // Wavefunction(s) for diagram number 1128
      helas_CD_FFV1_2( w_fp[3], w_fp[21], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[16] );
      helas_CD_FFV1_2( w_fp[3], w_fp[71], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[10] );
      helas_CD_FFV1_2( w_fp[3], w_fp[97], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[68] );

      // Amplitude(s) for diagram number 1128
      helas_CD_FFV1_0( w_fp[16], w_fp[39], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[10], w_fp[39], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[93] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[68], w_fp[39], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];

      // *** DIAGRAM 1129 OF 1240 ***

      // Wavefunction(s) for diagram number 1129
      // (none)

      // Amplitude(s) for diagram number 1129
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[17], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1130 OF 1240 ***

      // Wavefunction(s) for diagram number 1130
      // (none)

      // Amplitude(s) for diagram number 1130
      helas_CD_FFV1_0( w_fp[41], w_fp[39], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[39], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[39], w_fp[97], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];

      // *** DIAGRAM 1131 OF 1240 ***

      // Wavefunction(s) for diagram number 1131
      // (none)

      // Amplitude(s) for diagram number 1131
      helas_CD_FFV1_0( w_fp[16], w_fp[47], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[10], w_fp[47], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[68], w_fp[47], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1132 OF 1240 ***

      // Wavefunction(s) for diagram number 1132
      // (none)

      // Amplitude(s) for diagram number 1132
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[20], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[60], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1133 OF 1240 ***

      // Wavefunction(s) for diagram number 1133
      // (none)

      // Amplitude(s) for diagram number 1133
      helas_CD_FFV1_0( w_fp[38], w_fp[47], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[47], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[47], w_fp[97], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];

      // *** DIAGRAM 1134 OF 1240 ***

      // Wavefunction(s) for diagram number 1134
      helas_CD_FFV1_1( w_fp[2], w_fp[21], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[23] );
      helas_CD_FFV1_1( w_fp[2], w_fp[71], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[21] );
      helas_CD_FFV1_1( w_fp[2], w_fp[97], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[71] );

      // Amplitude(s) for diagram number 1134
      helas_CD_FFV1_0( w_fp[38], w_fp[23], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[21], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[71], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];

      // *** DIAGRAM 1135 OF 1240 ***

      // Wavefunction(s) for diagram number 1135
      // (none)

      // Amplitude(s) for diagram number 1135
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[17], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1136 OF 1240 ***

      // Wavefunction(s) for diagram number 1136
      // (none)

      // Amplitude(s) for diagram number 1136
      helas_CD_FFV1_0( w_fp[41], w_fp[23], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[21], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[71], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];

      // *** DIAGRAM 1137 OF 1240 ***

      // Wavefunction(s) for diagram number 1137
      // (none)

      // Amplitude(s) for diagram number 1137
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[20], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[60], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1138 OF 1240 ***

      // Wavefunction(s) for diagram number 1138
      // (none)

      // Amplitude(s) for diagram number 1138
      helas_CD_FFV1_0( w_fp[3], w_fp[23], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[21], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[71], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1139 OF 1240 ***

      // Wavefunction(s) for diagram number 1139
      // (none)

      // Amplitude(s) for diagram number 1139
      helas_CD_FFV1_0( w_fp[16], w_fp[2], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[10], w_fp[2], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[68], w_fp[2], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1140 OF 1240 ***

      // Wavefunction(s) for diagram number 1140
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[1], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[68] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[1], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[29] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[1], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[10] );

      // Amplitude(s) for diagram number 1140
      helas_CD_VVVV1_0( w_fp[68], w_fp[8], w_fp[4], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[68], w_fp[8], w_fp[4], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[68], w_fp[8], w_fp[4], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[29], w_fp[8], w_fp[4], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[29], w_fp[8], w_fp[4], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[29], w_fp[8], w_fp[4], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[10], w_fp[8], w_fp[4], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[10], w_fp[8], w_fp[4], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[10], w_fp[8], w_fp[4], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 1141 OF 1240 ***

      // Wavefunction(s) for diagram number 1141
      helas_CD_VVV1P0_1( w_fp[68], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[16] );
      helas_CD_VVV1P0_1( w_fp[29], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[71] );
      helas_CD_VVV1P0_1( w_fp[10], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[21] );

      // Amplitude(s) for diagram number 1141
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[71], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[21], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 1142 OF 1240 ***

      // Wavefunction(s) for diagram number 1142
      helas_CD_VVV1P0_1( w_fp[68], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[23] );
      helas_CD_VVV1P0_1( w_fp[29], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[60] );
      helas_CD_VVV1P0_1( w_fp[10], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[20] );

      // Amplitude(s) for diagram number 1142
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[23], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[60], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[20], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 1143 OF 1240 ***

      // Wavefunction(s) for diagram number 1143
      // (none)

      // Amplitude(s) for diagram number 1143
      helas_CD_VVV1_0( w_fp[68], w_fp[8], w_fp[27], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[29], w_fp[8], w_fp[27], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[10], w_fp[8], w_fp[27], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[3] += amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];

      // *** DIAGRAM 1144 OF 1240 ***

      // Wavefunction(s) for diagram number 1144
      helas_CD_FFV1_2( w_fp[3], w_fp[68], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[59] );
      helas_CD_FFV1_2( w_fp[3], w_fp[29], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[111] );
      helas_CD_FFV1_2( w_fp[3], w_fp[10], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[98] );

      // Amplitude(s) for diagram number 1144
      helas_CD_FFV1_0( w_fp[59], w_fp[33], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[111], w_fp[33], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[69] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[98], w_fp[33], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];

      // *** DIAGRAM 1145 OF 1240 ***

      // Wavefunction(s) for diagram number 1145
      // (none)

      // Amplitude(s) for diagram number 1145
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[23], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[60], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[20], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1146 OF 1240 ***

      // Wavefunction(s) for diagram number 1146
      // (none)

      // Amplitude(s) for diagram number 1146
      helas_CD_FFV1_0( w_fp[41], w_fp[33], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[33], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[33], w_fp[10], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];

      // *** DIAGRAM 1147 OF 1240 ***

      // Wavefunction(s) for diagram number 1147
      // (none)

      // Amplitude(s) for diagram number 1147
      helas_CD_FFV1_0( w_fp[59], w_fp[47], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[113] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[111], w_fp[47], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[98], w_fp[47], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];

      // *** DIAGRAM 1148 OF 1240 ***

      // Wavefunction(s) for diagram number 1148
      // (none)

      // Amplitude(s) for diagram number 1148
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1149 OF 1240 ***

      // Wavefunction(s) for diagram number 1149
      // (none)

      // Amplitude(s) for diagram number 1149
      helas_CD_FFV1_0( w_fp[46], w_fp[47], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[47], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[47], w_fp[10], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];

      // *** DIAGRAM 1150 OF 1240 ***

      // Wavefunction(s) for diagram number 1150
      helas_CD_FFV1_1( w_fp[2], w_fp[68], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[17] );
      helas_CD_FFV1_1( w_fp[2], w_fp[29], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[68] );
      helas_CD_FFV1_1( w_fp[2], w_fp[10], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[29] );

      // Amplitude(s) for diagram number 1150
      helas_CD_FFV1_0( w_fp[46], w_fp[17], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[68], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[29], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];

      // *** DIAGRAM 1151 OF 1240 ***

      // Wavefunction(s) for diagram number 1151
      // (none)

      // Amplitude(s) for diagram number 1151
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[23], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[60], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[20], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1152 OF 1240 ***

      // Wavefunction(s) for diagram number 1152
      // (none)

      // Amplitude(s) for diagram number 1152
      helas_CD_FFV1_0( w_fp[41], w_fp[17], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[68], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[29], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];

      // *** DIAGRAM 1153 OF 1240 ***

      // Wavefunction(s) for diagram number 1153
      // (none)

      // Amplitude(s) for diagram number 1153
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1154 OF 1240 ***

      // Wavefunction(s) for diagram number 1154
      // (none)

      // Amplitude(s) for diagram number 1154
      helas_CD_FFV1_0( w_fp[3], w_fp[17], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[68], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[29], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1155 OF 1240 ***

      // Wavefunction(s) for diagram number 1155
      // (none)

      // Amplitude(s) for diagram number 1155
      helas_CD_FFV1_0( w_fp[59], w_fp[2], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[111], w_fp[2], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[98], w_fp[2], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1156 OF 1240 ***

      // Wavefunction(s) for diagram number 1156
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[1], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[98] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[1], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[27] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[1], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[111] );

      // Amplitude(s) for diagram number 1156
      helas_CD_VVVV1_0( w_fp[98], w_fp[8], w_fp[4], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[98], w_fp[8], w_fp[4], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[98], w_fp[8], w_fp[4], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      helas_CD_VVVV1_0( w_fp[27], w_fp[8], w_fp[4], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[27], w_fp[8], w_fp[4], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[27], w_fp[8], w_fp[4], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      helas_CD_VVVV1_0( w_fp[111], w_fp[8], w_fp[4], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[111], w_fp[8], w_fp[4], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[111], w_fp[8], w_fp[4], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];

      // *** DIAGRAM 1157 OF 1240 ***

      // Wavefunction(s) for diagram number 1157
      helas_CD_VVV1P0_1( w_fp[98], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[59] );
      helas_CD_VVV1P0_1( w_fp[27], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[29] );
      helas_CD_VVV1P0_1( w_fp[111], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[68] );

      // Amplitude(s) for diagram number 1157
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[59], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[29], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[68], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];

      // *** DIAGRAM 1158 OF 1240 ***

      // Wavefunction(s) for diagram number 1158
      helas_CD_VVV1P0_1( w_fp[98], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[17] );
      helas_CD_VVV1P0_1( w_fp[27], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[21] );
      helas_CD_VVV1P0_1( w_fp[111], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[71] );

      // Amplitude(s) for diagram number 1158
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[17], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[21], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[71], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];

      // *** DIAGRAM 1159 OF 1240 ***

      // Wavefunction(s) for diagram number 1159
      // (none)

      // Amplitude(s) for diagram number 1159
      helas_CD_VVV1_0( w_fp[98], w_fp[8], w_fp[24], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[27], w_fp[8], w_fp[24], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[111], w_fp[8], w_fp[24], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[5] += amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];

      // *** DIAGRAM 1160 OF 1240 ***

      // Wavefunction(s) for diagram number 1160
      helas_CD_FFV1_2( w_fp[3], w_fp[98], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[16] );
      helas_CD_FFV1_2( w_fp[3], w_fp[27], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[20] );
      helas_CD_FFV1_2( w_fp[3], w_fp[111], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[60] );

      // Amplitude(s) for diagram number 1160
      helas_CD_FFV1_0( w_fp[16], w_fp[33], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[65] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[20], w_fp[33], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[63] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[60], w_fp[33], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];

      // *** DIAGRAM 1161 OF 1240 ***

      // Wavefunction(s) for diagram number 1161
      // (none)

      // Amplitude(s) for diagram number 1161
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[17], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1162 OF 1240 ***

      // Wavefunction(s) for diagram number 1162
      // (none)

      // Amplitude(s) for diagram number 1162
      helas_CD_FFV1_0( w_fp[38], w_fp[33], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[33], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[33], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];

      // *** DIAGRAM 1163 OF 1240 ***

      // Wavefunction(s) for diagram number 1163
      // (none)

      // Amplitude(s) for diagram number 1163
      helas_CD_FFV1_0( w_fp[16], w_fp[39], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[89] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[20], w_fp[39], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[60], w_fp[39], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];

      // *** DIAGRAM 1164 OF 1240 ***

      // Wavefunction(s) for diagram number 1164
      // (none)

      // Amplitude(s) for diagram number 1164
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1165 OF 1240 ***

      // Wavefunction(s) for diagram number 1165
      // (none)

      // Amplitude(s) for diagram number 1165
      helas_CD_FFV1_0( w_fp[46], w_fp[39], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[39], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[39], w_fp[111], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];

      // *** DIAGRAM 1166 OF 1240 ***

      // Wavefunction(s) for diagram number 1166
      helas_CD_FFV1_1( w_fp[2], w_fp[98], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[23] );
      helas_CD_FFV1_1( w_fp[2], w_fp[27], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[98] );
      helas_CD_FFV1_1( w_fp[2], w_fp[111], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[27] );

      // Amplitude(s) for diagram number 1166
      helas_CD_FFV1_0( w_fp[46], w_fp[23], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += amp_sv[0];
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[98], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[27], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];

      // *** DIAGRAM 1167 OF 1240 ***

      // Wavefunction(s) for diagram number 1167
      // (none)

      // Amplitude(s) for diagram number 1167
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[17], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1168 OF 1240 ***

      // Wavefunction(s) for diagram number 1168
      // (none)

      // Amplitude(s) for diagram number 1168
      helas_CD_FFV1_0( w_fp[38], w_fp[23], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[98], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[27], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];

      // *** DIAGRAM 1169 OF 1240 ***

      // Wavefunction(s) for diagram number 1169
      // (none)

      // Amplitude(s) for diagram number 1169
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1170 OF 1240 ***

      // Wavefunction(s) for diagram number 1170
      // (none)

      // Amplitude(s) for diagram number 1170
      helas_CD_FFV1_0( w_fp[3], w_fp[23], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[98], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[27], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1171 OF 1240 ***

      // Wavefunction(s) for diagram number 1171
      // (none)

      // Amplitude(s) for diagram number 1171
      helas_CD_FFV1_0( w_fp[16], w_fp[2], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[20], w_fp[2], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[60], w_fp[2], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1172 OF 1240 ***

      // Wavefunction(s) for diagram number 1172
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[60] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[24] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[4], w_fp[5], COUPs[2], 1.0, 0., 0., w_fp[20] );
      helas_CD_FFV1_2( w_fp[3], w_fp[60], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[16] );
      helas_CD_FFV1_2( w_fp[3], w_fp[24], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[27] );
      helas_CD_FFV1_2( w_fp[3], w_fp[20], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[98] );

      // Amplitude(s) for diagram number 1172
      helas_CD_FFV1_0( w_fp[16], w_fp[77], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[27], w_fp[77], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[98], w_fp[77], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];

      // *** DIAGRAM 1173 OF 1240 ***

      // Wavefunction(s) for diagram number 1173
      helas_CD_VVV1P0_1( w_fp[60], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[23] );
      helas_CD_VVV1P0_1( w_fp[24], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[68] );
      helas_CD_VVV1P0_1( w_fp[20], w_fp[6], COUPs[0], 1.0, 0., 0., w_fp[29] );

      // Amplitude(s) for diagram number 1173
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[23], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1174 OF 1240 ***

      // Wavefunction(s) for diagram number 1174
      // (none)

      // Amplitude(s) for diagram number 1174
      helas_CD_FFV1_0( w_fp[41], w_fp[77], w_fp[60], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[77], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[77], w_fp[20], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];

      // *** DIAGRAM 1175 OF 1240 ***

      // Wavefunction(s) for diagram number 1175
      helas_CD_FFV1_1( w_fp[2], w_fp[60], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[59] );
      helas_CD_FFV1_1( w_fp[2], w_fp[24], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[71] );
      helas_CD_FFV1_1( w_fp[2], w_fp[20], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[21] );

      // Amplitude(s) for diagram number 1175
      helas_CD_FFV1_0( w_fp[52], w_fp[59], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[71], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[21], w_fp[6], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];

      // *** DIAGRAM 1176 OF 1240 ***

      // Wavefunction(s) for diagram number 1176
      // (none)

      // Amplitude(s) for diagram number 1176
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[23], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1177 OF 1240 ***

      // Wavefunction(s) for diagram number 1177
      // (none)

      // Amplitude(s) for diagram number 1177
      helas_CD_FFV1_0( w_fp[52], w_fp[47], w_fp[60], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[47], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[47], w_fp[20], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1178 OF 1240 ***

      // Wavefunction(s) for diagram number 1178
      // (none)

      // Amplitude(s) for diagram number 1178
      helas_CD_FFV1_0( w_fp[3], w_fp[59], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[71], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[15] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[21], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[9] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1179 OF 1240 ***

      // Wavefunction(s) for diagram number 1179
      // (none)

      // Amplitude(s) for diagram number 1179
      helas_CD_FFV1_0( w_fp[16], w_fp[2], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[27], w_fp[2], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[45] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[98], w_fp[2], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[47] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1180 OF 1240 ***

      // Wavefunction(s) for diagram number 1180
      // (none)

      // Amplitude(s) for diagram number 1180
      helas_CD_VVV1_0( w_fp[60], w_fp[72], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[24], w_fp[72], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] += amp_sv[0];
      jamp_sv[15] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[45] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[60] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[103] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[20], w_fp[72], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];

      // *** DIAGRAM 1181 OF 1240 ***

      // Wavefunction(s) for diagram number 1181
      // (none)

      // Amplitude(s) for diagram number 1181
      helas_CD_VVVV1_0( w_fp[60], w_fp[1], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[60], w_fp[1], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[60], w_fp[1], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVVV1_0( w_fp[24], w_fp[1], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[24], w_fp[1], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[24], w_fp[1], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVVV1_0( w_fp[20], w_fp[1], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[20], w_fp[1], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[20], w_fp[1], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1182 OF 1240 ***

      // Wavefunction(s) for diagram number 1182
      helas_CD_VVV1P0_1( w_fp[60], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[72] );
      helas_CD_VVV1P0_1( w_fp[24], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[60] );
      helas_CD_VVV1P0_1( w_fp[20], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[24] );

      // Amplitude(s) for diagram number 1182
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[72], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[60], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[26] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[112] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[24], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];

      // *** DIAGRAM 1183 OF 1240 ***

      // Wavefunction(s) for diagram number 1183
      // (none)

      // Amplitude(s) for diagram number 1183
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[23], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[24] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[47] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[118] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[68], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[15] += amp_sv[0];
      jamp_sv[26] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[112] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[29], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[9] += amp_sv[0];
      jamp_sv[24] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      jamp_sv[118] -= amp_sv[0];

      // *** DIAGRAM 1184 OF 1240 ***

      // Wavefunction(s) for diagram number 1184
      // (none)

      // Amplitude(s) for diagram number 1184
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[60], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[103] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[112] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[102] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[118] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1185 OF 1240 ***

      // Wavefunction(s) for diagram number 1185
      // (none)

      // Amplitude(s) for diagram number 1185
      helas_CD_FFV1_0( w_fp[16], w_fp[47], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[102] += amp_sv[0];
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[107] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[27], w_fp[47], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[103] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[98], w_fp[47], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[102] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];

      // *** DIAGRAM 1186 OF 1240 ***

      // Wavefunction(s) for diagram number 1186
      // (none)

      // Amplitude(s) for diagram number 1186
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[60], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[26] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[60] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[24] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[84] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1187 OF 1240 ***

      // Wavefunction(s) for diagram number 1187
      // (none)

      // Amplitude(s) for diagram number 1187
      helas_CD_FFV1_0( w_fp[41], w_fp[59], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[84] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[71], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[60] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[21], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[84] -= amp_sv[0];

      // *** DIAGRAM 1188 OF 1240 ***

      // Wavefunction(s) for diagram number 1188
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[21] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[71] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[4], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[59] );
      helas_CD_FFV1_2( w_fp[3], w_fp[21], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[24] );
      helas_CD_FFV1_2( w_fp[3], w_fp[71], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[60] );
      helas_CD_FFV1_2( w_fp[3], w_fp[59], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[72] );

      // Amplitude(s) for diagram number 1188
      helas_CD_FFV1_0( w_fp[24], w_fp[77], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[60], w_fp[77], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[72], w_fp[77], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];

      // *** DIAGRAM 1189 OF 1240 ***

      // Wavefunction(s) for diagram number 1189
      helas_CD_VVV1P0_1( w_fp[21], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[98] );
      helas_CD_VVV1P0_1( w_fp[71], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[27] );
      helas_CD_VVV1P0_1( w_fp[59], w_fp[5], COUPs[0], 1.0, 0., 0., w_fp[16] );

      // Amplitude(s) for diagram number 1189
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1190 OF 1240 ***

      // Wavefunction(s) for diagram number 1190
      // (none)

      // Amplitude(s) for diagram number 1190
      helas_CD_FFV1_0( w_fp[38], w_fp[77], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[77], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[77], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];

      // *** DIAGRAM 1191 OF 1240 ***

      // Wavefunction(s) for diagram number 1191
      helas_CD_FFV1_1( w_fp[2], w_fp[21], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[29] );
      helas_CD_FFV1_1( w_fp[2], w_fp[71], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[68] );
      helas_CD_FFV1_1( w_fp[2], w_fp[59], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[23] );

      // Amplitude(s) for diagram number 1191
      helas_CD_FFV1_0( w_fp[52], w_fp[29], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[68], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[23], w_fp[5], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];

      // *** DIAGRAM 1192 OF 1240 ***

      // Wavefunction(s) for diagram number 1192
      // (none)

      // Amplitude(s) for diagram number 1192
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[98], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1193 OF 1240 ***

      // Wavefunction(s) for diagram number 1193
      // (none)

      // Amplitude(s) for diagram number 1193
      helas_CD_FFV1_0( w_fp[52], w_fp[39], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[39], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[39], w_fp[59], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];

      // *** DIAGRAM 1194 OF 1240 ***

      // Wavefunction(s) for diagram number 1194
      // (none)

      // Amplitude(s) for diagram number 1194
      helas_CD_FFV1_0( w_fp[3], w_fp[29], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[68], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[21] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[23], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[11] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[109] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1195 OF 1240 ***

      // Wavefunction(s) for diagram number 1195
      // (none)

      // Amplitude(s) for diagram number 1195
      helas_CD_FFV1_0( w_fp[24], w_fp[2], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[60], w_fp[2], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[39] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[72], w_fp[2], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[36] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[41] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1196 OF 1240 ***

      // Wavefunction(s) for diagram number 1196
      // (none)

      // Amplitude(s) for diagram number 1196
      helas_CD_VVV1_0( w_fp[21], w_fp[66], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[71], w_fp[66], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] += amp_sv[0];
      jamp_sv[21] -= amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[39] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[66] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[79] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[59], w_fp[66], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];

      // *** DIAGRAM 1197 OF 1240 ***

      // Wavefunction(s) for diagram number 1197
      // (none)

      // Amplitude(s) for diagram number 1197
      helas_CD_VVVV1_0( w_fp[21], w_fp[1], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[21], w_fp[1], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[21], w_fp[1], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[71], w_fp[1], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[71], w_fp[1], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[71], w_fp[1], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[59], w_fp[1], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[59], w_fp[1], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[108] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[59], w_fp[1], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 1198 OF 1240 ***

      // Wavefunction(s) for diagram number 1198
      helas_CD_VVV1P0_1( w_fp[21], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[66] );
      helas_CD_VVV1P0_1( w_fp[71], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[21] );
      helas_CD_VVV1P0_1( w_fp[59], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[71] );

      // Amplitude(s) for diagram number 1198
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[66], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[21], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[28] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[88] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[71], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[42] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[85] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];

      // *** DIAGRAM 1199 OF 1240 ***

      // Wavefunction(s) for diagram number 1199
      // (none)

      // Amplitude(s) for diagram number 1199
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[98], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[25] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[36] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[94] += amp_sv[0];
      jamp_sv[109] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[27], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[21] += amp_sv[0];
      jamp_sv[28] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[88] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[11] += amp_sv[0];
      jamp_sv[25] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[36] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[42] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[85] += amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[94] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[109] += amp_sv[0];

      // *** DIAGRAM 1200 OF 1240 ***

      // Wavefunction(s) for diagram number 1200
      // (none)

      // Amplitude(s) for diagram number 1200
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[79] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[88] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[78] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[85] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[94] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1201 OF 1240 ***

      // Wavefunction(s) for diagram number 1201
      // (none)

      // Amplitude(s) for diagram number 1201
      helas_CD_FFV1_0( w_fp[24], w_fp[39], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[78] += amp_sv[0];
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[83] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[60], w_fp[39], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[79] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[72], w_fp[39], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[78] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];

      // *** DIAGRAM 1202 OF 1240 ***

      // Wavefunction(s) for diagram number 1202
      // (none)

      // Amplitude(s) for diagram number 1202
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[66], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[21], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[28] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[66] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[71], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[25] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[42] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[108] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1203 OF 1240 ***

      // Wavefunction(s) for diagram number 1203
      // (none)

      // Amplitude(s) for diagram number 1203
      helas_CD_FFV1_0( w_fp[38], w_fp[29], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[108] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[68], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[66] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[23], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[108] -= amp_sv[0];

      // *** DIAGRAM 1204 OF 1240 ***

      // Wavefunction(s) for diagram number 1204
      helas_CD_VVVV1P0_1( w_fp[0], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[23] );
      helas_CD_VVVV3P0_1( w_fp[0], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[68] );
      helas_CD_VVVV4P0_1( w_fp[0], w_fp[5], w_fp[6], COUPs[2], 1.0, 0., 0., w_fp[29] );
      helas_CD_FFV1_2( w_fp[3], w_fp[23], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[71] );
      helas_CD_FFV1_2( w_fp[3], w_fp[68], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[21] );
      helas_CD_FFV1_2( w_fp[3], w_fp[29], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[66] );

      // Amplitude(s) for diagram number 1204
      helas_CD_FFV1_0( w_fp[71], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[21], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[66], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];

      // *** DIAGRAM 1205 OF 1240 ***

      // Wavefunction(s) for diagram number 1205
      helas_CD_VVV1P0_1( w_fp[23], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[72] );
      helas_CD_VVV1P0_1( w_fp[68], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[60] );
      helas_CD_VVV1P0_1( w_fp[29], w_fp[4], COUPs[0], 1.0, 0., 0., w_fp[24] );

      // Amplitude(s) for diagram number 1205
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[60], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[29] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1206 OF 1240 ***

      // Wavefunction(s) for diagram number 1206
      // (none)

      // Amplitude(s) for diagram number 1206
      helas_CD_FFV1_0( w_fp[46], w_fp[77], w_fp[23], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[77], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[77], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];

      // *** DIAGRAM 1207 OF 1240 ***

      // Wavefunction(s) for diagram number 1207
      helas_CD_FFV1_1( w_fp[2], w_fp[23], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[77] );
      helas_CD_FFV1_1( w_fp[2], w_fp[68], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[16] );
      helas_CD_FFV1_1( w_fp[2], w_fp[29], COUPs[1], 1.0, cIPD[0], cIPD[1], w_fp[27] );

      // Amplitude(s) for diagram number 1207
      helas_CD_FFV1_0( w_fp[52], w_fp[77], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[16], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[27], w_fp[4], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];

      // *** DIAGRAM 1208 OF 1240 ***

      // Wavefunction(s) for diagram number 1208
      // (none)

      // Amplitude(s) for diagram number 1208
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[72], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[60], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[2], w_fp[24], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1209 OF 1240 ***

      // Wavefunction(s) for diagram number 1209
      // (none)

      // Amplitude(s) for diagram number 1209
      helas_CD_FFV1_0( w_fp[52], w_fp[33], w_fp[23], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[33], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[52], w_fp[33], w_fp[29], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];

      // *** DIAGRAM 1210 OF 1240 ***

      // Wavefunction(s) for diagram number 1210
      // (none)

      // Amplitude(s) for diagram number 1210
      helas_CD_FFV1_0( w_fp[3], w_fp[77], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[16], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[23] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[91] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[27], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[17] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[115] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1211 OF 1240 ***

      // Wavefunction(s) for diagram number 1211
      // (none)

      // Amplitude(s) for diagram number 1211
      helas_CD_FFV1_0( w_fp[71], w_fp[2], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[21], w_fp[2], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[31] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[33] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[66], w_fp[2], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[30] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[35] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1212 OF 1240 ***

      // Wavefunction(s) for diagram number 1212
      // (none)

      // Amplitude(s) for diagram number 1212
      helas_CD_VVV1_0( w_fp[23], w_fp[61], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[68], w_fp[61], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[31] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[55] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[90] += amp_sv[0];
      jamp_sv[91] -= amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[29], w_fp[61], w_fp[8], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];

      // *** DIAGRAM 1213 OF 1240 ***

      // Wavefunction(s) for diagram number 1213
      // (none)

      // Amplitude(s) for diagram number 1213
      helas_CD_VVVV1_0( w_fp[23], w_fp[1], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[23], w_fp[1], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[23], w_fp[1], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[68], w_fp[1], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[68], w_fp[1], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[68], w_fp[1], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[29], w_fp[1], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[29], w_fp[1], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[114] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[29], w_fp[1], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 1214 OF 1240 ***

      // Wavefunction(s) for diagram number 1214
      helas_CD_VVV1P0_1( w_fp[23], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[61] );
      helas_CD_VVV1P0_1( w_fp[68], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[23] );
      helas_CD_VVV1P0_1( w_fp[29], w_fp[1], COUPs[0], 1.0, 0., 0., w_fp[68] );

      // Amplitude(s) for diagram number 1214
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[61], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[23], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[29] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[64] += amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[68], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[37] -= amp_sv[0];
      jamp_sv[43] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[61] -= amp_sv[0];
      jamp_sv[67] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];

      // *** DIAGRAM 1215 OF 1240 ***

      // Wavefunction(s) for diagram number 1215
      // (none)

      // Amplitude(s) for diagram number 1215
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[72], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[27] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[30] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[70] += amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[115] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[60], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[23] += amp_sv[0];
      jamp_sv[29] -= amp_sv[0];
      jamp_sv[31] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[64] -= amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[91] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[1], w_fp[8], w_fp[24], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[17] += amp_sv[0];
      jamp_sv[27] -= amp_sv[0];
      jamp_sv[30] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[37] += amp_sv[0];
      jamp_sv[43] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[61] += amp_sv[0];
      jamp_sv[67] += amp_sv[0];
      jamp_sv[70] -= amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[115] += amp_sv[0];

      // *** DIAGRAM 1216 OF 1240 ***

      // Wavefunction(s) for diagram number 1216
      // (none)

      // Amplitude(s) for diagram number 1216
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[23], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[55] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[64] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[54] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[61] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[67] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[70] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1217 OF 1240 ***

      // Wavefunction(s) for diagram number 1217
      // (none)

      // Amplitude(s) for diagram number 1217
      helas_CD_FFV1_0( w_fp[71], w_fp[33], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[54] += amp_sv[0];
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[59] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[21], w_fp[33], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[55] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[66], w_fp[33], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[54] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];

      // *** DIAGRAM 1218 OF 1240 ***

      // Wavefunction(s) for diagram number 1218
      // (none)

      // Amplitude(s) for diagram number 1218
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[61], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[23], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[29] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[90] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[68], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[27] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[37] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[43] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[114] += cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1219 OF 1240 ***

      // Wavefunction(s) for diagram number 1219
      // (none)

      // Amplitude(s) for diagram number 1219
      helas_CD_FFV1_0( w_fp[46], w_fp[77], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[114] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[16], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[90] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[27], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[114] -= amp_sv[0];

      // *** DIAGRAM 1220 OF 1240 ***

      // Wavefunction(s) for diagram number 1220
      // (none)

      // Amplitude(s) for diagram number 1220
      helas_CD_VVVV1_0( w_fp[0], w_fp[73], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[73], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[73], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      helas_CD_VVVV1_0( w_fp[0], w_fp[79], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[79], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[79], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[19] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      helas_CD_VVVV1_0( w_fp[0], w_fp[80], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[80], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[80], w_fp[8], w_fp[6], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 1221 OF 1240 ***

      // Wavefunction(s) for diagram number 1221
      helas_CD_VVV1P0_1( w_fp[0], w_fp[73], COUPs[0], 1.0, 0., 0., w_fp[27] );
      helas_CD_VVV1P0_1( w_fp[0], w_fp[79], COUPs[0], 1.0, 0., 0., w_fp[1] );
      helas_CD_VVV1P0_1( w_fp[0], w_fp[80], COUPs[0], 1.0, 0., 0., w_fp[16] );

      // Amplitude(s) for diagram number 1221
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[27], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[1], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[38] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[62] += amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[97] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[99] += amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[6], w_fp[16], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[32] += amp_sv[0];
      jamp_sv[56] -= amp_sv[0];
      jamp_sv[80] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      jamp_sv[96] += amp_sv[0];
      jamp_sv[98] -= amp_sv[0];
      jamp_sv[100] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1222 OF 1240 ***

      // Wavefunction(s) for diagram number 1222
      // (none)

      // Amplitude(s) for diagram number 1222
      helas_CD_VVV1_0( w_fp[73], w_fp[6], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += amp_sv[0];
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[14] += amp_sv[0];
      jamp_sv[18] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[23] -= amp_sv[0];
      jamp_sv[33] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[87] -= amp_sv[0];
      jamp_sv[105] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[119] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[79], w_fp[6], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[21] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[39] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[113] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_VVV1_0( w_fp[80], w_fp[6], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[23] += amp_sv[0];
      jamp_sv[33] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      jamp_sv[119] -= amp_sv[0];

      // *** DIAGRAM 1223 OF 1240 ***

      // Wavefunction(s) for diagram number 1223
      // (none)

      // Amplitude(s) for diagram number 1223
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[99] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[107] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[113] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[47], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[98] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[100] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[101] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[105] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[111] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[117] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[119] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1224 OF 1240 ***

      // Wavefunction(s) for diagram number 1224
      // (none)

      // Amplitude(s) for diagram number 1224
      helas_CD_FFV1_0( w_fp[3], w_fp[113], w_fp[73], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] += amp_sv[0];
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[101] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[113], w_fp[79], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[97] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[99] -= amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[113], w_fp[80], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[96] -= amp_sv[0];
      jamp_sv[98] += amp_sv[0];
      jamp_sv[100] += amp_sv[0];
      jamp_sv[101] -= amp_sv[0];

      // *** DIAGRAM 1225 OF 1240 ***

      // Wavefunction(s) for diagram number 1225
      // (none)

      // Amplitude(s) for diagram number 1225
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[27], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[1], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[2] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[8] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[38] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[62] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[41], w_fp[2], w_fp[16], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[0] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[6] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[12] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[14] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[32] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[56] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[80] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[86] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1226 OF 1240 ***

      // Wavefunction(s) for diagram number 1226
      // (none)

      // Amplitude(s) for diagram number 1226
      helas_CD_FFV1_0( w_fp[62], w_fp[2], w_fp[73], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] += amp_sv[0];
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[86] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[62], w_fp[2], w_fp[79], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[38] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[62] -= amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[62], w_fp[2], w_fp[80], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[32] -= amp_sv[0];
      jamp_sv[56] += amp_sv[0];
      jamp_sv[80] += amp_sv[0];
      jamp_sv[86] -= amp_sv[0];

      // *** DIAGRAM 1227 OF 1240 ***

      // Wavefunction(s) for diagram number 1227
      // (none)

      // Amplitude(s) for diagram number 1227
      helas_CD_VVVV1_0( w_fp[0], w_fp[57], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[57], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[57], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[0], w_fp[81], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[81], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[81], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[13] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[0], w_fp[82], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[82], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[82], w_fp[8], w_fp[5], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];

      // *** DIAGRAM 1228 OF 1240 ***

      // Wavefunction(s) for diagram number 1228
      helas_CD_VVV1P0_1( w_fp[0], w_fp[57], COUPs[0], 1.0, 0., 0., w_fp[62] );
      helas_CD_VVV1P0_1( w_fp[0], w_fp[81], COUPs[0], 1.0, 0., 0., w_fp[80] );
      helas_CD_VVV1P0_1( w_fp[0], w_fp[82], COUPs[0], 1.0, 0., 0., w_fp[79] );

      // Amplitude(s) for diagram number 1228
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[62], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[80], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[44] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[68] += amp_sv[0];
      jamp_sv[73] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[75] += amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[5], w_fp[79], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[34] += amp_sv[0];
      jamp_sv[58] -= amp_sv[0];
      jamp_sv[72] += amp_sv[0];
      jamp_sv[74] -= amp_sv[0];
      jamp_sv[76] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[104] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];

      // *** DIAGRAM 1229 OF 1240 ***

      // Wavefunction(s) for diagram number 1229
      // (none)

      // Amplitude(s) for diagram number 1229
      helas_CD_VVV1_0( w_fp[57], w_fp[5], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += amp_sv[0];
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[12] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[17] -= amp_sv[0];
      jamp_sv[20] += amp_sv[0];
      jamp_sv[35] -= amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[81] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[95] += amp_sv[0];
      jamp_sv[111] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[81], w_fp[5], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[15] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[45] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[89] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[82], w_fp[5], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[12] += amp_sv[0];
      jamp_sv[14] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[17] += amp_sv[0];
      jamp_sv[18] += amp_sv[0];
      jamp_sv[20] -= amp_sv[0];
      jamp_sv[35] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[81] -= amp_sv[0];
      jamp_sv[87] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[95] -= amp_sv[0];
      jamp_sv[105] -= amp_sv[0];
      jamp_sv[111] += amp_sv[0];

      // *** DIAGRAM 1230 OF 1240 ***

      // Wavefunction(s) for diagram number 1230
      // (none)

      // Amplitude(s) for diagram number 1230
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[80], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[75] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[83] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[89] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[39], w_fp[79], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[74] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[76] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[77] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[81] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[87] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[93] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[95] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1231 OF 1240 ***

      // Wavefunction(s) for diagram number 1231
      // (none)

      // Amplitude(s) for diagram number 1231
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[57], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] += amp_sv[0];
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[77] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[81], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[73] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[75] -= amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[102], w_fp[82], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[72] -= amp_sv[0];
      jamp_sv[74] += amp_sv[0];
      jamp_sv[76] += amp_sv[0];
      jamp_sv[77] -= amp_sv[0];

      // *** DIAGRAM 1232 OF 1240 ***

      // Wavefunction(s) for diagram number 1232
      // (none)

      // Amplitude(s) for diagram number 1232
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[62], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[80], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[4] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[10] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[44] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[68] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[38], w_fp[2], w_fp[79], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[1] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[7] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[18] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[20] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[34] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[58] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[104] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[110] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1233 OF 1240 ***

      // Wavefunction(s) for diagram number 1233
      // (none)

      // Amplitude(s) for diagram number 1233
      helas_CD_FFV1_0( w_fp[104], w_fp[2], w_fp[57], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] += amp_sv[0];
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[110] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[104], w_fp[2], w_fp[81], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[44] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[68] -= amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[104], w_fp[2], w_fp[82], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[34] -= amp_sv[0];
      jamp_sv[58] += amp_sv[0];
      jamp_sv[104] += amp_sv[0];
      jamp_sv[110] -= amp_sv[0];

      // *** DIAGRAM 1234 OF 1240 ***

      // Wavefunction(s) for diagram number 1234
      // (none)

      // Amplitude(s) for diagram number 1234
      helas_CD_VVVV1_0( w_fp[0], w_fp[55], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[55], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[55], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[0], w_fp[83], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[83], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[83], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[7] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVVV1_0( w_fp[0], w_fp[84], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_VVVV3_0( w_fp[0], w_fp[84], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];
      helas_CD_VVVV4_0( w_fp[0], w_fp[84], w_fp[8], w_fp[4], COUPs[2], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];

      // *** DIAGRAM 1235 OF 1240 ***

      // Wavefunction(s) for diagram number 1235
      helas_CD_VVV1P0_1( w_fp[0], w_fp[55], COUPs[0], 1.0, 0., 0., w_fp[104] );
      helas_CD_VVV1P0_1( w_fp[0], w_fp[83], COUPs[0], 1.0, 0., 0., w_fp[82] );
      helas_CD_VVV1P0_1( w_fp[0], w_fp[84], COUPs[0], 1.0, 0., 0., w_fp[81] );

      // Amplitude(s) for diagram number 1235
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[104], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[82], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[46] += amp_sv[0];
      jamp_sv[49] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[51] += amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[92] += amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[8], w_fp[4], w_fp[81], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[40] += amp_sv[0];
      jamp_sv[48] += amp_sv[0];
      jamp_sv[50] -= amp_sv[0];
      jamp_sv[52] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[82] -= amp_sv[0];
      jamp_sv[106] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];

      // *** DIAGRAM 1236 OF 1240 ***

      // Wavefunction(s) for diagram number 1236
      // (none)

      // Amplitude(s) for diagram number 1236
      helas_CD_VVV1_0( w_fp[55], w_fp[4], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += amp_sv[0];
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[6] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[11] -= amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[22] += amp_sv[0];
      jamp_sv[41] -= amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[57] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[71] += amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[117] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[83], w_fp[4], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] -= amp_sv[0];
      jamp_sv[7] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[9] += amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[16] -= amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[47] += amp_sv[0];
      jamp_sv[59] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[65] -= amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[93] += amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      helas_CD_VVV1_0( w_fp[84], w_fp[4], w_fp[56], COUPs[0], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= amp_sv[0];
      jamp_sv[6] += amp_sv[0];
      jamp_sv[8] -= amp_sv[0];
      jamp_sv[10] -= amp_sv[0];
      jamp_sv[11] += amp_sv[0];
      jamp_sv[13] += amp_sv[0];
      jamp_sv[19] += amp_sv[0];
      jamp_sv[22] -= amp_sv[0];
      jamp_sv[41] += amp_sv[0];
      jamp_sv[57] -= amp_sv[0];
      jamp_sv[63] += amp_sv[0];
      jamp_sv[69] += amp_sv[0];
      jamp_sv[71] -= amp_sv[0];
      jamp_sv[83] -= amp_sv[0];
      jamp_sv[107] -= amp_sv[0];
      jamp_sv[117] += amp_sv[0];

      // *** DIAGRAM 1237 OF 1240 ***

      // Wavefunction(s) for diagram number 1237
      // (none)

      // Amplitude(s) for diagram number 1237
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[82], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[51] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[59] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[65] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[33], w_fp[81], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[50] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[52] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[53] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[57] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[63] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[69] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[71] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1238 OF 1240 ***

      // Wavefunction(s) for diagram number 1238
      // (none)

      // Amplitude(s) for diagram number 1238
      helas_CD_FFV1_0( w_fp[3], w_fp[114], w_fp[55], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] += amp_sv[0];
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[53] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[114], w_fp[83], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[49] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[51] -= amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[3], w_fp[114], w_fp[84], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[48] -= amp_sv[0];
      jamp_sv[50] += amp_sv[0];
      jamp_sv[52] += amp_sv[0];
      jamp_sv[53] -= amp_sv[0];

      // *** DIAGRAM 1239 OF 1240 ***

      // Wavefunction(s) for diagram number 1239
      // (none)

      // Amplitude(s) for diagram number 1239
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[104], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[82], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[5] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[16] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[46] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[92] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      helas_CD_FFV1_0( w_fp[46], w_fp[2], w_fp[81], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[3] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[13] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[19] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[22] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[40] -= cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[82] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[106] += cxtype( 0, 1 ) * amp_sv[0];
      jamp_sv[116] -= cxtype( 0, 1 ) * amp_sv[0];

      // *** DIAGRAM 1240 OF 1240 ***

      // Wavefunction(s) for diagram number 1240
      // (none)

      // Amplitude(s) for diagram number 1240
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[55], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] += amp_sv[0];
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[116] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[83], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[46] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[92] -= amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      helas_CD_FFV1_0( w_fp[99], w_fp[2], w_fp[84], COUPs[1], 1.0, &amp_fp[0] );
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // Here the code base generated with multichannel support updates numerators_sv and denominators_sv (#473)
#endif
      jamp_sv[40] -= amp_sv[0];
      jamp_sv[82] += amp_sv[0];
      jamp_sv[106] += amp_sv[0];
      jamp_sv[116] -= amp_sv[0];

      // *** COLOR CHOICE BELOW ***
      // Store the leading color flows for choice of color
      if( jamp2_sv ) // disable color choice if nullptr
        for( int icol = 0; icol < ncolor; icol++ )
          jamp2_sv[ncolor * iParity + icol] += cxabs2( jamp_sv[icol] ); // may underflow #831

      // *** COLOR MATRIX BELOW ***
      // (This method used to be called CPPProcess::matrix_1_gg_ttxggg()?)

      // The color denominators (initialize all array elements, with ncolor=120)
      // [NB do keep 'static' for these constexpr arrays, see issue #283]
      static constexpr fptype2 denom[ncolor] = {}; // 1-D array[120]

      // The color matrix (initialize all array elements, with ncolor=120)
      // [NB do keep 'static' for these constexpr arrays, see issue #283]
      static constexpr fptype2 cf[ncolor][ncolor] = {
        { 4096, -512, -512, 64, 64, 640, -512, 64, 64, -8, -8, -80, 64, -8, 640, -80, 568, 496, -8, -80, -80, 496, 496, -224, -512, 64, 64, -8, -8, -80, 64, -8, -8, 1, 1, 10, -8, 1, -80, 10, -71, -62, 1, 10, 10, -62, -62, 28, 64, -8, -8, 1, 1, 10, 640, -80, -80, 10, 10, 100, 568, -71, 496, -62, 505, 514, -71, 19, -62, -53, -134, -44, -8, 1, -80, 10, -71, -62, -80, 10, 496, -62, 19, -53, 496, -62, -224, 28, -134, -44, 505, -134, -134, 442, 442, -116, 1, 10, 10, -62, -62, 28, 10, 100, -62, 514, -53, -44, -62, -53, 28, -44, 442, -116, 514, -44, -44, -116, -116, 136 },
        { -512, 4096, 64, 640, -512, 64, 64, -512, -8, -80, 64, -8, -8, -80, -80, 496, 496, -224, 64, -8, 640, -80, 568, 496, 64, -512, -8, -80, 64, -8, -8, 64, 1, 10, -8, 1, 1, 10, 10, -62, -62, 28, -8, 1, -80, 10, -71, -62, -8, 64, 1, 10, -8, 1, -80, 640, 10, 100, -80, 10, -71, 19, -62, -53, -134, -44, 568, -71, 496, -62, 505, 514, 1, 10, 10, -62, -62, 28, 10, 100, -62, 514, -53, -44, -62, -53, 28, -44, 442, -116, 514, -44, -44, -116, -116, 136, -8, 1, -80, 10, -71, -62, -80, 10, 496, -62, 19, -53, 496, -62, -224, 28, -134, -44, 505, -134, -134, 442, 442, -116 },
        { -512, 64, 4096, -512, 640, 64, 64, -8, 640, -80, 568, 496, -512, 64, 64, -8, -8, -80, -80, -8, 496, -224, -80, 496, 64, -8, -512, 64, -80, -8, -8, 1, -80, 10, -71, -62, 64, -8, -8, 1, 1, 10, 10, 1, -62, 28, 10, -62, -8, 1, -80, 10, -71, -62, -80, 10, 496, -62, 19, -53, 496, -62, -224, 28, -134, -44, 505, -134, -134, 442, 442, -116, 64, -8, -8, 1, 1, 10, 640, -80, -80, 10, 10, 100, 568, -71, 496, -62, 505, 514, -71, 19, -62, -53, -134, -44, 10, 1, -62, 28, 10, -62, 100, 10, -53, -44, -62, 514, 514, -44, -44, -116, -116, 136, -62, -53, 28, -44, 442, -116 },
        { 64, 640, -512, 4096, 64, -512, -8, -80, -80, 496, 496, -224, 64, -512, -8, -80, 64, -8, -8, 64, 568, 496, 640, -80, -8, -80, 64, -512, -8, 64, 1, 10, 10, -62, -62, 28, -8, 64, 1, 10, -8, 1, 1, -8, -71, -62, -80, 10, 1, 10, 10, -62, -62, 28, 10, 100, -62, 514, -53, -44, -62, -53, 28, -44, 442, -116, 514, -44, -44, -116, -116, 136, -8, 64, 1, 10, -8, 1, -80, 640, 10, 100, -80, 10, -71, 19, -62, -53, -134, -44, 568, -71, 496, -62, 505, 514, 1, -8, -71, -62, -80, 10, 10, -80, 19, -53, 496, -62, 505, -134, -134, 442, 442, -116, 496, -62, -224, 28, -134, -44 },
        { 64, -512, 640, 64, 4096, -512, -8, 64, 568, 496, 640, -80, -80, -8, 496, -224, -80, 496, -512, 64, 64, -8, -8, -80, -8, 64, -80, -8, -512, 64, 1, -8, -71, -62, -80, 10, 10, 1, -62, 28, 10, -62, 64, -8, -8, 1, 1, 10, 1, -8, -71, -62, -80, 10, 10, -80, 19, -53, 496, -62, 505, -134, -134, 442, 442, -116, 496, -62, -224, 28, -134, -44, 10, 1, -62, 28, 10, -62, 100, 10, -53, -44, -62, 514, 514, -44, -44, -116, -116, 136, -62, -53, 28, -44, 442, -116, 64, -8, -8, 1, 1, 10, 640, -80, -80, 10, 10, 100, 568, -71, 496, -62, 505, 514, -71, 19, -62, -53, -134, -44 },
        { 640, 64, 64, -512, -512, 4096, -80, -8, 496, -224, -80, 496, -8, 64, 568, 496, 640, -80, 64, -512, -8, -80, 64, -8, -80, -8, -8, 64, 64, -512, 10, 1, -62, 28, 10, -62, 1, -8, -71, -62, -80, 10, -8, 64, 1, 10, -8, 1, 10, 1, -62, 28, 10, -62, 100, 10, -53, -44, -62, 514, 514, -44, -44, -116, -116, 136, -62, -53, 28, -44, 442, -116, 1, -8, -71, -62, -80, 10, 10, -80, 19, -53, 496, -62, 505, -134, -134, 442, 442, -116, 496, -62, -224, 28, -134, -44, -8, 64, 1, 10, -8, 1, -80, 640, 10, 100, -80, 10, -71, 19, -62, -53, -134, -44, 568, -71, 496, -62, 505, 514 },
        { -512, 64, 64, -8, -8, -80, 4096, -512, -512, 64, 64, 640, 640, -80, 64, -8, 496, 568, -80, 496, -8, -80, -224, 496, 64, -8, -8, 1, 1, 10, 640, -80, -80, 10, 10, 100, 568, -71, 496, -62, 505, 514, -71, 19, -62, -53, -134, -44, -512, 64, 64, -8, -8, -80, 64, -8, -8, 1, 1, 10, -8, 1, -80, 10, -71, -62, 1, 10, 10, -62, -62, 28, -80, 10, -8, 1, -62, -71, 496, -62, -224, 28, -134, -44, -80, 10, 496, -62, 19, -53, -134, 505, 442, -116, -134, 442, 10, -62, 1, 10, 28, -62, -62, -53, 28, -44, 442, -116, 10, 100, -62, 514, -53, -44, -44, 514, -116, 136, -44, -116 },
        { 64, -512, -8, -80, 64, -8, -512, 4096, 64, 640, -512, 64, -80, 496, -8, -80, -224, 496, 640, -80, 64, -8, 496, 568, -8, 64, 1, 10, -8, 1, -80, 640, 10, 100, -80, 10, -71, 19, -62, -53, -134, -44, 568, -71, 496, -62, 505, 514, 64, -512, -8, -80, 64, -8, -8, 64, 1, 10, -8, 1, 1, 10, 10, -62, -62, 28, -8, 1, -80, 10, -71, -62, 10, -62, 1, 10, 28, -62, -62, -53, 28, -44, 442, -116, 10, 100, -62, 514, -53, -44, -44, 514, -116, 136, -44, -116, -80, 10, -8, 1, -62, -71, 496, -62, -224, 28, -134, -44, -80, 10, 496, -62, 19, -53, -134, 505, 442, -116, -134, 442 },
        { 64, -8, 640, -80, 568, 496, -512, 64, 4096, -512, 640, 64, 64, -8, -512, 64, -80, -8, 496, -224, -80, -8, 496, -80, -8, 1, -80, 10, -71, -62, -80, 10, 496, -62, 19, -53, 496, -62, -224, 28, -134, -44, 505, -134, -134, 442, 442, -116, 64, -8, -512, 64, -80, -8, -8, 1, -80, 10, -71, -62, 64, -8, -8, 1, 1, 10, 10, 1, -62, 28, 10, -62, -8, 1, 64, -8, 10, 1, 568, -71, 496, -62, 505, 514, 640, -80, -80, 10, 10, 100, 19, -71, -134, -44, -62, -53, -62, 28, 10, 1, -62, 10, 514, -44, -44, -116, -116, 136, 100, 10, -53, -44, -62, 514, -53, -62, 442, -116, 28, -44 },
        { -8, -80, -80, 496, 496, -224, 64, 640, -512, 4096, 64, -512, -8, -80, 64, -512, -8, 64, 568, 496, -8, 64, -80, 640, 1, 10, 10, -62, -62, 28, 10, 100, -62, 514, -53, -44, -62, -53, 28, -44, 442, -116, 514, -44, -44, -116, -116, 136, -8, -80, 64, -512, -8, 64, 1, 10, 10, -62, -62, 28, -8, 64, 1, 10, -8, 1, 1, -8, -71, -62, -80, 10, 1, 10, -8, 64, 1, -8, -71, 19, -62, -53, -134, -44, -80, 640, 10, 100, -80, 10, -71, 568, 505, 514, 496, -62, -71, -62, 1, -8, 10, -80, 505, -134, -134, 442, 442, -116, 10, -80, 19, -53, 496, -62, -62, 496, -134, -44, -224, 28 },
        { -8, 64, 568, 496, 640, -80, 64, -512, 640, 64, 4096, -512, 496, -224, -80, -8, 496, -80, 64, -8, -512, 64, -80, -8, 1, -8, -71, -62, -80, 10, 10, -80, 19, -53, 496, -62, 505, -134, -134, 442, 442, -116, 496, -62, -224, 28, -134, -44, -8, 64, -80, -8, -512, 64, 1, -8, -71, -62, -80, 10, 10, 1, -62, 28, 10, -62, 64, -8, -8, 1, 1, 10, -62, 28, 10, 1, -62, 10, 514, -44, -44, -116, -116, 136, 100, 10, -53, -44, -62, 514, -53, -62, 442, -116, 28, -44, -8, 1, 64, -8, 10, 1, 568, -71, 496, -62, 505, 514, 640, -80, -80, 10, 10, 100, 19, -71, -134, -44, -62, -53 },
        { -80, -8, 496, -224, -80, 496, 640, 64, 64, -512, -512, 4096, 568, 496, -8, 64, -80, 640, -8, -80, 64, -512, -8, 64, 10, 1, -62, 28, 10, -62, 100, 10, -53, -44, -62, 514, 514, -44, -44, -116, -116, 136, -62, -53, 28, -44, 442, -116, -80, -8, -8, 64, 64, -512, 10, 1, -62, 28, 10, -62, 1, -8, -71, -62, -80, 10, -8, 64, 1, 10, -8, 1, -71, -62, 1, -8, 10, -80, 505, -134, -134, 442, 442, -116, 10, -80, 19, -53, 496, -62, -62, 496, -134, -44, -224, 28, 1, 10, -8, 64, 1, -8, -71, 19, -62, -53, -134, -44, -80, 640, 10, 100, -80, 10, -71, 568, 505, 514, 496, -62 },
        { 64, -8, -512, 64, -80, -8, 640, -80, 64, -8, 496, 568, 4096, -512, -512, 64, 64, 640, 496, -80, -224, 496, -8, -80, -8, 1, 64, -8, 10, 1, 568, -71, 496, -62, 505, 514, 640, -80, -80, 10, 10, 100, 19, -71, -134, -44, -62, -53, -80, 10, -8, 1, -62, -71, 496, -62, -224, 28, -134, -44, -80, 10, 496, -62, 19, -53, -134, 505, 442, -116, -134, 442, -512, 64, 64, -8, -8, -80, 64, -8, -8, 1, 1, 10, -8, 1, -80, 10, -71, -62, 1, 10, 10, -62, -62, 28, -62, 10, 28, -62, 1, 10, -53, -62, 442, -116, 28, -44, -44, 514, -116, 136, -44, -116, 10, 100, -62, 514, -53, -44 },
        { -8, -80, 64, -512, -8, 64, -80, 496, -8, -80, -224, 496, -512, 4096, 64, 640, -512, 64, -80, 640, 496, 568, 64, -8, 1, 10, -8, 64, 1, -8, -71, 19, -62, -53, -134, -44, -80, 640, 10, 100, -80, 10, -71, 568, 505, 514, 496, -62, 10, -62, 1, 10, 28, -62, -62, -53, 28, -44, 442, -116, 10, 100, -62, 514, -53, -44, -44, 514, -116, 136, -44, -116, 64, -512, -8, -80, 64, -8, -8, 64, 1, 10, -8, 1, 1, 10, 10, -62, -62, 28, -8, 1, -80, 10, -71, -62, 10, -80, -62, -71, -8, 1, -62, 496, -134, -44, -224, 28, -134, 505, 442, -116, -134, 442, -80, 10, 496, -62, 19, -53 },
        { 640, -80, 64, -8, 496, 568, 64, -8, -512, 64, -80, -8, -512, 64, 4096, -512, 640, 64, -224, 496, 496, -80, -80, -8, -80, 10, -8, 1, -62, -71, 496, -62, -224, 28, -134, -44, -80, 10, 496, -62, 19, -53, -134, 505, 442, -116, -134, 442, -8, 1, 64, -8, 10, 1, 568, -71, 496, -62, 505, 514, 640, -80, -80, 10, 10, 100, 19, -71, -134, -44, -62, -53, 64, -8, -512, 64, -80, -8, -8, 1, -80, 10, -71, -62, 64, -8, -8, 1, 1, 10, 10, 1, -62, 28, 10, -62, 28, -62, -62, 10, 10, 1, -44, 514, -116, 136, -44, -116, -53, -62, 442, -116, 28, -44, 100, 10, -53, -44, -62, 514 },
        { -80, 496, -8, -80, -224, 496, -8, -80, 64, -512, -8, 64, 64, 640, -512, 4096, 64, -512, 496, 568, -80, 640, -8, 64, 10, -62, 1, 10, 28, -62, -62, -53, 28, -44, 442, -116, 10, 100, -62, 514, -53, -44, -44, 514, -116, 136, -44, -116, 1, 10, -8, 64, 1, -8, -71, 19, -62, -53, -134, -44, -80, 640, 10, 100, -80, 10, -71, 568, 505, 514, 496, -62, -8, -80, 64, -512, -8, 64, 1, 10, 10, -62, -62, 28, -8, 64, 1, 10, -8, 1, 1, -8, -71, -62, -80, 10, -62, -71, 10, -80, 1, -8, -134, 505, 442, -116, -134, 442, -62, 496, -134, -44, -224, 28, 10, -80, 19, -53, 496, -62 },
        { 568, 496, -8, 64, -80, 640, 496, -224, -80, -8, 496, -80, 64, -512, 640, 64, 4096, -512, -8, 64, -80, -8, -512, 64, -71, -62, 1, -8, 10, -80, 505, -134, -134, 442, 442, -116, 10, -80, 19, -53, 496, -62, -62, 496, -134, -44, -224, 28, -62, 28, 10, 1, -62, 10, 514, -44, -44, -116, -116, 136, 100, 10, -53, -44, -62, 514, -53, -62, 442, -116, 28, -44, -8, 64, -80, -8, -512, 64, 1, -8, -71, -62, -80, 10, 10, 1, -62, 28, 10, -62, 64, -8, -8, 1, 1, 10, 1, -8, 10, 1, 64, -8, -71, 568, 505, 514, 496, -62, 19, -71, -134, -44, -62, -53, 640, -80, -80, 10, 10, 100 },
        { 496, -224, -80, -8, 496, -80, 568, 496, -8, 64, -80, 640, 640, 64, 64, -512, -512, 4096, -80, -8, -8, 64, 64, -512, -62, 28, 10, 1, -62, 10, 514, -44, -44, -116, -116, 136, 100, 10, -53, -44, -62, 514, -53, -62, 442, -116, 28, -44, -71, -62, 1, -8, 10, -80, 505, -134, -134, 442, 442, -116, 10, -80, 19, -53, 496, -62, -62, 496, -134, -44, -224, 28, -80, -8, -8, 64, 64, -512, 10, 1, -62, 28, 10, -62, 1, -8, -71, -62, -80, 10, -8, 64, 1, 10, -8, 1, 10, 1, 1, -8, -8, 64, 19, -71, -134, -44, -62, -53, -71, 568, 505, 514, 496, -62, -80, 640, 10, 100, -80, 10 },
        { -8, 64, -80, -8, -512, 64, -80, 640, 496, 568, 64, -8, 496, -80, -224, 496, -8, -80, 4096, -512, -512, 64, 64, 640, 1, -8, 10, 1, 64, -8, -71, 568, 505, 514, 496, -62, 19, -71, -134, -44, -62, -53, 640, -80, -80, 10, 10, 100, 10, -80, -62, -71, -8, 1, -62, 496, -134, -44, -224, 28, -134, 505, 442, -116, -134, 442, -80, 10, 496, -62, 19, -53, -62, 10, 28, -62, 1, 10, -53, -62, 442, -116, 28, -44, -44, 514, -116, 136, -44, -116, 10, 100, -62, 514, -53, -44, -512, 64, 64, -8, -8, -80, 64, -8, -8, 1, 1, 10, -8, 1, -80, 10, -71, -62, 1, 10, 10, -62, -62, 28 },
        { -80, -8, -8, 64, 64, -512, 496, -80, -224, 496, -8, -80, -80, 640, 496, 568, 64, -8, -512, 4096, 64, 640, -512, 64, 10, 1, 1, -8, -8, 64, 19, -71, -134, -44, -62, -53, -71, 568, 505, 514, 496, -62, -80, 640, 10, 100, -80, 10, -62, 10, 28, -62, 1, 10, -53, -62, 442, -116, 28, -44, -44, 514, -116, 136, -44, -116, 10, 100, -62, 514, -53, -44, 10, -80, -62, -71, -8, 1, -62, 496, -134, -44, -224, 28, -134, 505, 442, -116, -134, 442, -80, 10, 496, -62, 19, -53, 64, -512, -8, -80, 64, -8, -8, 64, 1, 10, -8, 1, 1, 10, 10, -62, -62, 28, -8, 1, -80, 10, -71, -62 },
        { -80, 640, 496, 568, 64, -8, -8, 64, -80, -8, -512, 64, -224, 496, 496, -80, -80, -8, -512, 64, 4096, -512, 640, 64, 10, -80, -62, -71, -8, 1, -62, 496, -134, -44, -224, 28, -134, 505, 442, -116, -134, 442, -80, 10, 496, -62, 19, -53, 1, -8, 10, 1, 64, -8, -71, 568, 505, 514, 496, -62, 19, -71, -134, -44, -62, -53, 640, -80, -80, 10, 10, 100, 28, -62, -62, 10, 10, 1, -44, 514, -116, 136, -44, -116, -53, -62, 442, -116, 28, -44, 100, 10, -53, -44, -62, 514, 64, -8, -512, 64, -80, -8, -8, 1, -80, 10, -71, -62, 64, -8, -8, 1, 1, 10, 10, 1, -62, 28, 10, -62 },
        { 496, -80, -224, 496, -8, -80, -80, -8, -8, 64, 64, -512, 496, 568, -80, 640, -8, 64, 64, 640, -512, 4096, 64, -512, -62, 10, 28, -62, 1, 10, -53, -62, 442, -116, 28, -44, -44, 514, -116, 136, -44, -116, 10, 100, -62, 514, -53, -44, 10, 1, 1, -8, -8, 64, 19, -71, -134, -44, -62, -53, -71, 568, 505, 514, 496, -62, -80, 640, 10, 100, -80, 10, -62, -71, 10, -80, 1, -8, -134, 505, 442, -116, -134, 442, -62, 496, -134, -44, -224, 28, 10, -80, 19, -53, 496, -62, -8, -80, 64, -512, -8, 64, 1, 10, 10, -62, -62, 28, -8, 64, 1, 10, -8, 1, 1, -8, -71, -62, -80, 10 },
        { 496, 568, -80, 640, -8, 64, -224, 496, 496, -80, -80, -8, -8, 64, -80, -8, -512, 64, 64, -512, 640, 64, 4096, -512, -62, -71, 10, -80, 1, -8, -134, 505, 442, -116, -134, 442, -62, 496, -134, -44, -224, 28, 10, -80, 19, -53, 496, -62, 28, -62, -62, 10, 10, 1, -44, 514, -116, 136, -44, -116, -53, -62, 442, -116, 28, -44, 100, 10, -53, -44, -62, 514, 1, -8, 10, 1, 64, -8, -71, 568, 505, 514, 496, -62, 19, -71, -134, -44, -62, -53, 640, -80, -80, 10, 10, 100, -8, 64, -80, -8, -512, 64, 1, -8, -71, -62, -80, 10, 10, 1, -62, 28, 10, -62, 64, -8, -8, 1, 1, 10 },
        { -224, 496, 496, -80, -80, -8, 496, 568, -80, 640, -8, 64, -80, -8, -8, 64, 64, -512, 640, 64, 64, -512, -512, 4096, 28, -62, -62, 10, 10, 1, -44, 514, -116, 136, -44, -116, -53, -62, 442, -116, 28, -44, 100, 10, -53, -44, -62, 514, -62, -71, 10, -80, 1, -8, -134, 505, 442, -116, -134, 442, -62, 496, -134, -44, -224, 28, 10, -80, 19, -53, 496, -62, 10, 1, 1, -8, -8, 64, 19, -71, -134, -44, -62, -53, -71, 568, 505, 514, 496, -62, -80, 640, 10, 100, -80, 10, -80, -8, -8, 64, 64, -512, 10, 1, -62, 28, 10, -62, 1, -8, -71, -62, -80, 10, -8, 64, 1, 10, -8, 1 },
        { -512, 64, 64, -8, -8, -80, 64, -8, -8, 1, 1, 10, -8, 1, -80, 10, -71, -62, 1, 10, 10, -62, -62, 28, 4096, -512, -512, 64, 64, 640, -512, 64, 64, -8, -8, -80, 64, -8, 640, -80, 568, 496, -8, -80, -80, 496, 496, -224, 640, -80, -80, 10, 10, 100, 64, -8, -8, 1, 1, 10, 496, -62, 568, -71, 514, 505, -62, -53, -71, 19, -44, -134, -80, 10, 496, -62, 19, -53, -8, 1, -80, 10, -71, -62, -224, 28, 496, -62, -44, -134, -134, 442, 505, -134, -116, 442, 10, 100, -62, 514, -53, -44, 1, 10, 10, -62, -62, 28, 28, -44, -62, -53, -116, 442, -44, -116, 514, -44, 136, -116 },
        { 64, -512, -8, -80, 64, -8, -8, 64, 1, 10, -8, 1, 1, 10, 10, -62, -62, 28, -8, 1, -80, 10, -71, -62, -512, 4096, 64, 640, -512, 64, 64, -512, -8, -80, 64, -8, -8, -80, -80, 496, 496, -224, 64, -8, 640, -80, 568, 496, -80, 640, 10, 100, -80, 10, -8, 64, 1, 10, -8, 1, -62, -53, -71, 19, -44, -134, 496, -62, 568, -71, 514, 505, 10, 100, -62, 514, -53, -44, 1, 10, 10, -62, -62, 28, 28, -44, -62, -53, -116, 442, -44, -116, 514, -44, 136, -116, -80, 10, 496, -62, 19, -53, -8, 1, -80, 10, -71, -62, -224, 28, 496, -62, -44, -134, -134, 442, 505, -134, -116, 442 },
        { 64, -8, -512, 64, -80, -8, -8, 1, -80, 10, -71, -62, 64, -8, -8, 1, 1, 10, 10, 1, -62, 28, 10, -62, -512, 64, 4096, -512, 640, 64, 64, -8, 640, -80, 568, 496, -512, 64, 64, -8, -8, -80, -80, -8, 496, -224, -80, 496, -80, 10, 496, -62, 19, -53, -8, 1, -80, 10, -71, -62, -224, 28, 496, -62, -44, -134, -134, 442, 505, -134, -116, 442, 640, -80, -80, 10, 10, 100, 64, -8, -8, 1, 1, 10, 496, -62, 568, -71, 514, 505, -62, -53, -71, 19, -44, -134, 100, 10, -53, -44, -62, 514, 10, 1, -62, 28, 10, -62, -44, -116, 514, -44, 136, -116, 28, -44, -62, -53, -116, 442 },
        { -8, -80, 64, -512, -8, 64, 1, 10, 10, -62, -62, 28, -8, 64, 1, 10, -8, 1, 1, -8, -71, -62, -80, 10, 64, 640, -512, 4096, 64, -512, -8, -80, -80, 496, 496, -224, 64, -512, -8, -80, 64, -8, -8, 64, 568, 496, 640, -80, 10, 100, -62, 514, -53, -44, 1, 10, 10, -62, -62, 28, 28, -44, -62, -53, -116, 442, -44, -116, 514, -44, 136, -116, -80, 640, 10, 100, -80, 10, -8, 64, 1, 10, -8, 1, -62, -53, -71, 19, -44, -134, 496, -62, 568, -71, 514, 505, 10, -80, 19, -53, 496, -62, 1, -8, -71, -62, -80, 10, -134, 442, 505, -134, -116, 442, -224, 28, 496, -62, -44, -134 },
        { -8, 64, -80, -8, -512, 64, 1, -8, -71, -62, -80, 10, 10, 1, -62, 28, 10, -62, 64, -8, -8, 1, 1, 10, 64, -512, 640, 64, 4096, -512, -8, 64, 568, 496, 640, -80, -80, -8, 496, -224, -80, 496, -512, 64, 64, -8, -8, -80, 10, -80, 19, -53, 496, -62, 1, -8, -71, -62, -80, 10, -134, 442, 505, -134, -116, 442, -224, 28, 496, -62, -44, -134, 100, 10, -53, -44, -62, 514, 10, 1, -62, 28, 10, -62, -44, -116, 514, -44, 136, -116, 28, -44, -62, -53, -116, 442, 640, -80, -80, 10, 10, 100, 64, -8, -8, 1, 1, 10, 496, -62, 568, -71, 514, 505, -62, -53, -71, 19, -44, -134 },
        { -80, -8, -8, 64, 64, -512, 10, 1, -62, 28, 10, -62, 1, -8, -71, -62, -80, 10, -8, 64, 1, 10, -8, 1, 640, 64, 64, -512, -512, 4096, -80, -8, 496, -224, -80, 496, -8, 64, 568, 496, 640, -80, 64, -512, -8, -80, 64, -8, 100, 10, -53, -44, -62, 514, 10, 1, -62, 28, 10, -62, -44, -116, 514, -44, 136, -116, 28, -44, -62, -53, -116, 442, 10, -80, 19, -53, 496, -62, 1, -8, -71, -62, -80, 10, -134, 442, 505, -134, -116, 442, -224, 28, 496, -62, -44, -134, -80, 640, 10, 100, -80, 10, -8, 64, 1, 10, -8, 1, -62, -53, -71, 19, -44, -134, 496, -62, 568, -71, 514, 505 },
        { 64, -8, -8, 1, 1, 10, 640, -80, -80, 10, 10, 100, 568, -71, 496, -62, 505, 514, -71, 19, -62, -53, -134, -44, -512, 64, 64, -8, -8, -80, 4096, -512, -512, 64, 64, 640, 640, -80, 64, -8, 496, 568, -80, 496, -8, -80, -224, 496, 64, -8, -8, 1, 1, 10, -512, 64, 64, -8, -8, -80, -80, 10, -8, 1, -62, -71, 10, -62, 1, 10, 28, -62, 496, -62, -224, 28, -134, -44, -80, 10, -8, 1, -62, -71, 496, -62, -80, 10, -53, 19, 442, -116, -134, 505, 442, -134, -62, -53, 28, -44, 442, -116, 10, -62, 1, 10, 28, -62, -62, 514, 10, 100, -44, -53, -116, 136, -44, 514, -116, -44 },
        { -8, 64, 1, 10, -8, 1, -80, 640, 10, 100, -80, 10, -71, 19, -62, -53, -134, -44, 568, -71, 496, -62, 505, 514, 64, -512, -8, -80, 64, -8, -512, 4096, 64, 640, -512, 64, -80, 496, -8, -80, -224, 496, 640, -80, 64, -8, 496, 568, -8, 64, 1, 10, -8, 1, 64, -512, -8, -80, 64, -8, 10, -62, 1, 10, 28, -62, -80, 10, -8, 1, -62, -71, -62, -53, 28, -44, 442, -116, 10, -62, 1, 10, 28, -62, -62, 514, 10, 100, -44, -53, -116, 136, -44, 514, -116, -44, 496, -62, -224, 28, -134, -44, -80, 10, -8, 1, -62, -71, 496, -62, -80, 10, -53, 19, 442, -116, -134, 505, 442, -134 },
        { -8, 1, -80, 10, -71, -62, -80, 10, 496, -62, 19, -53, 496, -62, -224, 28, -134, -44, 505, -134, -134, 442, 442, -116, 64, -8, 640, -80, 568, 496, -512, 64, 4096, -512, 640, 64, 64, -8, -512, 64, -80, -8, 496, -224, -80, -8, 496, -80, -8, 1, -80, 10, -71, -62, 64, -8, -512, 64, -80, -8, -8, 1, 64, -8, 10, 1, -62, 28, 10, 1, -62, 10, 568, -71, 496, -62, 505, 514, -8, 1, 64, -8, 10, 1, -80, 10, 640, -80, 100, 10, -134, -44, 19, -71, -53, -62, 514, -44, -44, -116, -116, 136, -62, 28, 10, 1, -62, 10, -53, -44, 100, 10, 514, -62, 442, -116, -53, -62, -44, 28 },
        { 1, 10, 10, -62, -62, 28, 10, 100, -62, 514, -53, -44, -62, -53, 28, -44, 442, -116, 514, -44, -44, -116, -116, 136, -8, -80, -80, 496, 496, -224, 64, 640, -512, 4096, 64, -512, -8, -80, 64, -512, -8, 64, 568, 496, -8, 64, -80, 640, 1, 10, 10, -62, -62, 28, -8, -80, 64, -512, -8, 64, 1, 10, -8, 64, 1, -8, -71, -62, 1, -8, 10, -80, -71, 19, -62, -53, -134, -44, 1, 10, -8, 64, 1, -8, 10, 100, -80, 640, 10, -80, 505, 514, -71, 568, -62, 496, 505, -134, -134, 442, 442, -116, -71, -62, 1, -8, 10, -80, 19, -53, 10, -80, -62, 496, -134, -44, -62, 496, 28, -224 },
        { 1, -8, -71, -62, -80, 10, 10, -80, 19, -53, 496, -62, 505, -134, -134, 442, 442, -116, 496, -62, -224, 28, -134, -44, -8, 64, 568, 496, 640, -80, 64, -512, 640, 64, 4096, -512, 496, -224, -80, -8, 496, -80, 64, -8, -512, 64, -80, -8, 1, -8, -71, -62, -80, 10, -8, 64, -80, -8, -512, 64, -62, 28, 10, 1, -62, 10, -8, 1, 64, -8, 10, 1, 514, -44, -44, -116, -116, 136, -62, 28, 10, 1, -62, 10, -53, -44, 100, 10, 514, -62, 442, -116, -53, -62, -44, 28, 568, -71, 496, -62, 505, 514, -8, 1, 64, -8, 10, 1, -80, 10, 640, -80, 100, 10, -134, -44, 19, -71, -53, -62 },
        { 10, 1, -62, 28, 10, -62, 100, 10, -53, -44, -62, 514, 514, -44, -44, -116, -116, 136, -62, -53, 28, -44, 442, -116, -80, -8, 496, -224, -80, 496, 640, 64, 64, -512, -512, 4096, 568, 496, -8, 64, -80, 640, -8, -80, 64, -512, -8, 64, 10, 1, -62, 28, 10, -62, -80, -8, -8, 64, 64, -512, -71, -62, 1, -8, 10, -80, 1, 10, -8, 64, 1, -8, 505, -134, -134, 442, 442, -116, -71, -62, 1, -8, 10, -80, 19, -53, 10, -80, -62, 496, -134, -44, -62, 496, 28, -224, -71, 19, -62, -53, -134, -44, 1, 10, -8, 64, 1, -8, 10, 100, -80, 640, 10, -80, 505, 514, -71, 568, -62, 496 },
        { -8, 1, 64, -8, 10, 1, 568, -71, 496, -62, 505, 514, 640, -80, -80, 10, 10, 100, 19, -71, -134, -44, -62, -53, 64, -8, -512, 64, -80, -8, 640, -80, 64, -8, 496, 568, 4096, -512, -512, 64, 64, 640, 496, -80, -224, 496, -8, -80, 496, -62, -224, 28, -134, -44, -80, 10, -8, 1, -62, -71, 496, -62, -80, 10, -53, 19, 442, -116, -134, 505, 442, -134, 64, -8, -8, 1, 1, 10, -512, 64, 64, -8, -8, -80, -80, 10, -8, 1, -62, -71, 10, -62, 1, 10, 28, -62, -53, -62, 442, -116, 28, -44, -62, 10, 28, -62, 1, 10, -116, 136, -44, 514, -116, -44, -62, 514, 10, 100, -44, -53 },
        { 1, 10, -8, 64, 1, -8, -71, 19, -62, -53, -134, -44, -80, 640, 10, 100, -80, 10, -71, 568, 505, 514, 496, -62, -8, -80, 64, -512, -8, 64, -80, 496, -8, -80, -224, 496, -512, 4096, 64, 640, -512, 64, -80, 640, 496, 568, 64, -8, -62, -53, 28, -44, 442, -116, 10, -62, 1, 10, 28, -62, -62, 514, 10, 100, -44, -53, -116, 136, -44, 514, -116, -44, -8, 64, 1, 10, -8, 1, 64, -512, -8, -80, 64, -8, 10, -62, 1, 10, 28, -62, -80, 10, -8, 1, -62, -71, -62, 496, -134, -44, -224, 28, 10, -80, -62, -71, -8, 1, 442, -116, -134, 505, 442, -134, 496, -62, -80, 10, -53, 19 },
        { -80, 10, -8, 1, -62, -71, 496, -62, -224, 28, -134, -44, -80, 10, 496, -62, 19, -53, -134, 505, 442, -116, -134, 442, 640, -80, 64, -8, 496, 568, 64, -8, -512, 64, -80, -8, -512, 64, 4096, -512, 640, 64, -224, 496, 496, -80, -80, -8, 568, -71, 496, -62, 505, 514, -8, 1, 64, -8, 10, 1, -80, 10, 640, -80, 100, 10, -134, -44, 19, -71, -53, -62, -8, 1, -80, 10, -71, -62, 64, -8, -512, 64, -80, -8, -8, 1, 64, -8, 10, 1, -62, 28, 10, 1, -62, 10, -44, 514, -116, 136, -44, -116, 28, -62, -62, 10, 10, 1, 442, -116, -53, -62, -44, 28, -53, -44, 100, 10, 514, -62 },
        { 10, -62, 1, 10, 28, -62, -62, -53, 28, -44, 442, -116, 10, 100, -62, 514, -53, -44, -44, 514, -116, 136, -44, -116, -80, 496, -8, -80, -224, 496, -8, -80, 64, -512, -8, 64, 64, 640, -512, 4096, 64, -512, 496, 568, -80, 640, -8, 64, -71, 19, -62, -53, -134, -44, 1, 10, -8, 64, 1, -8, 10, 100, -80, 640, 10, -80, 505, 514, -71, 568, -62, 496, 1, 10, 10, -62, -62, 28, -8, -80, 64, -512, -8, 64, 1, 10, -8, 64, 1, -8, -71, -62, 1, -8, 10, -80, -134, 505, 442, -116, -134, 442, -62, -71, 10, -80, 1, -8, -134, -44, -62, 496, 28, -224, 19, -53, 10, -80, -62, 496 },
        { -71, -62, 1, -8, 10, -80, 505, -134, -134, 442, 442, -116, 10, -80, 19, -53, 496, -62, -62, 496, -134, -44, -224, 28, 568, 496, -8, 64, -80, 640, 496, -224, -80, -8, 496, -80, 64, -512, 640, 64, 4096, -512, -8, 64, -80, -8, -512, 64, 514, -44, -44, -116, -116, 136, -62, 28, 10, 1, -62, 10, -53, -44, 100, 10, 514, -62, 442, -116, -53, -62, -44, 28, 1, -8, -71, -62, -80, 10, -8, 64, -80, -8, -512, 64, -62, 28, 10, 1, -62, 10, -8, 1, 64, -8, 10, 1, -71, 568, 505, 514, 496, -62, 1, -8, 10, 1, 64, -8, -134, -44, 19, -71, -53, -62, -80, 10, 640, -80, 100, 10 },
        { -62, 28, 10, 1, -62, 10, 514, -44, -44, -116, -116, 136, 100, 10, -53, -44, -62, 514, -53, -62, 442, -116, 28, -44, 496, -224, -80, -8, 496, -80, 568, 496, -8, 64, -80, 640, 640, 64, 64, -512, -512, 4096, -80, -8, -8, 64, 64, -512, 505, -134, -134, 442, 442, -116, -71, -62, 1, -8, 10, -80, 19, -53, 10, -80, -62, 496, -134, -44, -62, 496, 28, -224, 10, 1, -62, 28, 10, -62, -80, -8, -8, 64, 64, -512, -71, -62, 1, -8, 10, -80, 1, 10, -8, 64, 1, -8, 19, -71, -134, -44, -62, -53, 10, 1, 1, -8, -8, 64, 505, 514, -71, 568, -62, 496, 10, 100, -80, 640, 10, -80 },
        { 1, -8, 10, 1, 64, -8, -71, 568, 505, 514, 496, -62, 19, -71, -134, -44, -62, -53, 640, -80, -80, 10, 10, 100, -8, 64, -80, -8, -512, 64, -80, 640, 496, 568, 64, -8, 496, -80, -224, 496, -8, -80, 4096, -512, -512, 64, 64, 640, -62, 496, -134, -44, -224, 28, 10, -80, -62, -71, -8, 1, 442, -116, -134, 505, 442, -134, 496, -62, -80, 10, -53, 19, -53, -62, 442, -116, 28, -44, -62, 10, 28, -62, 1, 10, -116, 136, -44, 514, -116, -44, -62, 514, 10, 100, -44, -53, 64, -8, -8, 1, 1, 10, -512, 64, 64, -8, -8, -80, -80, 10, -8, 1, -62, -71, 10, -62, 1, 10, 28, -62 },
        { 10, 1, 1, -8, -8, 64, 19, -71, -134, -44, -62, -53, -71, 568, 505, 514, 496, -62, -80, 640, 10, 100, -80, 10, -80, -8, -8, 64, 64, -512, 496, -80, -224, 496, -8, -80, -80, 640, 496, 568, 64, -8, -512, 4096, 64, 640, -512, 64, -53, -62, 442, -116, 28, -44, -62, 10, 28, -62, 1, 10, -116, 136, -44, 514, -116, -44, -62, 514, 10, 100, -44, -53, -62, 496, -134, -44, -224, 28, 10, -80, -62, -71, -8, 1, 442, -116, -134, 505, 442, -134, 496, -62, -80, 10, -53, 19, -8, 64, 1, 10, -8, 1, 64, -512, -8, -80, 64, -8, 10, -62, 1, 10, 28, -62, -80, 10, -8, 1, -62, -71 },
        { 10, -80, -62, -71, -8, 1, -62, 496, -134, -44, -224, 28, -134, 505, 442, -116, -134, 442, -80, 10, 496, -62, 19, -53, -80, 640, 496, 568, 64, -8, -8, 64, -80, -8, -512, 64, -224, 496, 496, -80, -80, -8, -512, 64, 4096, -512, 640, 64, -71, 568, 505, 514, 496, -62, 1, -8, 10, 1, 64, -8, -134, -44, 19, -71, -53, -62, -80, 10, 640, -80, 100, 10, -44, 514, -116, 136, -44, -116, 28, -62, -62, 10, 10, 1, 442, -116, -53, -62, -44, 28, -53, -44, 100, 10, 514, -62, -8, 1, -80, 10, -71, -62, 64, -8, -512, 64, -80, -8, -8, 1, 64, -8, 10, 1, -62, 28, 10, 1, -62, 10 },
        { -62, 10, 28, -62, 1, 10, -53, -62, 442, -116, 28, -44, -44, 514, -116, 136, -44, -116, 10, 100, -62, 514, -53, -44, 496, -80, -224, 496, -8, -80, -80, -8, -8, 64, 64, -512, 496, 568, -80, 640, -8, 64, 64, 640, -512, 4096, 64, -512, 19, -71, -134, -44, -62, -53, 10, 1, 1, -8, -8, 64, 505, 514, -71, 568, -62, 496, 10, 100, -80, 640, 10, -80, -134, 505, 442, -116, -134, 442, -62, -71, 10, -80, 1, -8, -134, -44, -62, 496, 28, -224, 19, -53, 10, -80, -62, 496, 1, 10, 10, -62, -62, 28, -8, -80, 64, -512, -8, 64, 1, 10, -8, 64, 1, -8, -71, -62, 1, -8, 10, -80 },
        { -62, -71, 10, -80, 1, -8, -134, 505, 442, -116, -134, 442, -62, 496, -134, -44, -224, 28, 10, -80, 19, -53, 496, -62, 496, 568, -80, 640, -8, 64, -224, 496, 496, -80, -80, -8, -8, 64, -80, -8, -512, 64, 64, -512, 640, 64, 4096, -512, -44, 514, -116, 136, -44, -116, 28, -62, -62, 10, 10, 1, 442, -116, -53, -62, -44, 28, -53, -44, 100, 10, 514, -62, -71, 568, 505, 514, 496, -62, 1, -8, 10, 1, 64, -8, -134, -44, 19, -71, -53, -62, -80, 10, 640, -80, 100, 10, 1, -8, -71, -62, -80, 10, -8, 64, -80, -8, -512, 64, -62, 28, 10, 1, -62, 10, -8, 1, 64, -8, 10, 1 },
        { 28, -62, -62, 10, 10, 1, -44, 514, -116, 136, -44, -116, -53, -62, 442, -116, 28, -44, 100, 10, -53, -44, -62, 514, -224, 496, 496, -80, -80, -8, 496, 568, -80, 640, -8, 64, -80, -8, -8, 64, 64, -512, 640, 64, 64, -512, -512, 4096, -134, 505, 442, -116, -134, 442, -62, -71, 10, -80, 1, -8, -134, -44, -62, 496, 28, -224, 19, -53, 10, -80, -62, 496, 19, -71, -134, -44, -62, -53, 10, 1, 1, -8, -8, 64, 505, 514, -71, 568, -62, 496, 10, 100, -80, 640, 10, -80, 10, 1, -62, 28, 10, -62, -80, -8, -8, 64, 64, -512, -71, -62, 1, -8, 10, -80, 1, 10, -8, 64, 1, -8 },
        { 64, -8, -8, 1, 1, 10, -512, 64, 64, -8, -8, -80, -80, 10, -8, 1, -62, -71, 10, -62, 1, 10, 28, -62, 640, -80, -80, 10, 10, 100, 64, -8, -8, 1, 1, 10, 496, -62, 568, -71, 514, 505, -62, -53, -71, 19, -44, -134, 4096, -512, -512, 64, 64, 640, -512, 64, 64, -8, -8, -80, 64, -8, 640, -80, 568, 496, -8, -80, -80, 496, 496, -224, 496, -62, -80, 10, -53, 19, -224, 28, 496, -62, -44, -134, -8, 1, -80, 10, -71, -62, 442, -134, -116, 442, 505, -134, -62, 514, 10, 100, -44, -53, 28, -44, -62, -53, -116, 442, 1, 10, 10, -62, -62, 28, -116, -44, 136, -116, 514, -44 },
        { -8, 64, 1, 10, -8, 1, 64, -512, -8, -80, 64, -8, 10, -62, 1, 10, 28, -62, -80, 10, -8, 1, -62, -71, -80, 640, 10, 100, -80, 10, -8, 64, 1, 10, -8, 1, -62, -53, -71, 19, -44, -134, 496, -62, 568, -71, 514, 505, -512, 4096, 64, 640, -512, 64, 64, -512, -8, -80, 64, -8, -8, -80, -80, 496, 496, -224, 64, -8, 640, -80, 568, 496, -62, 514, 10, 100, -44, -53, 28, -44, -62, -53, -116, 442, 1, 10, 10, -62, -62, 28, -116, -44, 136, -116, 514, -44, 496, -62, -80, 10, -53, 19, -224, 28, 496, -62, -44, -134, -8, 1, -80, 10, -71, -62, 442, -134, -116, 442, 505, -134 },
        { -8, 1, -80, 10, -71, -62, 64, -8, -512, 64, -80, -8, -8, 1, 64, -8, 10, 1, -62, 28, 10, 1, -62, 10, -80, 10, 496, -62, 19, -53, -8, 1, -80, 10, -71, -62, -224, 28, 496, -62, -44, -134, -134, 442, 505, -134, -116, 442, -512, 64, 4096, -512, 640, 64, 64, -8, 640, -80, 568, 496, -512, 64, 64, -8, -8, -80, -80, -8, 496, -224, -80, 496, -80, 10, 640, -80, 100, 10, 496, -62, 568, -71, 514, 505, 64, -8, -8, 1, 1, 10, -53, -62, -44, -134, -71, 19, -53, -44, 100, 10, 514, -62, -44, -116, 514, -44, 136, -116, 10, 1, -62, 28, 10, -62, -44, 28, -116, 442, -62, -53 },
        { 1, 10, 10, -62, -62, 28, -8, -80, 64, -512, -8, 64, 1, 10, -8, 64, 1, -8, -71, -62, 1, -8, 10, -80, 10, 100, -62, 514, -53, -44, 1, 10, 10, -62, -62, 28, 28, -44, -62, -53, -116, 442, -44, -116, 514, -44, 136, -116, 64, 640, -512, 4096, 64, -512, -8, -80, -80, 496, 496, -224, 64, -512, -8, -80, 64, -8, -8, 64, 568, 496, 640, -80, 10, 100, -80, 640, 10, -80, -62, -53, -71, 19, -44, -134, -8, 64, 1, 10, -8, 1, -62, 496, 514, 505, 568, -71, 19, -53, 10, -80, -62, 496, -134, 442, 505, -134, -116, 442, 1, -8, -71, -62, -80, 10, 28, -224, -44, -134, 496, -62 },
        { 1, -8, -71, -62, -80, 10, -8, 64, -80, -8, -512, 64, -62, 28, 10, 1, -62, 10, -8, 1, 64, -8, 10, 1, 10, -80, 19, -53, 496, -62, 1, -8, -71, -62, -80, 10, -134, 442, 505, -134, -116, 442, -224, 28, 496, -62, -44, -134, 64, -512, 640, 64, 4096, -512, -8, 64, 568, 496, 640, -80, -80, -8, 496, -224, -80, 496, -512, 64, 64, -8, -8, -80, -53, -44, 100, 10, 514, -62, -44, -116, 514, -44, 136, -116, 10, 1, -62, 28, 10, -62, -44, 28, -116, 442, -62, -53, -80, 10, 640, -80, 100, 10, 496, -62, 568, -71, 514, 505, 64, -8, -8, 1, 1, 10, -53, -62, -44, -134, -71, 19 },
        { 10, 1, -62, 28, 10, -62, -80, -8, -8, 64, 64, -512, -71, -62, 1, -8, 10, -80, 1, 10, -8, 64, 1, -8, 100, 10, -53, -44, -62, 514, 10, 1, -62, 28, 10, -62, -44, -116, 514, -44, 136, -116, 28, -44, -62, -53, -116, 442, 640, 64, 64, -512, -512, 4096, -80, -8, 496, -224, -80, 496, -8, 64, 568, 496, 640, -80, 64, -512, -8, -80, 64, -8, 19, -53, 10, -80, -62, 496, -134, 442, 505, -134, -116, 442, 1, -8, -71, -62, -80, 10, 28, -224, -44, -134, 496, -62, 10, 100, -80, 640, 10, -80, -62, -53, -71, 19, -44, -134, -8, 64, 1, 10, -8, 1, -62, 496, 514, 505, 568, -71 },
        { 640, -80, -80, 10, 10, 100, 64, -8, -8, 1, 1, 10, 496, -62, 568, -71, 514, 505, -62, -53, -71, 19, -44, -134, 64, -8, -8, 1, 1, 10, -512, 64, 64, -8, -8, -80, -80, 10, -8, 1, -62, -71, 10, -62, 1, 10, 28, -62, -512, 64, 64, -8, -8, -80, 4096, -512, -512, 64, 64, 640, 640, -80, 64, -8, 496, 568, -80, 496, -8, -80, -224, 496, -224, 28, 496, -62, -44, -134, 496, -62, -80, 10, -53, 19, -80, 10, -8, 1, -62, -71, -116, 442, 442, -134, -134, 505, 28, -44, -62, -53, -116, 442, -62, 514, 10, 100, -44, -53, 10, -62, 1, 10, 28, -62, 136, -116, -116, -44, -44, 514 },
        { -80, 640, 10, 100, -80, 10, -8, 64, 1, 10, -8, 1, -62, -53, -71, 19, -44, -134, 496, -62, 568, -71, 514, 505, -8, 64, 1, 10, -8, 1, 64, -512, -8, -80, 64, -8, 10, -62, 1, 10, 28, -62, -80, 10, -8, 1, -62, -71, 64, -512, -8, -80, 64, -8, -512, 4096, 64, 640, -512, 64, -80, 496, -8, -80, -224, 496, 640, -80, 64, -8, 496, 568, 28, -44, -62, -53, -116, 442, -62, 514, 10, 100, -44, -53, 10, -62, 1, 10, 28, -62, 136, -116, -116, -44, -44, 514, -224, 28, 496, -62, -44, -134, 496, -62, -80, 10, -53, 19, -80, 10, -8, 1, -62, -71, -116, 442, 442, -134, -134, 505 },
        { -80, 10, 496, -62, 19, -53, -8, 1, -80, 10, -71, -62, -224, 28, 496, -62, -44, -134, -134, 442, 505, -134, -116, 442, -8, 1, -80, 10, -71, -62, 64, -8, -512, 64, -80, -8, -8, 1, 64, -8, 10, 1, -62, 28, 10, 1, -62, 10, 64, -8, 640, -80, 568, 496, -512, 64, 4096, -512, 640, 64, 64, -8, -512, 64, -80, -8, 496, -224, -80, -8, 496, -80, 496, -62, 568, -71, 514, 505, -80, 10, 640, -80, 100, 10, -8, 1, 64, -8, 10, 1, -44, -134, -53, -62, 19, -71, -44, -116, 514, -44, 136, -116, -53, -44, 100, 10, 514, -62, -62, 28, 10, 1, -62, 10, -116, 442, -44, 28, -53, -62 },
        { 10, 100, -62, 514, -53, -44, 1, 10, 10, -62, -62, 28, 28, -44, -62, -53, -116, 442, -44, -116, 514, -44, 136, -116, 1, 10, 10, -62, -62, 28, -8, -80, 64, -512, -8, 64, 1, 10, -8, 64, 1, -8, -71, -62, 1, -8, 10, -80, -8, -80, -80, 496, 496, -224, 64, 640, -512, 4096, 64, -512, -8, -80, 64, -512, -8, 64, 568, 496, -8, 64, -80, 640, -62, -53, -71, 19, -44, -134, 10, 100, -80, 640, 10, -80, 1, 10, -8, 64, 1, -8, 514, 505, -62, 496, -71, 568, -134, 442, 505, -134, -116, 442, 19, -53, 10, -80, -62, 496, -71, -62, 1, -8, 10, -80, -44, -134, 28, -224, -62, 496 },
        { 10, -80, 19, -53, 496, -62, 1, -8, -71, -62, -80, 10, -134, 442, 505, -134, -116, 442, -224, 28, 496, -62, -44, -134, 1, -8, -71, -62, -80, 10, -8, 64, -80, -8, -512, 64, -62, 28, 10, 1, -62, 10, -8, 1, 64, -8, 10, 1, -8, 64, 568, 496, 640, -80, 64, -512, 640, 64, 4096, -512, 496, -224, -80, -8, 496, -80, 64, -8, -512, 64, -80, -8, -44, -116, 514, -44, 136, -116, -53, -44, 100, 10, 514, -62, -62, 28, 10, 1, -62, 10, -116, 442, -44, 28, -53, -62, 496, -62, 568, -71, 514, 505, -80, 10, 640, -80, 100, 10, -8, 1, 64, -8, 10, 1, -44, -134, -53, -62, 19, -71 },
        { 100, 10, -53, -44, -62, 514, 10, 1, -62, 28, 10, -62, -44, -116, 514, -44, 136, -116, 28, -44, -62, -53, -116, 442, 10, 1, -62, 28, 10, -62, -80, -8, -8, 64, 64, -512, -71, -62, 1, -8, 10, -80, 1, 10, -8, 64, 1, -8, -80, -8, 496, -224, -80, 496, 640, 64, 64, -512, -512, 4096, 568, 496, -8, 64, -80, 640, -8, -80, 64, -512, -8, 64, -134, 442, 505, -134, -116, 442, 19, -53, 10, -80, -62, 496, -71, -62, 1, -8, 10, -80, -44, -134, 28, -224, -62, 496, -62, -53, -71, 19, -44, -134, 10, 100, -80, 640, 10, -80, 1, 10, -8, 64, 1, -8, 514, 505, -62, 496, -71, 568 },
        { 568, -71, 496, -62, 505, 514, -8, 1, 64, -8, 10, 1, -80, 10, 640, -80, 100, 10, -134, -44, 19, -71, -53, -62, 496, -62, -224, 28, -134, -44, -80, 10, -8, 1, -62, -71, 496, -62, -80, 10, -53, 19, 442, -116, -134, 505, 442, -134, 64, -8, -512, 64, -80, -8, 640, -80, 64, -8, 496, 568, 4096, -512, -512, 64, 64, 640, 496, -80, -224, 496, -8, -80, -8, 1, 64, -8, 10, 1, -80, 10, -8, 1, -62, -71, -512, 64, 64, -8, -8, -80, -62, 10, 28, -62, 1, 10, 442, -116, -53, -62, -44, 28, -116, 136, -44, 514, -116, -44, -62, 10, 28, -62, 1, 10, 514, -62, -44, -53, 10, 100 },
        { -71, 19, -62, -53, -134, -44, 1, 10, -8, 64, 1, -8, 10, 100, -80, 640, 10, -80, 505, 514, -71, 568, -62, 496, -62, -53, 28, -44, 442, -116, 10, -62, 1, 10, 28, -62, -62, 514, 10, 100, -44, -53, -116, 136, -44, 514, -116, -44, -8, -80, 64, -512, -8, 64, -80, 496, -8, -80, -224, 496, -512, 4096, 64, 640, -512, 64, -80, 640, 496, 568, 64, -8, 1, 10, -8, 64, 1, -8, 10, -62, 1, 10, 28, -62, 64, -512, -8, -80, 64, -8, 10, -80, -62, -71, -8, 1, -134, -44, -62, 496, 28, -224, 442, -116, -134, 505, 442, -134, 10, -80, -62, -71, -8, 1, -62, 496, -53, 19, -80, 10 },
        { 496, -62, -224, 28, -134, -44, -80, 10, -8, 1, -62, -71, 496, -62, -80, 10, -53, 19, 442, -116, -134, 505, 442, -134, 568, -71, 496, -62, 505, 514, -8, 1, 64, -8, 10, 1, -80, 10, 640, -80, 100, 10, -134, -44, 19, -71, -53, -62, 640, -80, 64, -8, 496, 568, 64, -8, -512, 64, -80, -8, -512, 64, 4096, -512, 640, 64, -224, 496, 496, -80, -80, -8, -80, 10, -8, 1, -62, -71, -8, 1, 64, -8, 10, 1, 64, -8, -512, 64, -80, -8, 28, -62, -62, 10, 10, 1, -116, 136, -44, 514, -116, -44, 442, -116, -53, -62, -44, 28, 28, -62, -62, 10, 10, 1, -44, -53, 514, -62, 100, 10 },
        { -62, -53, 28, -44, 442, -116, 10, -62, 1, 10, 28, -62, -62, 514, 10, 100, -44, -53, -116, 136, -44, 514, -116, -44, -71, 19, -62, -53, -134, -44, 1, 10, -8, 64, 1, -8, 10, 100, -80, 640, 10, -80, 505, 514, -71, 568, -62, 496, -80, 496, -8, -80, -224, 496, -8, -80, 64, -512, -8, 64, 64, 640, -512, 4096, 64, -512, 496, 568, -80, 640, -8, 64, 10, -62, 1, 10, 28, -62, 1, 10, -8, 64, 1, -8, -8, -80, 64, -512, -8, 64, -62, -71, 10, -80, 1, -8, 442, -116, -134, 505, 442, -134, -134, -44, -62, 496, 28, -224, -62, -71, 10, -80, 1, -8, -53, 19, -62, 496, 10, -80 },
        { 505, -134, -134, 442, 442, -116, -71, -62, 1, -8, 10, -80, 19, -53, 10, -80, -62, 496, -134, -44, -62, 496, 28, -224, 514, -44, -44, -116, -116, 136, -62, 28, 10, 1, -62, 10, -53, -44, 100, 10, 514, -62, 442, -116, -53, -62, -44, 28, 568, 496, -8, 64, -80, 640, 496, -224, -80, -8, 496, -80, 64, -512, 640, 64, 4096, -512, -8, 64, -80, -8, -512, 64, -71, -62, 1, -8, 10, -80, -62, 28, 10, 1, -62, 10, -8, 64, -80, -8, -512, 64, 1, -8, 10, 1, 64, -8, 505, 514, -71, 568, -62, 496, -134, -44, 19, -71, -53, -62, 1, -8, 10, 1, 64, -8, 10, -80, 100, 10, 640, -80 },
        { 514, -44, -44, -116, -116, 136, -62, 28, 10, 1, -62, 10, -53, -44, 100, 10, 514, -62, 442, -116, -53, -62, -44, 28, 505, -134, -134, 442, 442, -116, -71, -62, 1, -8, 10, -80, 19, -53, 10, -80, -62, 496, -134, -44, -62, 496, 28, -224, 496, -224, -80, -8, 496, -80, 568, 496, -8, 64, -80, 640, 640, 64, 64, -512, -512, 4096, -80, -8, -8, 64, 64, -512, -62, 28, 10, 1, -62, 10, -71, -62, 1, -8, 10, -80, -80, -8, -8, 64, 64, -512, 10, 1, 1, -8, -8, 64, -134, -44, 19, -71, -53, -62, 505, 514, -71, 568, -62, 496, 10, 1, 1, -8, -8, 64, 100, 10, 10, -80, -80, 640 },
        { -71, 568, 505, 514, 496, -62, 1, -8, 10, 1, 64, -8, -134, -44, 19, -71, -53, -62, -80, 10, 640, -80, 100, 10, -62, 496, -134, -44, -224, 28, 10, -80, -62, -71, -8, 1, 442, -116, -134, 505, 442, -134, 496, -62, -80, 10, -53, 19, -8, 64, -80, -8, -512, 64, -80, 640, 496, 568, 64, -8, 496, -80, -224, 496, -8, -80, 4096, -512, -512, 64, 64, 640, 442, -116, -53, -62, -44, 28, -116, 136, -44, 514, -116, -44, -62, 10, 28, -62, 1, 10, 514, -62, -44, -53, 10, 100, -8, 1, 64, -8, 10, 1, -80, 10, -8, 1, -62, -71, -512, 64, 64, -8, -8, -80, -62, 10, 28, -62, 1, 10 },
        { 19, -71, -134, -44, -62, -53, 10, 1, 1, -8, -8, 64, 505, 514, -71, 568, -62, 496, 10, 100, -80, 640, 10, -80, -53, -62, 442, -116, 28, -44, -62, 10, 28, -62, 1, 10, -116, 136, -44, 514, -116, -44, -62, 514, 10, 100, -44, -53, -80, -8, -8, 64, 64, -512, 496, -80, -224, 496, -8, -80, -80, 640, 496, 568, 64, -8, -512, 4096, 64, 640, -512, 64, -134, -44, -62, 496, 28, -224, 442, -116, -134, 505, 442, -134, 10, -80, -62, -71, -8, 1, -62, 496, -53, 19, -80, 10, 1, 10, -8, 64, 1, -8, 10, -62, 1, 10, 28, -62, 64, -512, -8, -80, 64, -8, 10, -80, -62, -71, -8, 1 },
        { -62, 496, -134, -44, -224, 28, 10, -80, -62, -71, -8, 1, 442, -116, -134, 505, 442, -134, 496, -62, -80, 10, -53, 19, -71, 568, 505, 514, 496, -62, 1, -8, 10, 1, 64, -8, -134, -44, 19, -71, -53, -62, -80, 10, 640, -80, 100, 10, -80, 640, 496, 568, 64, -8, -8, 64, -80, -8, -512, 64, -224, 496, 496, -80, -80, -8, -512, 64, 4096, -512, 640, 64, -116, 136, -44, 514, -116, -44, 442, -116, -53, -62, -44, 28, 28, -62, -62, 10, 10, 1, -44, -53, 514, -62, 100, 10, -80, 10, -8, 1, -62, -71, -8, 1, 64, -8, 10, 1, 64, -8, -512, 64, -80, -8, 28, -62, -62, 10, 10, 1 },
        { -53, -62, 442, -116, 28, -44, -62, 10, 28, -62, 1, 10, -116, 136, -44, 514, -116, -44, -62, 514, 10, 100, -44, -53, 19, -71, -134, -44, -62, -53, 10, 1, 1, -8, -8, 64, 505, 514, -71, 568, -62, 496, 10, 100, -80, 640, 10, -80, 496, -80, -224, 496, -8, -80, -80, -8, -8, 64, 64, -512, 496, 568, -80, 640, -8, 64, 64, 640, -512, 4096, 64, -512, 442, -116, -134, 505, 442, -134, -134, -44, -62, 496, 28, -224, -62, -71, 10, -80, 1, -8, -53, 19, -62, 496, 10, -80, 10, -62, 1, 10, 28, -62, 1, 10, -8, 64, 1, -8, -8, -80, 64, -512, -8, 64, -62, -71, 10, -80, 1, -8 },
        { -134, 505, 442, -116, -134, 442, -62, -71, 10, -80, 1, -8, -134, -44, -62, 496, 28, -224, 19, -53, 10, -80, -62, 496, -44, 514, -116, 136, -44, -116, 28, -62, -62, 10, 10, 1, 442, -116, -53, -62, -44, 28, -53, -44, 100, 10, 514, -62, 496, 568, -80, 640, -8, 64, -224, 496, 496, -80, -80, -8, -8, 64, -80, -8, -512, 64, 64, -512, 640, 64, 4096, -512, 505, 514, -71, 568, -62, 496, -134, -44, 19, -71, -53, -62, 1, -8, 10, 1, 64, -8, 10, -80, 100, 10, 640, -80, -71, -62, 1, -8, 10, -80, -62, 28, 10, 1, -62, 10, -8, 64, -80, -8, -512, 64, 1, -8, 10, 1, 64, -8 },
        { -44, 514, -116, 136, -44, -116, 28, -62, -62, 10, 10, 1, 442, -116, -53, -62, -44, 28, -53, -44, 100, 10, 514, -62, -134, 505, 442, -116, -134, 442, -62, -71, 10, -80, 1, -8, -134, -44, -62, 496, 28, -224, 19, -53, 10, -80, -62, 496, -224, 496, 496, -80, -80, -8, 496, 568, -80, 640, -8, 64, -80, -8, -8, 64, 64, -512, 640, 64, 64, -512, -512, 4096, -134, -44, 19, -71, -53, -62, 505, 514, -71, 568, -62, 496, 10, 1, 1, -8, -8, 64, 100, 10, 10, -80, -80, 640, -62, 28, 10, 1, -62, 10, -71, -62, 1, -8, 10, -80, -80, -8, -8, 64, 64, -512, 10, 1, 1, -8, -8, 64 },
        { -8, 1, 64, -8, 10, 1, -80, 10, -8, 1, -62, -71, -512, 64, 64, -8, -8, -80, -62, 10, 28, -62, 1, 10, -80, 10, 640, -80, 100, 10, 496, -62, 568, -71, 514, 505, 64, -8, -8, 1, 1, 10, -53, -62, -44, -134, -71, 19, 496, -62, -80, 10, -53, 19, -224, 28, 496, -62, -44, -134, -8, 1, -80, 10, -71, -62, 442, -134, -116, 442, 505, -134, 4096, -512, -512, 64, 64, 640, -512, 64, 64, -8, -8, -80, 64, -8, 640, -80, 568, 496, -8, -80, -80, 496, 496, -224, 514, -62, -44, -53, 10, 100, -44, 28, -116, 442, -62, -53, -116, -44, 136, -116, 514, -44, 1, 10, 10, -62, -62, 28 },
        { 1, 10, -8, 64, 1, -8, 10, -62, 1, 10, 28, -62, 64, -512, -8, -80, 64, -8, 10, -80, -62, -71, -8, 1, 10, 100, -80, 640, 10, -80, -62, -53, -71, 19, -44, -134, -8, 64, 1, 10, -8, 1, -62, 496, 514, 505, 568, -71, -62, 514, 10, 100, -44, -53, 28, -44, -62, -53, -116, 442, 1, 10, 10, -62, -62, 28, -116, -44, 136, -116, 514, -44, -512, 4096, 64, 640, -512, 64, 64, -512, -8, -80, 64, -8, -8, -80, -80, 496, 496, -224, 64, -8, 640, -80, 568, 496, -62, 496, -53, 19, -80, 10, 28, -224, -44, -134, 496, -62, 442, -134, -116, 442, 505, -134, -8, 1, -80, 10, -71, -62 },
        { -80, 10, -8, 1, -62, -71, -8, 1, 64, -8, 10, 1, 64, -8, -512, 64, -80, -8, 28, -62, -62, 10, 10, 1, 496, -62, -80, 10, -53, 19, -224, 28, 496, -62, -44, -134, -8, 1, -80, 10, -71, -62, 442, -134, -116, 442, 505, -134, -80, 10, 640, -80, 100, 10, 496, -62, 568, -71, 514, 505, 64, -8, -8, 1, 1, 10, -53, -62, -44, -134, -71, 19, -512, 64, 4096, -512, 640, 64, 64, -8, 640, -80, 568, 496, -512, 64, 64, -8, -8, -80, -80, -8, 496, -224, -80, 496, -44, -53, 514, -62, 100, 10, -116, -44, 136, -116, 514, -44, -44, 28, -116, 442, -62, -53, 10, 1, -62, 28, 10, -62 },
        { 10, -62, 1, 10, 28, -62, 1, 10, -8, 64, 1, -8, -8, -80, 64, -512, -8, 64, -62, -71, 10, -80, 1, -8, -62, 514, 10, 100, -44, -53, 28, -44, -62, -53, -116, 442, 1, 10, 10, -62, -62, 28, -116, -44, 136, -116, 514, -44, 10, 100, -80, 640, 10, -80, -62, -53, -71, 19, -44, -134, -8, 64, 1, 10, -8, 1, -62, 496, 514, 505, 568, -71, 64, 640, -512, 4096, 64, -512, -8, -80, -80, 496, 496, -224, 64, -512, -8, -80, 64, -8, -8, 64, 568, 496, 640, -80, -53, 19, -62, 496, 10, -80, 442, -134, -116, 442, 505, -134, 28, -224, -44, -134, 496, -62, 1, -8, -71, -62, -80, 10 },
        { -71, -62, 1, -8, 10, -80, -62, 28, 10, 1, -62, 10, -8, 64, -80, -8, -512, 64, 1, -8, 10, 1, 64, -8, 19, -53, 10, -80, -62, 496, -134, 442, 505, -134, -116, 442, 1, -8, -71, -62, -80, 10, 28, -224, -44, -134, 496, -62, -53, -44, 100, 10, 514, -62, -44, -116, 514, -44, 136, -116, 10, 1, -62, 28, 10, -62, -44, 28, -116, 442, -62, -53, 64, -512, 640, 64, 4096, -512, -8, 64, 568, 496, 640, -80, -80, -8, 496, -224, -80, 496, -512, 64, 64, -8, -8, -80, 10, -80, 100, 10, 640, -80, -62, 496, 514, 505, 568, -71, -53, -62, -44, -134, -71, 19, 64, -8, -8, 1, 1, 10 },
        { -62, 28, 10, 1, -62, 10, -71, -62, 1, -8, 10, -80, -80, -8, -8, 64, 64, -512, 10, 1, 1, -8, -8, 64, -53, -44, 100, 10, 514, -62, -44, -116, 514, -44, 136, -116, 10, 1, -62, 28, 10, -62, -44, 28, -116, 442, -62, -53, 19, -53, 10, -80, -62, 496, -134, 442, 505, -134, -116, 442, 1, -8, -71, -62, -80, 10, 28, -224, -44, -134, 496, -62, 640, 64, 64, -512, -512, 4096, -80, -8, 496, -224, -80, 496, -8, 64, 568, 496, 640, -80, 64, -512, -8, -80, 64, -8, 100, 10, 10, -80, -80, 640, -53, -62, -44, -134, -71, 19, -62, 496, 514, 505, 568, -71, -8, 64, 1, 10, -8, 1 },
        { -80, 10, 640, -80, 100, 10, 496, -62, 568, -71, 514, 505, 64, -8, -8, 1, 1, 10, -53, -62, -44, -134, -71, 19, -8, 1, 64, -8, 10, 1, -80, 10, -8, 1, -62, -71, -512, 64, 64, -8, -8, -80, -62, 10, 28, -62, 1, 10, -224, 28, 496, -62, -44, -134, 496, -62, -80, 10, -53, 19, -80, 10, -8, 1, -62, -71, -116, 442, 442, -134, -134, 505, -512, 64, 64, -8, -8, -80, 4096, -512, -512, 64, 64, 640, 640, -80, 64, -8, 496, 568, -80, 496, -8, -80, -224, 496, -44, 28, -116, 442, -62, -53, 514, -62, -44, -53, 10, 100, 136, -116, -116, -44, -44, 514, 10, -62, 1, 10, 28, -62 },
        { 10, 100, -80, 640, 10, -80, -62, -53, -71, 19, -44, -134, -8, 64, 1, 10, -8, 1, -62, 496, 514, 505, 568, -71, 1, 10, -8, 64, 1, -8, 10, -62, 1, 10, 28, -62, 64, -512, -8, -80, 64, -8, 10, -80, -62, -71, -8, 1, 28, -44, -62, -53, -116, 442, -62, 514, 10, 100, -44, -53, 10, -62, 1, 10, 28, -62, 136, -116, -116, -44, -44, 514, 64, -512, -8, -80, 64, -8, -512, 4096, 64, 640, -512, 64, -80, 496, -8, -80, -224, 496, 640, -80, 64, -8, 496, 568, 28, -224, -44, -134, 496, -62, -62, 496, -53, 19, -80, 10, -116, 442, 442, -134, -134, 505, -80, 10, -8, 1, -62, -71 },
        { 496, -62, -80, 10, -53, 19, -224, 28, 496, -62, -44, -134, -8, 1, -80, 10, -71, -62, 442, -134, -116, 442, 505, -134, -80, 10, -8, 1, -62, -71, -8, 1, 64, -8, 10, 1, 64, -8, -512, 64, -80, -8, 28, -62, -62, 10, 10, 1, 496, -62, 568, -71, 514, 505, -80, 10, 640, -80, 100, 10, -8, 1, 64, -8, 10, 1, -44, -134, -53, -62, 19, -71, 64, -8, 640, -80, 568, 496, -512, 64, 4096, -512, 640, 64, 64, -8, -512, 64, -80, -8, 496, -224, -80, -8, 496, -80, -116, -44, 136, -116, 514, -44, -44, -53, 514, -62, 100, 10, -116, 442, -44, 28, -53, -62, -62, 28, 10, 1, -62, 10 },
        { -62, 514, 10, 100, -44, -53, 28, -44, -62, -53, -116, 442, 1, 10, 10, -62, -62, 28, -116, -44, 136, -116, 514, -44, 10, -62, 1, 10, 28, -62, 1, 10, -8, 64, 1, -8, -8, -80, 64, -512, -8, 64, -62, -71, 10, -80, 1, -8, -62, -53, -71, 19, -44, -134, 10, 100, -80, 640, 10, -80, 1, 10, -8, 64, 1, -8, 514, 505, -62, 496, -71, 568, -8, -80, -80, 496, 496, -224, 64, 640, -512, 4096, 64, -512, -8, -80, 64, -512, -8, 64, 568, 496, -8, 64, -80, 640, 442, -134, -116, 442, 505, -134, -53, 19, -62, 496, 10, -80, -44, -134, 28, -224, -62, 496, -71, -62, 1, -8, 10, -80 },
        { 19, -53, 10, -80, -62, 496, -134, 442, 505, -134, -116, 442, 1, -8, -71, -62, -80, 10, 28, -224, -44, -134, 496, -62, -71, -62, 1, -8, 10, -80, -62, 28, 10, 1, -62, 10, -8, 64, -80, -8, -512, 64, 1, -8, 10, 1, 64, -8, -44, -116, 514, -44, 136, -116, -53, -44, 100, 10, 514, -62, -62, 28, 10, 1, -62, 10, -116, 442, -44, 28, -53, -62, -8, 64, 568, 496, 640, -80, 64, -512, 640, 64, 4096, -512, 496, -224, -80, -8, 496, -80, 64, -8, -512, 64, -80, -8, -62, 496, 514, 505, 568, -71, 10, -80, 100, 10, 640, -80, -44, -134, -53, -62, 19, -71, -8, 1, 64, -8, 10, 1 },
        { -53, -44, 100, 10, 514, -62, -44, -116, 514, -44, 136, -116, 10, 1, -62, 28, 10, -62, -44, 28, -116, 442, -62, -53, -62, 28, 10, 1, -62, 10, -71, -62, 1, -8, 10, -80, -80, -8, -8, 64, 64, -512, 10, 1, 1, -8, -8, 64, -134, 442, 505, -134, -116, 442, 19, -53, 10, -80, -62, 496, -71, -62, 1, -8, 10, -80, -44, -134, 28, -224, -62, 496, -80, -8, 496, -224, -80, 496, 640, 64, 64, -512, -512, 4096, 568, 496, -8, 64, -80, 640, -8, -80, 64, -512, -8, 64, -53, -62, -44, -134, -71, 19, 100, 10, 10, -80, -80, 640, 514, 505, -62, 496, -71, 568, 1, 10, -8, 64, 1, -8 },
        { 496, -62, 568, -71, 514, 505, -80, 10, 640, -80, 100, 10, -8, 1, 64, -8, 10, 1, -44, -134, -53, -62, 19, -71, -224, 28, 496, -62, -44, -134, 496, -62, -80, 10, -53, 19, -80, 10, -8, 1, -62, -71, -116, 442, 442, -134, -134, 505, -8, 1, 64, -8, 10, 1, -80, 10, -8, 1, -62, -71, -512, 64, 64, -8, -8, -80, -62, 10, 28, -62, 1, 10, 64, -8, -512, 64, -80, -8, 640, -80, 64, -8, 496, 568, 4096, -512, -512, 64, 64, 640, 496, -80, -224, 496, -8, -80, -116, 442, -44, 28, -53, -62, 136, -116, -116, -44, -44, 514, 514, -62, -44, -53, 10, 100, -62, 10, 28, -62, 1, 10 },
        { -62, -53, -71, 19, -44, -134, 10, 100, -80, 640, 10, -80, 1, 10, -8, 64, 1, -8, 514, 505, -62, 496, -71, 568, 28, -44, -62, -53, -116, 442, -62, 514, 10, 100, -44, -53, 10, -62, 1, 10, 28, -62, 136, -116, -116, -44, -44, 514, 1, 10, -8, 64, 1, -8, 10, -62, 1, 10, 28, -62, 64, -512, -8, -80, 64, -8, 10, -80, -62, -71, -8, 1, -8, -80, 64, -512, -8, 64, -80, 496, -8, -80, -224, 496, -512, 4096, 64, 640, -512, 64, -80, 640, 496, 568, 64, -8, -44, -134, 28, -224, -62, 496, -116, 442, 442, -134, -134, 505, -62, 496, -53, 19, -80, 10, 10, -80, -62, -71, -8, 1 },
        { -224, 28, 496, -62, -44, -134, 496, -62, -80, 10, -53, 19, -80, 10, -8, 1, -62, -71, -116, 442, 442, -134, -134, 505, 496, -62, 568, -71, 514, 505, -80, 10, 640, -80, 100, 10, -8, 1, 64, -8, 10, 1, -44, -134, -53, -62, 19, -71, -80, 10, -8, 1, -62, -71, -8, 1, 64, -8, 10, 1, 64, -8, -512, 64, -80, -8, 28, -62, -62, 10, 10, 1, 640, -80, 64, -8, 496, 568, 64, -8, -512, 64, -80, -8, -512, 64, 4096, -512, 640, 64, -224, 496, 496, -80, -80, -8, 136, -116, -116, -44, -44, 514, -116, 442, -44, 28, -53, -62, -44, -53, 514, -62, 100, 10, 28, -62, -62, 10, 10, 1 },
        { 28, -44, -62, -53, -116, 442, -62, 514, 10, 100, -44, -53, 10, -62, 1, 10, 28, -62, 136, -116, -116, -44, -44, 514, -62, -53, -71, 19, -44, -134, 10, 100, -80, 640, 10, -80, 1, 10, -8, 64, 1, -8, 514, 505, -62, 496, -71, 568, 10, -62, 1, 10, 28, -62, 1, 10, -8, 64, 1, -8, -8, -80, 64, -512, -8, 64, -62, -71, 10, -80, 1, -8, -80, 496, -8, -80, -224, 496, -8, -80, 64, -512, -8, 64, 64, 640, -512, 4096, 64, -512, 496, 568, -80, 640, -8, 64, -116, 442, 442, -134, -134, 505, -44, -134, 28, -224, -62, 496, -53, 19, -62, 496, 10, -80, -62, -71, 10, -80, 1, -8 },
        { -134, 442, 505, -134, -116, 442, 19, -53, 10, -80, -62, 496, -71, -62, 1, -8, 10, -80, -44, -134, 28, -224, -62, 496, -44, -116, 514, -44, 136, -116, -53, -44, 100, 10, 514, -62, -62, 28, 10, 1, -62, 10, -116, 442, -44, 28, -53, -62, -71, -62, 1, -8, 10, -80, -62, 28, 10, 1, -62, 10, -8, 64, -80, -8, -512, 64, 1, -8, 10, 1, 64, -8, 568, 496, -8, 64, -80, 640, 496, -224, -80, -8, 496, -80, 64, -512, 640, 64, 4096, -512, -8, 64, -80, -8, -512, 64, 514, 505, -62, 496, -71, 568, -44, -134, -53, -62, 19, -71, 10, -80, 100, 10, 640, -80, 1, -8, 10, 1, 64, -8 },
        { -44, -116, 514, -44, 136, -116, -53, -44, 100, 10, 514, -62, -62, 28, 10, 1, -62, 10, -116, 442, -44, 28, -53, -62, -134, 442, 505, -134, -116, 442, 19, -53, 10, -80, -62, 496, -71, -62, 1, -8, 10, -80, -44, -134, 28, -224, -62, 496, -62, 28, 10, 1, -62, 10, -71, -62, 1, -8, 10, -80, -80, -8, -8, 64, 64, -512, 10, 1, 1, -8, -8, 64, 496, -224, -80, -8, 496, -80, 568, 496, -8, 64, -80, 640, 640, 64, 64, -512, -512, 4096, -80, -8, -8, 64, 64, -512, -44, -134, -53, -62, 19, -71, 514, 505, -62, 496, -71, 568, 100, 10, 10, -80, -80, 640, 10, 1, 1, -8, -8, 64 },
        { 505, 514, -71, 568, -62, 496, -134, -44, 19, -71, -53, -62, 1, -8, 10, 1, 64, -8, 10, -80, 100, 10, 640, -80, -134, -44, -62, 496, 28, -224, 442, -116, -134, 505, 442, -134, 10, -80, -62, -71, -8, 1, -62, 496, -53, 19, -80, 10, 442, -116, -53, -62, -44, 28, -116, 136, -44, 514, -116, -44, -62, 10, 28, -62, 1, 10, 514, -62, -44, -53, 10, 100, -8, 64, -80, -8, -512, 64, -80, 640, 496, 568, 64, -8, 496, -80, -224, 496, -8, -80, 4096, -512, -512, 64, 64, 640, 1, -8, 10, 1, 64, -8, 10, -80, -62, -71, -8, 1, -62, 10, 28, -62, 1, 10, -512, 64, 64, -8, -8, -80 },
        { -134, -44, 19, -71, -53, -62, 505, 514, -71, 568, -62, 496, 10, 1, 1, -8, -8, 64, 100, 10, 10, -80, -80, 640, 442, -116, -53, -62, -44, 28, -116, 136, -44, 514, -116, -44, -62, 10, 28, -62, 1, 10, 514, -62, -44, -53, 10, 100, -134, -44, -62, 496, 28, -224, 442, -116, -134, 505, 442, -134, 10, -80, -62, -71, -8, 1, -62, 496, -53, 19, -80, 10, -80, -8, -8, 64, 64, -512, 496, -80, -224, 496, -8, -80, -80, 640, 496, 568, 64, -8, -512, 4096, 64, 640, -512, 64, 10, 1, 1, -8, -8, 64, -62, 10, 28, -62, 1, 10, 10, -80, -62, -71, -8, 1, 64, -512, -8, -80, 64, -8 },
        { -134, -44, -62, 496, 28, -224, 442, -116, -134, 505, 442, -134, 10, -80, -62, -71, -8, 1, -62, 496, -53, 19, -80, 10, 505, 514, -71, 568, -62, 496, -134, -44, 19, -71, -53, -62, 1, -8, 10, 1, 64, -8, 10, -80, 100, 10, 640, -80, -116, 136, -44, 514, -116, -44, 442, -116, -53, -62, -44, 28, 28, -62, -62, 10, 10, 1, -44, -53, 514, -62, 100, 10, -80, 640, 496, 568, 64, -8, -8, 64, -80, -8, -512, 64, -224, 496, 496, -80, -80, -8, -512, 64, 4096, -512, 640, 64, 10, -80, -62, -71, -8, 1, 1, -8, 10, 1, 64, -8, 28, -62, -62, 10, 10, 1, 64, -8, -512, 64, -80, -8 },
        { 442, -116, -53, -62, -44, 28, -116, 136, -44, 514, -116, -44, -62, 10, 28, -62, 1, 10, 514, -62, -44, -53, 10, 100, -134, -44, 19, -71, -53, -62, 505, 514, -71, 568, -62, 496, 10, 1, 1, -8, -8, 64, 100, 10, 10, -80, -80, 640, 442, -116, -134, 505, 442, -134, -134, -44, -62, 496, 28, -224, -62, -71, 10, -80, 1, -8, -53, 19, -62, 496, 10, -80, 496, -80, -224, 496, -8, -80, -80, -8, -8, 64, 64, -512, 496, 568, -80, 640, -8, 64, 64, 640, -512, 4096, 64, -512, -62, 10, 28, -62, 1, 10, 10, 1, 1, -8, -8, 64, -62, -71, 10, -80, 1, -8, -8, -80, 64, -512, -8, 64 },
        { 442, -116, -134, 505, 442, -134, -134, -44, -62, 496, 28, -224, -62, -71, 10, -80, 1, -8, -53, 19, -62, 496, 10, -80, -116, 136, -44, 514, -116, -44, 442, -116, -53, -62, -44, 28, 28, -62, -62, 10, 10, 1, -44, -53, 514, -62, 100, 10, 505, 514, -71, 568, -62, 496, -134, -44, 19, -71, -53, -62, 1, -8, 10, 1, 64, -8, 10, -80, 100, 10, 640, -80, 496, 568, -80, 640, -8, 64, -224, 496, 496, -80, -80, -8, -8, 64, -80, -8, -512, 64, 64, -512, 640, 64, 4096, -512, -62, -71, 10, -80, 1, -8, 28, -62, -62, 10, 10, 1, 1, -8, 10, 1, 64, -8, -8, 64, -80, -8, -512, 64 },
        { -116, 136, -44, 514, -116, -44, 442, -116, -53, -62, -44, 28, 28, -62, -62, 10, 10, 1, -44, -53, 514, -62, 100, 10, 442, -116, -134, 505, 442, -134, -134, -44, -62, 496, 28, -224, -62, -71, 10, -80, 1, -8, -53, 19, -62, 496, 10, -80, -134, -44, 19, -71, -53, -62, 505, 514, -71, 568, -62, 496, 10, 1, 1, -8, -8, 64, 100, 10, 10, -80, -80, 640, -224, 496, 496, -80, -80, -8, 496, 568, -80, 640, -8, 64, -80, -8, -8, 64, 64, -512, 640, 64, 64, -512, -512, 4096, 28, -62, -62, 10, 10, 1, -62, -71, 10, -80, 1, -8, 10, 1, 1, -8, -8, 64, -80, -8, -8, 64, 64, -512 },
        { 1, -8, 10, 1, 64, -8, 10, -80, -62, -71, -8, 1, -62, 10, 28, -62, 1, 10, -512, 64, 64, -8, -8, -80, 10, -80, 100, 10, 640, -80, -62, 496, 514, 505, 568, -71, -53, -62, -44, -134, -71, 19, 64, -8, -8, 1, 1, 10, -62, 496, -53, 19, -80, 10, 28, -224, -44, -134, 496, -62, 442, -134, -116, 442, 505, -134, -8, 1, -80, 10, -71, -62, 514, -62, -44, -53, 10, 100, -44, 28, -116, 442, -62, -53, -116, -44, 136, -116, 514, -44, 1, 10, 10, -62, -62, 28, 4096, -512, -512, 64, 64, 640, -512, 64, 64, -8, -8, -80, 64, -8, 640, -80, 568, 496, -8, -80, -80, 496, 496, -224 },
        { 10, 1, 1, -8, -8, 64, -62, 10, 28, -62, 1, 10, 10, -80, -62, -71, -8, 1, 64, -512, -8, -80, 64, -8, 100, 10, 10, -80, -80, 640, -53, -62, -44, -134, -71, 19, -62, 496, 514, 505, 568, -71, -8, 64, 1, 10, -8, 1, 514, -62, -44, -53, 10, 100, -44, 28, -116, 442, -62, -53, -116, -44, 136, -116, 514, -44, 1, 10, 10, -62, -62, 28, -62, 496, -53, 19, -80, 10, 28, -224, -44, -134, 496, -62, 442, -134, -116, 442, 505, -134, -8, 1, -80, 10, -71, -62, -512, 4096, 64, 640, -512, 64, 64, -512, -8, -80, 64, -8, -8, -80, -80, 496, 496, -224, 64, -8, 640, -80, 568, 496 },
        { 10, -80, -62, -71, -8, 1, 1, -8, 10, 1, 64, -8, 28, -62, -62, 10, 10, 1, 64, -8, -512, 64, -80, -8, -62, 496, -53, 19, -80, 10, 28, -224, -44, -134, 496, -62, 442, -134, -116, 442, 505, -134, -8, 1, -80, 10, -71, -62, 10, -80, 100, 10, 640, -80, -62, 496, 514, 505, 568, -71, -53, -62, -44, -134, -71, 19, 64, -8, -8, 1, 1, 10, -44, -53, 514, -62, 100, 10, -116, -44, 136, -116, 514, -44, -44, 28, -116, 442, -62, -53, 10, 1, -62, 28, 10, -62, -512, 64, 4096, -512, 640, 64, 64, -8, 640, -80, 568, 496, -512, 64, 64, -8, -8, -80, -80, -8, 496, -224, -80, 496 },
        { -62, 10, 28, -62, 1, 10, 10, 1, 1, -8, -8, 64, -62, -71, 10, -80, 1, -8, -8, -80, 64, -512, -8, 64, 514, -62, -44, -53, 10, 100, -44, 28, -116, 442, -62, -53, -116, -44, 136, -116, 514, -44, 1, 10, 10, -62, -62, 28, 100, 10, 10, -80, -80, 640, -53, -62, -44, -134, -71, 19, -62, 496, 514, 505, 568, -71, -8, 64, 1, 10, -8, 1, -53, 19, -62, 496, 10, -80, 442, -134, -116, 442, 505, -134, 28, -224, -44, -134, 496, -62, 1, -8, -71, -62, -80, 10, 64, 640, -512, 4096, 64, -512, -8, -80, -80, 496, 496, -224, 64, -512, -8, -80, 64, -8, -8, 64, 568, 496, 640, -80 },
        { -62, -71, 10, -80, 1, -8, 28, -62, -62, 10, 10, 1, 1, -8, 10, 1, 64, -8, -8, 64, -80, -8, -512, 64, -53, 19, -62, 496, 10, -80, 442, -134, -116, 442, 505, -134, 28, -224, -44, -134, 496, -62, 1, -8, -71, -62, -80, 10, -44, -53, 514, -62, 100, 10, -116, -44, 136, -116, 514, -44, -44, 28, -116, 442, -62, -53, 10, 1, -62, 28, 10, -62, 10, -80, 100, 10, 640, -80, -62, 496, 514, 505, 568, -71, -53, -62, -44, -134, -71, 19, 64, -8, -8, 1, 1, 10, 64, -512, 640, 64, 4096, -512, -8, 64, 568, 496, 640, -80, -80, -8, 496, -224, -80, 496, -512, 64, 64, -8, -8, -80 },
        { 28, -62, -62, 10, 10, 1, -62, -71, 10, -80, 1, -8, 10, 1, 1, -8, -8, 64, -80, -8, -8, 64, 64, -512, -44, -53, 514, -62, 100, 10, -116, -44, 136, -116, 514, -44, -44, 28, -116, 442, -62, -53, 10, 1, -62, 28, 10, -62, -53, 19, -62, 496, 10, -80, 442, -134, -116, 442, 505, -134, 28, -224, -44, -134, 496, -62, 1, -8, -71, -62, -80, 10, 100, 10, 10, -80, -80, 640, -53, -62, -44, -134, -71, 19, -62, 496, 514, 505, 568, -71, -8, 64, 1, 10, -8, 1, 640, 64, 64, -512, -512, 4096, -80, -8, 496, -224, -80, 496, -8, 64, 568, 496, 640, -80, 64, -512, -8, -80, 64, -8 },
        { 10, -80, 100, 10, 640, -80, -62, 496, 514, 505, 568, -71, -53, -62, -44, -134, -71, 19, 64, -8, -8, 1, 1, 10, 1, -8, 10, 1, 64, -8, 10, -80, -62, -71, -8, 1, -62, 10, 28, -62, 1, 10, -512, 64, 64, -8, -8, -80, 28, -224, -44, -134, 496, -62, -62, 496, -53, 19, -80, 10, -116, 442, 442, -134, -134, 505, -80, 10, -8, 1, -62, -71, -44, 28, -116, 442, -62, -53, 514, -62, -44, -53, 10, 100, 136, -116, -116, -44, -44, 514, 10, -62, 1, 10, 28, -62, -512, 64, 64, -8, -8, -80, 4096, -512, -512, 64, 64, 640, 640, -80, 64, -8, 496, 568, -80, 496, -8, -80, -224, 496 },
        { 100, 10, 10, -80, -80, 640, -53, -62, -44, -134, -71, 19, -62, 496, 514, 505, 568, -71, -8, 64, 1, 10, -8, 1, 10, 1, 1, -8, -8, 64, -62, 10, 28, -62, 1, 10, 10, -80, -62, -71, -8, 1, 64, -512, -8, -80, 64, -8, -44, 28, -116, 442, -62, -53, 514, -62, -44, -53, 10, 100, 136, -116, -116, -44, -44, 514, 10, -62, 1, 10, 28, -62, 28, -224, -44, -134, 496, -62, -62, 496, -53, 19, -80, 10, -116, 442, 442, -134, -134, 505, -80, 10, -8, 1, -62, -71, 64, -512, -8, -80, 64, -8, -512, 4096, 64, 640, -512, 64, -80, 496, -8, -80, -224, 496, 640, -80, 64, -8, 496, 568 },
        { -62, 496, -53, 19, -80, 10, 28, -224, -44, -134, 496, -62, 442, -134, -116, 442, 505, -134, -8, 1, -80, 10, -71, -62, 10, -80, -62, -71, -8, 1, 1, -8, 10, 1, 64, -8, 28, -62, -62, 10, 10, 1, 64, -8, -512, 64, -80, -8, -62, 496, 514, 505, 568, -71, 10, -80, 100, 10, 640, -80, -44, -134, -53, -62, 19, -71, -8, 1, 64, -8, 10, 1, -116, -44, 136, -116, 514, -44, -44, -53, 514, -62, 100, 10, -116, 442, -44, 28, -53, -62, -62, 28, 10, 1, -62, 10, 64, -8, 640, -80, 568, 496, -512, 64, 4096, -512, 640, 64, 64, -8, -512, 64, -80, -8, 496, -224, -80, -8, 496, -80 },
        { 514, -62, -44, -53, 10, 100, -44, 28, -116, 442, -62, -53, -116, -44, 136, -116, 514, -44, 1, 10, 10, -62, -62, 28, -62, 10, 28, -62, 1, 10, 10, 1, 1, -8, -8, 64, -62, -71, 10, -80, 1, -8, -8, -80, 64, -512, -8, 64, -53, -62, -44, -134, -71, 19, 100, 10, 10, -80, -80, 640, 514, 505, -62, 496, -71, 568, 1, 10, -8, 64, 1, -8, 442, -134, -116, 442, 505, -134, -53, 19, -62, 496, 10, -80, -44, -134, 28, -224, -62, 496, -71, -62, 1, -8, 10, -80, -8, -80, -80, 496, 496, -224, 64, 640, -512, 4096, 64, -512, -8, -80, 64, -512, -8, 64, 568, 496, -8, 64, -80, 640 },
        { -53, 19, -62, 496, 10, -80, 442, -134, -116, 442, 505, -134, 28, -224, -44, -134, 496, -62, 1, -8, -71, -62, -80, 10, -62, -71, 10, -80, 1, -8, 28, -62, -62, 10, 10, 1, 1, -8, 10, 1, 64, -8, -8, 64, -80, -8, -512, 64, -116, -44, 136, -116, 514, -44, -44, -53, 514, -62, 100, 10, -116, 442, -44, 28, -53, -62, -62, 28, 10, 1, -62, 10, -62, 496, 514, 505, 568, -71, 10, -80, 100, 10, 640, -80, -44, -134, -53, -62, 19, -71, -8, 1, 64, -8, 10, 1, -8, 64, 568, 496, 640, -80, 64, -512, 640, 64, 4096, -512, 496, -224, -80, -8, 496, -80, 64, -8, -512, 64, -80, -8 },
        { -44, -53, 514, -62, 100, 10, -116, -44, 136, -116, 514, -44, -44, 28, -116, 442, -62, -53, 10, 1, -62, 28, 10, -62, 28, -62, -62, 10, 10, 1, -62, -71, 10, -80, 1, -8, 10, 1, 1, -8, -8, 64, -80, -8, -8, 64, 64, -512, 442, -134, -116, 442, 505, -134, -53, 19, -62, 496, 10, -80, -44, -134, 28, -224, -62, 496, -71, -62, 1, -8, 10, -80, -53, -62, -44, -134, -71, 19, 100, 10, 10, -80, -80, 640, 514, 505, -62, 496, -71, 568, 1, 10, -8, 64, 1, -8, -80, -8, 496, -224, -80, 496, 640, 64, 64, -512, -512, 4096, 568, 496, -8, 64, -80, 640, -8, -80, 64, -512, -8, 64 },
        { -62, 496, 514, 505, 568, -71, 10, -80, 100, 10, 640, -80, -44, -134, -53, -62, 19, -71, -8, 1, 64, -8, 10, 1, 28, -224, -44, -134, 496, -62, -62, 496, -53, 19, -80, 10, -116, 442, 442, -134, -134, 505, -80, 10, -8, 1, -62, -71, 1, -8, 10, 1, 64, -8, 10, -80, -62, -71, -8, 1, -62, 10, 28, -62, 1, 10, -512, 64, 64, -8, -8, -80, -116, 442, -44, 28, -53, -62, 136, -116, -116, -44, -44, 514, 514, -62, -44, -53, 10, 100, -62, 10, 28, -62, 1, 10, 64, -8, -512, 64, -80, -8, 640, -80, 64, -8, 496, 568, 4096, -512, -512, 64, 64, 640, 496, -80, -224, 496, -8, -80 },
        { -53, -62, -44, -134, -71, 19, 100, 10, 10, -80, -80, 640, 514, 505, -62, 496, -71, 568, 1, 10, -8, 64, 1, -8, -44, 28, -116, 442, -62, -53, 514, -62, -44, -53, 10, 100, 136, -116, -116, -44, -44, 514, 10, -62, 1, 10, 28, -62, 10, 1, 1, -8, -8, 64, -62, 10, 28, -62, 1, 10, 10, -80, -62, -71, -8, 1, 64, -512, -8, -80, 64, -8, -44, -134, 28, -224, -62, 496, -116, 442, 442, -134, -134, 505, -62, 496, -53, 19, -80, 10, 10, -80, -62, -71, -8, 1, -8, -80, 64, -512, -8, 64, -80, 496, -8, -80, -224, 496, -512, 4096, 64, 640, -512, 64, -80, 640, 496, 568, 64, -8 },
        { 28, -224, -44, -134, 496, -62, -62, 496, -53, 19, -80, 10, -116, 442, 442, -134, -134, 505, -80, 10, -8, 1, -62, -71, -62, 496, 514, 505, 568, -71, 10, -80, 100, 10, 640, -80, -44, -134, -53, -62, 19, -71, -8, 1, 64, -8, 10, 1, 10, -80, -62, -71, -8, 1, 1, -8, 10, 1, 64, -8, 28, -62, -62, 10, 10, 1, 64, -8, -512, 64, -80, -8, 136, -116, -116, -44, -44, 514, -116, 442, -44, 28, -53, -62, -44, -53, 514, -62, 100, 10, 28, -62, -62, 10, 10, 1, 640, -80, 64, -8, 496, 568, 64, -8, -512, 64, -80, -8, -512, 64, 4096, -512, 640, 64, -224, 496, 496, -80, -80, -8 },
        { -44, 28, -116, 442, -62, -53, 514, -62, -44, -53, 10, 100, 136, -116, -116, -44, -44, 514, 10, -62, 1, 10, 28, -62, -53, -62, -44, -134, -71, 19, 100, 10, 10, -80, -80, 640, 514, 505, -62, 496, -71, 568, 1, 10, -8, 64, 1, -8, -62, 10, 28, -62, 1, 10, 10, 1, 1, -8, -8, 64, -62, -71, 10, -80, 1, -8, -8, -80, 64, -512, -8, 64, -116, 442, 442, -134, -134, 505, -44, -134, 28, -224, -62, 496, -53, 19, -62, 496, 10, -80, -62, -71, 10, -80, 1, -8, -80, 496, -8, -80, -224, 496, -8, -80, 64, -512, -8, 64, 64, 640, -512, 4096, 64, -512, 496, 568, -80, 640, -8, 64 },
        { 442, -134, -116, 442, 505, -134, -53, 19, -62, 496, 10, -80, -44, -134, 28, -224, -62, 496, -71, -62, 1, -8, 10, -80, -116, -44, 136, -116, 514, -44, -44, -53, 514, -62, 100, 10, -116, 442, -44, 28, -53, -62, -62, 28, 10, 1, -62, 10, -62, -71, 10, -80, 1, -8, 28, -62, -62, 10, 10, 1, 1, -8, 10, 1, 64, -8, -8, 64, -80, -8, -512, 64, 514, 505, -62, 496, -71, 568, -44, -134, -53, -62, 19, -71, 10, -80, 100, 10, 640, -80, 1, -8, 10, 1, 64, -8, 568, 496, -8, 64, -80, 640, 496, -224, -80, -8, 496, -80, 64, -512, 640, 64, 4096, -512, -8, 64, -80, -8, -512, 64 },
        { -116, -44, 136, -116, 514, -44, -44, -53, 514, -62, 100, 10, -116, 442, -44, 28, -53, -62, -62, 28, 10, 1, -62, 10, 442, -134, -116, 442, 505, -134, -53, 19, -62, 496, 10, -80, -44, -134, 28, -224, -62, 496, -71, -62, 1, -8, 10, -80, 28, -62, -62, 10, 10, 1, -62, -71, 10, -80, 1, -8, 10, 1, 1, -8, -8, 64, -80, -8, -8, 64, 64, -512, -44, -134, -53, -62, 19, -71, 514, 505, -62, 496, -71, 568, 100, 10, 10, -80, -80, 640, 10, 1, 1, -8, -8, 64, 496, -224, -80, -8, 496, -80, 568, 496, -8, 64, -80, 640, 640, 64, 64, -512, -512, 4096, -80, -8, -8, 64, 64, -512 },
        { 514, 505, -62, 496, -71, 568, -44, -134, -53, -62, 19, -71, 10, -80, 100, 10, 640, -80, 1, -8, 10, 1, 64, -8, -44, -134, 28, -224, -62, 496, -116, 442, 442, -134, -134, 505, -62, 496, -53, 19, -80, 10, 10, -80, -62, -71, -8, 1, -116, 442, -44, 28, -53, -62, 136, -116, -116, -44, -44, 514, 514, -62, -44, -53, 10, 100, -62, 10, 28, -62, 1, 10, 1, -8, 10, 1, 64, -8, 10, -80, -62, -71, -8, 1, -62, 10, 28, -62, 1, 10, -512, 64, 64, -8, -8, -80, -8, 64, -80, -8, -512, 64, -80, 640, 496, 568, 64, -8, 496, -80, -224, 496, -8, -80, 4096, -512, -512, 64, 64, 640 },
        { -44, -134, -53, -62, 19, -71, 514, 505, -62, 496, -71, 568, 100, 10, 10, -80, -80, 640, 10, 1, 1, -8, -8, 64, -116, 442, -44, 28, -53, -62, 136, -116, -116, -44, -44, 514, 514, -62, -44, -53, 10, 100, -62, 10, 28, -62, 1, 10, -44, -134, 28, -224, -62, 496, -116, 442, 442, -134, -134, 505, -62, 496, -53, 19, -80, 10, 10, -80, -62, -71, -8, 1, 10, 1, 1, -8, -8, 64, -62, 10, 28, -62, 1, 10, 10, -80, -62, -71, -8, 1, 64, -512, -8, -80, 64, -8, -80, -8, -8, 64, 64, -512, 496, -80, -224, 496, -8, -80, -80, 640, 496, 568, 64, -8, -512, 4096, 64, 640, -512, 64 },
        { -44, -134, 28, -224, -62, 496, -116, 442, 442, -134, -134, 505, -62, 496, -53, 19, -80, 10, 10, -80, -62, -71, -8, 1, 514, 505, -62, 496, -71, 568, -44, -134, -53, -62, 19, -71, 10, -80, 100, 10, 640, -80, 1, -8, 10, 1, 64, -8, 136, -116, -116, -44, -44, 514, -116, 442, -44, 28, -53, -62, -44, -53, 514, -62, 100, 10, 28, -62, -62, 10, 10, 1, 10, -80, -62, -71, -8, 1, 1, -8, 10, 1, 64, -8, 28, -62, -62, 10, 10, 1, 64, -8, -512, 64, -80, -8, -80, 640, 496, 568, 64, -8, -8, 64, -80, -8, -512, 64, -224, 496, 496, -80, -80, -8, -512, 64, 4096, -512, 640, 64 },
        { -116, 442, -44, 28, -53, -62, 136, -116, -116, -44, -44, 514, 514, -62, -44, -53, 10, 100, -62, 10, 28, -62, 1, 10, -44, -134, -53, -62, 19, -71, 514, 505, -62, 496, -71, 568, 100, 10, 10, -80, -80, 640, 10, 1, 1, -8, -8, 64, -116, 442, 442, -134, -134, 505, -44, -134, 28, -224, -62, 496, -53, 19, -62, 496, 10, -80, -62, -71, 10, -80, 1, -8, -62, 10, 28, -62, 1, 10, 10, 1, 1, -8, -8, 64, -62, -71, 10, -80, 1, -8, -8, -80, 64, -512, -8, 64, 496, -80, -224, 496, -8, -80, -80, -8, -8, 64, 64, -512, 496, 568, -80, 640, -8, 64, 64, 640, -512, 4096, 64, -512 },
        { -116, 442, 442, -134, -134, 505, -44, -134, 28, -224, -62, 496, -53, 19, -62, 496, 10, -80, -62, -71, 10, -80, 1, -8, 136, -116, -116, -44, -44, 514, -116, 442, -44, 28, -53, -62, -44, -53, 514, -62, 100, 10, 28, -62, -62, 10, 10, 1, 514, 505, -62, 496, -71, 568, -44, -134, -53, -62, 19, -71, 10, -80, 100, 10, 640, -80, 1, -8, 10, 1, 64, -8, -62, -71, 10, -80, 1, -8, 28, -62, -62, 10, 10, 1, 1, -8, 10, 1, 64, -8, -8, 64, -80, -8, -512, 64, 496, 568, -80, 640, -8, 64, -224, 496, 496, -80, -80, -8, -8, 64, -80, -8, -512, 64, 64, -512, 640, 64, 4096, -512 },
        { 136, -116, -116, -44, -44, 514, -116, 442, -44, 28, -53, -62, -44, -53, 514, -62, 100, 10, 28, -62, -62, 10, 10, 1, -116, 442, 442, -134, -134, 505, -44, -134, 28, -224, -62, 496, -53, 19, -62, 496, 10, -80, -62, -71, 10, -80, 1, -8, -44, -134, -53, -62, 19, -71, 514, 505, -62, 496, -71, 568, 100, 10, 10, -80, -80, 640, 10, 1, 1, -8, -8, 64, 28, -62, -62, 10, 10, 1, -62, -71, 10, -80, 1, -8, 10, 1, 1, -8, -8, 64, -80, -8, -8, 64, 64, -512, -224, 496, 496, -80, -80, -8, 496, 568, -80, 640, -8, 64, -80, -8, -8, 64, 64, -512, 640, 64, 64, -512, -512, 4096 } }; // 2-D array[120][120]

#ifndef MGONGPUCPP_GPUIMPL
      // Pre-compute a constexpr triangular color matrix properly normalized #475
      struct TriangularNormalizedColorMatrix
      {
        // See https://stackoverflow.com/a/34465458
        __host__ __device__ constexpr TriangularNormalizedColorMatrix()
          : value()
        {
          for( int icol = 0; icol < ncolor; icol++ )
          {
            // Diagonal terms
            value[icol][icol] = cf[icol][icol] / denom[icol];
            // Off-diagonal terms
            for( int jcol = icol + 1; jcol < ncolor; jcol++ )
              value[icol][jcol] = 2 * cf[icol][jcol] / denom[icol];
          }
        }
        fptype2 value[ncolor][ncolor];
      };
      static constexpr auto cf2 = TriangularNormalizedColorMatrix();
#endif

#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
      if( iParity == 0 ) // NB: first page is 0! skip even pages, compute on odd pages
      {
        // Mixed fptypes: delay color algebra and ME updates to next (odd) ipagV
        for( int icol = 0; icol < ncolor; icol++ )
          jamp_sv_previous[icol] = jamp_sv[icol];
        MEs_previous = MEs;
        continue; // go to next iParity in the loop: skip color algebra and ME update on odd pages
      }
      fptype_sv deltaMEs_previous = { 0 };
#endif

      // Sum and square the color flows to get the matrix element
      // (compute |M|^2 by squaring |M|, taking into account colours)
      // Sum and square the color flows to get the matrix element
      // (compute |M|^2 by squaring |M|, taking into account colours)
      fptype_sv deltaMEs = { 0 }; // all zeros https://en.cppreference.com/w/c/language/array_initialization#Notes

      // Use the property that M is a real matrix (see #475):
      // we can rewrite the quadratic form (A-iB)(M)(A+iB) as AMA - iBMA + iBMA + BMB = AMA + BMB
      // In addition, on C++ use the property that M is symmetric (see #475),
      // and also use constexpr to compute "2*" and "/denom[icol]" once and for all at compile time:
      // we gain (not a factor 2...) in speed here as we only loop over the up diagonal part of the matrix.
      // Strangely, CUDA is slower instead, so keep the old implementation for the moment.
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
      fptype2_sv jampR_sv[ncolor] = { 0 };
      fptype2_sv jampI_sv[ncolor] = { 0 };
      for( int icol = 0; icol < ncolor; icol++ )
      {
        jampR_sv[icol] = fpvmerge( cxreal( jamp_sv_previous[icol] ), cxreal( jamp_sv[icol] ) );
        jampI_sv[icol] = fpvmerge( cximag( jamp_sv_previous[icol] ), cximag( jamp_sv[icol] ) );
      }
#endif
      for( int icol = 0; icol < ncolor; icol++ )
      {
        //if( debug ) printf( "calculate_wavefunctions... icol=%d\n", icol );
#ifndef MGONGPUCPP_GPUIMPL
        // === C++ START ===
        // Diagonal terms
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
        fptype2_sv& jampRi_sv = jampR_sv[icol];
        fptype2_sv& jampIi_sv = jampI_sv[icol];
#else
        fptype2_sv jampRi_sv = (fptype2_sv)( cxreal( jamp_sv[icol] ) );
        fptype2_sv jampIi_sv = (fptype2_sv)( cximag( jamp_sv[icol] ) );
#endif
        fptype2_sv ztempR_sv = cf2.value[icol][icol] * jampRi_sv;
        fptype2_sv ztempI_sv = cf2.value[icol][icol] * jampIi_sv;
        // Off-diagonal terms
        for( int jcol = icol + 1; jcol < ncolor; jcol++ )
        {
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
          fptype2_sv& jampRj_sv = jampR_sv[jcol];
          fptype2_sv& jampIj_sv = jampI_sv[jcol];
#else
          fptype2_sv jampRj_sv = (fptype2_sv)( cxreal( jamp_sv[jcol] ) );
          fptype2_sv jampIj_sv = (fptype2_sv)( cximag( jamp_sv[jcol] ) );
#endif
          ztempR_sv += cf2.value[icol][jcol] * jampRj_sv;
          ztempI_sv += cf2.value[icol][jcol] * jampIj_sv;
        }
        fptype2_sv deltaMEs2 = ( jampRi_sv * ztempR_sv + jampIi_sv * ztempI_sv ); // may underflow #831
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
        deltaMEs_previous += fpvsplit0( deltaMEs2 );
        deltaMEs += fpvsplit1( deltaMEs2 );
#else
        deltaMEs += deltaMEs2;
#endif
        // === C++ END ===
#else
        // === CUDA START ===
        fptype2_sv ztempR_sv = { 0 };
        fptype2_sv ztempI_sv = { 0 };
        for( int jcol = 0; jcol < ncolor; jcol++ )
        {
          fptype2_sv jampRj_sv = cxreal( jamp_sv[jcol] );
          fptype2_sv jampIj_sv = cximag( jamp_sv[jcol] );
          ztempR_sv += cf[icol][jcol] * jampRj_sv;
          ztempI_sv += cf[icol][jcol] * jampIj_sv;
        }
        deltaMEs += ( ztempR_sv * cxreal( jamp_sv[icol] ) + ztempI_sv * cximag( jamp_sv[icol] ) ) / denom[icol];
        // === CUDA END ===
#endif
      }

      // *** STORE THE RESULTS ***

      // NB: calculate_wavefunctions ADDS |M|^2 for a given ihel to the running sum of |M|^2 over helicities for the given event(s)
      fptype_sv& MEs_sv = E_ACCESS::kernelAccess( MEs );
      MEs_sv += deltaMEs; // fix #435
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
      fptype_sv& MEs_sv_previous = E_ACCESS::kernelAccess( MEs_previous );
      MEs_sv_previous += deltaMEs_previous;
#endif
      /*
#ifdef MGONGPUCPP_GPUIMPL
      if ( cNGoodHel > 0 ) printf( "calculate_wavefunctions: ievt=%6d ihel=%2d me_running=%f\n", blockDim.x * blockIdx.x + threadIdx.x, ihel, MEs_sv );
#else
#ifdef MGONGPU_CPPSIMD
      if( cNGoodHel > 0 )
        for( int ieppV = 0; ieppV < neppV; ieppV++ )
          printf( "calculate_wavefunctions: ievt=%6d ihel=%2d me_running=%f\n", ievt0 + ieppV, ihel, MEs_sv[ieppV] );
#else
      if ( cNGoodHel > 0 ) printf( "calculate_wavefunctions: ievt=%6d ihel=%2d me_running=%f\n", ievt0, ihel, MEs_sv );
#endif
#endif
      */
    } // END LOOP ON IPARITY
    mgDebug( 1, __FUNCTION__ );
    return;
  }

  //--------------------------------------------------------------------------

  CPPProcess::CPPProcess( bool verbose,
                          bool debug )
    : m_verbose( verbose )
    , m_debug( debug )
#ifndef MGONGPU_HARDCODE_PARAM
    , m_pars( 0 )
#endif
    , m_masses()
  {
    // Helicities for the process [NB do keep 'static' for this constexpr array, see issue #283]
    // *** NB There is no automatic check yet that these are in the same order as Fortran! #569 ***
    static constexpr short tHel[ncomb][npar] = {
      { -1, -1, -1, 1, -1, -1, -1 },
      { -1, -1, -1, 1, -1, -1, 1 },
      { -1, -1, -1, 1, -1, 1, -1 },
      { -1, -1, -1, 1, -1, 1, 1 },
      { -1, -1, -1, 1, 1, -1, -1 },
      { -1, -1, -1, 1, 1, -1, 1 },
      { -1, -1, -1, 1, 1, 1, -1 },
      { -1, -1, -1, 1, 1, 1, 1 },
      { -1, -1, -1, -1, -1, -1, -1 },
      { -1, -1, -1, -1, -1, -1, 1 },
      { -1, -1, -1, -1, -1, 1, -1 },
      { -1, -1, -1, -1, -1, 1, 1 },
      { -1, -1, -1, -1, 1, -1, -1 },
      { -1, -1, -1, -1, 1, -1, 1 },
      { -1, -1, -1, -1, 1, 1, -1 },
      { -1, -1, -1, -1, 1, 1, 1 },
      { -1, -1, 1, 1, -1, -1, -1 },
      { -1, -1, 1, 1, -1, -1, 1 },
      { -1, -1, 1, 1, -1, 1, -1 },
      { -1, -1, 1, 1, -1, 1, 1 },
      { -1, -1, 1, 1, 1, -1, -1 },
      { -1, -1, 1, 1, 1, -1, 1 },
      { -1, -1, 1, 1, 1, 1, -1 },
      { -1, -1, 1, 1, 1, 1, 1 },
      { -1, -1, 1, -1, -1, -1, -1 },
      { -1, -1, 1, -1, -1, -1, 1 },
      { -1, -1, 1, -1, -1, 1, -1 },
      { -1, -1, 1, -1, -1, 1, 1 },
      { -1, -1, 1, -1, 1, -1, -1 },
      { -1, -1, 1, -1, 1, -1, 1 },
      { -1, -1, 1, -1, 1, 1, -1 },
      { -1, -1, 1, -1, 1, 1, 1 },
      { -1, 1, -1, 1, -1, -1, -1 },
      { -1, 1, -1, 1, -1, -1, 1 },
      { -1, 1, -1, 1, -1, 1, -1 },
      { -1, 1, -1, 1, -1, 1, 1 },
      { -1, 1, -1, 1, 1, -1, -1 },
      { -1, 1, -1, 1, 1, -1, 1 },
      { -1, 1, -1, 1, 1, 1, -1 },
      { -1, 1, -1, 1, 1, 1, 1 },
      { -1, 1, -1, -1, -1, -1, -1 },
      { -1, 1, -1, -1, -1, -1, 1 },
      { -1, 1, -1, -1, -1, 1, -1 },
      { -1, 1, -1, -1, -1, 1, 1 },
      { -1, 1, -1, -1, 1, -1, -1 },
      { -1, 1, -1, -1, 1, -1, 1 },
      { -1, 1, -1, -1, 1, 1, -1 },
      { -1, 1, -1, -1, 1, 1, 1 },
      { -1, 1, 1, 1, -1, -1, -1 },
      { -1, 1, 1, 1, -1, -1, 1 },
      { -1, 1, 1, 1, -1, 1, -1 },
      { -1, 1, 1, 1, -1, 1, 1 },
      { -1, 1, 1, 1, 1, -1, -1 },
      { -1, 1, 1, 1, 1, -1, 1 },
      { -1, 1, 1, 1, 1, 1, -1 },
      { -1, 1, 1, 1, 1, 1, 1 },
      { -1, 1, 1, -1, -1, -1, -1 },
      { -1, 1, 1, -1, -1, -1, 1 },
      { -1, 1, 1, -1, -1, 1, -1 },
      { -1, 1, 1, -1, -1, 1, 1 },
      { -1, 1, 1, -1, 1, -1, -1 },
      { -1, 1, 1, -1, 1, -1, 1 },
      { -1, 1, 1, -1, 1, 1, -1 },
      { -1, 1, 1, -1, 1, 1, 1 },
      { 1, -1, -1, 1, -1, -1, -1 },
      { 1, -1, -1, 1, -1, -1, 1 },
      { 1, -1, -1, 1, -1, 1, -1 },
      { 1, -1, -1, 1, -1, 1, 1 },
      { 1, -1, -1, 1, 1, -1, -1 },
      { 1, -1, -1, 1, 1, -1, 1 },
      { 1, -1, -1, 1, 1, 1, -1 },
      { 1, -1, -1, 1, 1, 1, 1 },
      { 1, -1, -1, -1, -1, -1, -1 },
      { 1, -1, -1, -1, -1, -1, 1 },
      { 1, -1, -1, -1, -1, 1, -1 },
      { 1, -1, -1, -1, -1, 1, 1 },
      { 1, -1, -1, -1, 1, -1, -1 },
      { 1, -1, -1, -1, 1, -1, 1 },
      { 1, -1, -1, -1, 1, 1, -1 },
      { 1, -1, -1, -1, 1, 1, 1 },
      { 1, -1, 1, 1, -1, -1, -1 },
      { 1, -1, 1, 1, -1, -1, 1 },
      { 1, -1, 1, 1, -1, 1, -1 },
      { 1, -1, 1, 1, -1, 1, 1 },
      { 1, -1, 1, 1, 1, -1, -1 },
      { 1, -1, 1, 1, 1, -1, 1 },
      { 1, -1, 1, 1, 1, 1, -1 },
      { 1, -1, 1, 1, 1, 1, 1 },
      { 1, -1, 1, -1, -1, -1, -1 },
      { 1, -1, 1, -1, -1, -1, 1 },
      { 1, -1, 1, -1, -1, 1, -1 },
      { 1, -1, 1, -1, -1, 1, 1 },
      { 1, -1, 1, -1, 1, -1, -1 },
      { 1, -1, 1, -1, 1, -1, 1 },
      { 1, -1, 1, -1, 1, 1, -1 },
      { 1, -1, 1, -1, 1, 1, 1 },
      { 1, 1, -1, 1, -1, -1, -1 },
      { 1, 1, -1, 1, -1, -1, 1 },
      { 1, 1, -1, 1, -1, 1, -1 },
      { 1, 1, -1, 1, -1, 1, 1 },
      { 1, 1, -1, 1, 1, -1, -1 },
      { 1, 1, -1, 1, 1, -1, 1 },
      { 1, 1, -1, 1, 1, 1, -1 },
      { 1, 1, -1, 1, 1, 1, 1 },
      { 1, 1, -1, -1, -1, -1, -1 },
      { 1, 1, -1, -1, -1, -1, 1 },
      { 1, 1, -1, -1, -1, 1, -1 },
      { 1, 1, -1, -1, -1, 1, 1 },
      { 1, 1, -1, -1, 1, -1, -1 },
      { 1, 1, -1, -1, 1, -1, 1 },
      { 1, 1, -1, -1, 1, 1, -1 },
      { 1, 1, -1, -1, 1, 1, 1 },
      { 1, 1, 1, 1, -1, -1, -1 },
      { 1, 1, 1, 1, -1, -1, 1 },
      { 1, 1, 1, 1, -1, 1, -1 },
      { 1, 1, 1, 1, -1, 1, 1 },
      { 1, 1, 1, 1, 1, -1, -1 },
      { 1, 1, 1, 1, 1, -1, 1 },
      { 1, 1, 1, 1, 1, 1, -1 },
      { 1, 1, 1, 1, 1, 1, 1 },
      { 1, 1, 1, -1, -1, -1, -1 },
      { 1, 1, 1, -1, -1, -1, 1 },
      { 1, 1, 1, -1, -1, 1, -1 },
      { 1, 1, 1, -1, -1, 1, 1 },
      { 1, 1, 1, -1, 1, -1, -1 },
      { 1, 1, 1, -1, 1, -1, 1 },
      { 1, 1, 1, -1, 1, 1, -1 },
      { 1, 1, 1, -1, 1, 1, 1 } };
#ifdef MGONGPUCPP_GPUIMPL
    gpuMemcpyToSymbol( cHel, tHel, ncomb * npar * sizeof( short ) );
#else
    memcpy( cHel, tHel, ncomb * npar * sizeof( short ) );
#endif
    fpeEnable(); // enable SIGFPE traps for Floating Point Exceptions
  }

  //--------------------------------------------------------------------------

  CPPProcess::~CPPProcess() {}

  //--------------------------------------------------------------------------

#ifndef MGONGPU_HARDCODE_PARAM
  // Initialize process (with parameters read from user cards)
  void
  CPPProcess::initProc( const std::string& param_card_name )
  {
    // Instantiate the model class and set parameters that stay fixed during run
    m_pars = Parameters_sm::getInstance();
    SLHAReader slha( param_card_name, m_verbose );
    m_pars->setIndependentParameters( slha );
    m_pars->setIndependentCouplings();
    //m_pars->setDependentParameters(); // now computed event-by-event (running alphas #373)
    //m_pars->setDependentCouplings(); // now computed event-by-event (running alphas #373)
    if( m_verbose )
    {
      m_pars->printIndependentParameters();
      m_pars->printIndependentCouplings();
      //m_pars->printDependentParameters(); // now computed event-by-event (running alphas #373)
      //m_pars->printDependentCouplings(); // now computed event-by-event (running alphas #373)
    }
    // Set external particle masses for this matrix element
    m_masses.push_back( m_pars->ZERO );
    m_masses.push_back( m_pars->ZERO );
    m_masses.push_back( m_pars->mdl_MT );
    m_masses.push_back( m_pars->mdl_MT );
    m_masses.push_back( m_pars->ZERO );
    m_masses.push_back( m_pars->ZERO );
    m_masses.push_back( m_pars->ZERO );
    // Read physics parameters like masses and couplings from user configuration files (static: initialize once)
    // Then copy them to CUDA constant memory (issue #39) or its C++ emulation in file-scope static memory
    const fptype tIPD[nIPD] = { (fptype)m_pars->mdl_MT, (fptype)m_pars->mdl_WT };
    //const cxtype tIPC[0] = { ... }; // nIPC=0
#ifdef MGONGPUCPP_GPUIMPL
    gpuMemcpyToSymbol( cIPD, tIPD, nIPD * sizeof( fptype ) );
    //gpuMemcpyToSymbol( cIPC, tIPC, 0 * sizeof( cxtype ) ); // nIPC=0
#ifdef MGONGPUCPP_NBSMINDEPPARAM_GT_0
    if( Parameters_sm::nBsmIndepParam > 0 )
      gpuMemcpyToSymbol( bsmIndepParam, m_pars->mdl_bsmIndepParam, Parameters_sm::nBsmIndepParam * sizeof( double ) );
#endif
#else
    memcpy( cIPD, tIPD, nIPD * sizeof( fptype ) );
    //memcpy( cIPC, tIPC, nIPC * sizeof( cxtype ) ); // nIPC=0
#ifdef MGONGPUCPP_NBSMINDEPPARAM_GT_0
    if( Parameters_sm::nBsmIndepParam > 0 )
      memcpy( bsmIndepParam, m_pars->mdl_bsmIndepParam, Parameters_sm::nBsmIndepParam * sizeof( double ) );
#endif
#endif
    //for ( int i=0; i<nIPD; i++ ) std::cout << std::setprecision(17) << "tIPD[i] = " << tIPD[i] << std::endl;
    //for ( int i=0; i<Parameters_sm::nBsmIndepParam; i++ ) std::cout << std::setprecision(17) << "m_pars->mdl_bsmIndepParam[i] = " << m_pars->mdl_bsmIndepParam[i] << std::endl;
  }
#else
  // Initialize process (with hardcoded parameters)
  void
  CPPProcess::initProc( const std::string& /*param_card_name*/ )
  {
    // Use hardcoded physics parameters
    if( m_verbose )
    {
      Parameters_sm::printIndependentParameters();
      Parameters_sm::printIndependentCouplings();
      //Parameters_sm::printDependentParameters(); // now computed event-by-event (running alphas #373)
      //Parameters_sm::printDependentCouplings(); // now computed event-by-event (running alphas #373)
    }
    // Set external particle masses for this matrix element
    m_masses.push_back( Parameters_sm::ZERO );
    m_masses.push_back( Parameters_sm::ZERO );
    m_masses.push_back( Parameters_sm::mdl_MT );
    m_masses.push_back( Parameters_sm::mdl_MT );
    m_masses.push_back( Parameters_sm::ZERO );
    m_masses.push_back( Parameters_sm::ZERO );
    m_masses.push_back( Parameters_sm::ZERO );
  }
#endif

  //--------------------------------------------------------------------------

  // Retrieve the compiler that was used to build this module
  const std::string
  CPPProcess::getCompiler()
  {
    std::stringstream out;
    // CUDA version (NVCC)
    // [Use __NVCC__ instead of MGONGPUCPP_GPUIMPL here!]
    // [This tests if 'nvcc' was used even to build a .cc file, even if not necessarily 'nvcc -x cu' for a .cu file]
    // [Check 'nvcc --compiler-options -dM -E dummy.c | grep CUDA': see https://stackoverflow.com/a/53713712]
#ifdef __NVCC__
#if defined __CUDACC_VER_MAJOR__ && defined __CUDACC_VER_MINOR__ && defined __CUDACC_VER_BUILD__
    out << "nvcc " << __CUDACC_VER_MAJOR__ << "." << __CUDACC_VER_MINOR__ << "." << __CUDACC_VER_BUILD__;
#else
    out << "nvcc UNKNOWN";
#endif
    out << " (";
#endif
    // ICX version (either as CXX or as host compiler inside NVCC)
#if defined __INTEL_COMPILER
#error "icc is no longer supported: please use icx"
#elif defined __INTEL_LLVM_COMPILER // alternative: __INTEL_CLANG_COMPILER
    out << "icx " << __INTEL_LLVM_COMPILER;
#ifdef __NVCC__
    out << ", ";
#else
    out << " (";
#endif
#endif
    // CLANG version (either as CXX or as host compiler inside NVCC or inside ICX)
#if defined __clang__
#if defined __clang_major__ && defined __clang_minor__ && defined __clang_patchlevel__
#ifdef __APPLE__
    out << "Apple clang " << __clang_major__ << "." << __clang_minor__ << "." << __clang_patchlevel__;
#else
    out << "clang " << __clang_major__ << "." << __clang_minor__ << "." << __clang_patchlevel__;
    /*
    // === AV 26-Jan-2024 DISABLE THIS CODE (START)
    // === AV 26-Jan-2024 First, it is totally wrong to assume that the CXX environment variable is used in the build!
    // === AV 26-Jan-2024 Second and worse, here we need build time values, while CXX in this code is evaluated at runtime!
    // GCC toolchain version inside CLANG
    std::string tchainout;
    std::string tchaincmd = "readelf -p .comment $(${CXX} -print-libgcc-file-name) |& grep 'GCC: (GNU)' | grep -v Warning | sort -u | awk '{print $5}'";
    std::unique_ptr<FILE, decltype( &pclose )> tchainpipe( popen( tchaincmd.c_str(), "r" ), pclose );
    if( !tchainpipe ) throw std::runtime_error( "`readelf ...` failed?" );
    std::array<char, 128> tchainbuf;
    while( fgets( tchainbuf.data(), tchainbuf.size(), tchainpipe.get() ) != nullptr ) tchainout += tchainbuf.data();
    tchainout.pop_back(); // remove trailing newline
#if defined __NVCC__ or defined __INTEL_LLVM_COMPILER
    out << ", gcc " << tchainout;
#else
    out << " (gcc " << tchainout << ")";
#endif
    // === AV 26-Jan-2024 DISABLE THIS CODE (END)
    */
#endif
#else
    out << "clang UNKNOWKN";
#endif
#else
    // GCC version (either as CXX or as host compiler inside NVCC)
#if defined __GNUC__ && defined __GNUC_MINOR__ && defined __GNUC_PATCHLEVEL__
    out << "gcc " << __GNUC__ << "." << __GNUC_MINOR__ << "." << __GNUC_PATCHLEVEL__;
#else
    out << "gcc UNKNOWKN";
#endif
#endif
#if defined __NVCC__ or defined __INTEL_LLVM_COMPILER
    out << ")";
#endif
    return out.str();
  }

  //--------------------------------------------------------------------------

  __global__ void /* clang-format off */
  computeDependentCouplings( const fptype* allgs, // input: Gs[nevt]
                             fptype* allcouplings // output: couplings[nevt*ndcoup*2]
#ifndef MGONGPUCPP_GPUIMPL
                             , const int nevt     // input: #events (for cuda: nevt == ndim == gpublocks*gputhreads)
#endif
  ) /* clang-format on */
  {
#ifdef MGONGPUCPP_GPUIMPL
    using namespace mg5amcGpu;
    using G_ACCESS = DeviceAccessGs;
    using C_ACCESS = DeviceAccessCouplings;
    G2COUP<G_ACCESS, C_ACCESS>( allgs, allcouplings, bsmIndepParam );
#else
    using namespace mg5amcCpu;
    using G_ACCESS = HostAccessGs;
    using C_ACCESS = HostAccessCouplings;
    for( int ipagV = 0; ipagV < nevt / neppV; ++ipagV )
    {
      const int ievt0 = ipagV * neppV;
      const fptype* gs = MemoryAccessGs::ieventAccessRecordConst( allgs, ievt0 );
      fptype* couplings = MemoryAccessCouplings::ieventAccessRecord( allcouplings, ievt0 );
      G2COUP<G_ACCESS, C_ACCESS>( gs, couplings, bsmIndepParam );
    }
#endif
  }

  //--------------------------------------------------------------------------

#ifdef MGONGPUCPP_GPUIMPL /* clang-format off */
  __global__ void
  sigmaKin_getGoodHel( const fptype* allmomenta,   // input: momenta[nevt*npar*4]
                       const fptype* allcouplings, // input: couplings[nevt*ndcoup*2]
                       fptype* allMEs,             // output: allMEs[nevt], |M|^2 final_avg_over_helicities
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
                       fptype* allNumerators,      // output: multichannel numerators[nevt], running_sum_over_helicities
                       fptype* allDenominators,    // output: multichannel denominators[nevt], running_sum_over_helicities
#endif
                       bool* isGoodHel )           // output: isGoodHel[ncomb] - device array (CUDA implementation)
  {                                                         /* clang-format on */
    const int ievt = blockDim.x * blockIdx.x + threadIdx.x; // index of event (thread) in grid
    for( int ihel = 0; ihel < ncomb; ihel++ )
    {
      // NEW IMPLEMENTATION OF GETGOODHEL (#630): RESET THE RUNNING SUM OVER HELICITIES TO 0 BEFORE ADDING A NEW HELICITY
      allMEs[ievt] = 0;
      // NB: calculate_wavefunctions ADDS |M|^2 for a given ihel to the running sum of |M|^2 over helicities for the given event(s)
      constexpr fptype_sv* jamp2_sv = nullptr; // no need for color selection during helicity filtering
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      constexpr unsigned int channelId = 0; // disable multichannel single-diagram enhancement
      calculate_wavefunctions( ihel, allmomenta, allcouplings, allMEs, channelId, allNumerators, allDenominators, jamp2_sv );
#else
      calculate_wavefunctions( ihel, allmomenta, allcouplings, allMEs, jamp2_sv );
#endif
      if( allMEs[ievt] != 0 ) // NEW IMPLEMENTATION OF GETGOODHEL (#630): COMPARE EACH HELICITY CONTRIBUTION TO 0
      {
        //if ( !isGoodHel[ihel] ) std::cout << "sigmaKin_getGoodHel ihel=" << ihel << " TRUE" << std::endl;
        isGoodHel[ihel] = true;
      }
    }
  }
#else
  void
  sigmaKin_getGoodHel( const fptype* allmomenta,   // input: momenta[nevt*npar*4]
                       const fptype* allcouplings, // input: couplings[nevt*ndcoup*2]
                       fptype* allMEs,             // output: allMEs[nevt], |M|^2 final_avg_over_helicities
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
                       fptype* allNumerators,      // output: multichannel numerators[nevt], running_sum_over_helicities
                       fptype* allDenominators,    // output: multichannel denominators[nevt], running_sum_over_helicities
#endif
                       bool* isGoodHel,            // output: isGoodHel[ncomb] - host array (C++ implementation)
                       const int nevt )            // input: #events (for cuda: nevt == ndim == gpublocks*gputhreads)
  {
    //assert( (size_t)(allmomenta) % mgOnGpu::cppAlign == 0 ); // SANITY CHECK: require SIMD-friendly alignment [COMMENT OUT TO TEST MISALIGNED ACCESS]
    //assert( (size_t)(allMEs) % mgOnGpu::cppAlign == 0 ); // SANITY CHECK: require SIMD-friendly alignment [COMMENT OUT TO TEST MISALIGNED ACCESS]
    // Allocate arrays at build time to contain at least 16 events (or at least neppV events if neppV>16, e.g. in future VPUs)
    constexpr int maxtry0 = std::max( 16, neppV ); // 16, but at least neppV (otherwise the npagV loop does not even start)
    // Loop over only nevt events if nevt is < 16 (note that nevt is always >= neppV)
    assert( nevt >= neppV );
    const int maxtry = std::min( maxtry0, nevt ); // 16, but at most nevt (avoid invalid memory access if nevt<maxtry0)

    // HELICITY LOOP: CALCULATE WAVEFUNCTIONS
    const int npagV = maxtry / neppV;
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
    // Mixed fptypes #537: float for color algebra and double elsewhere
    // Delay color algebra and ME updates (only on even pages)
    assert( npagV % 2 == 0 );     // SANITY CHECK for mixed fptypes: two neppV-pages are merged to one 2*neppV-page
    const int npagV2 = npagV / 2; // loop on two SIMD pages (neppV events) at a time
#else
    const int npagV2 = npagV;            // loop on one SIMD page (neppV events) at a time
#endif
    for( int ipagV2 = 0; ipagV2 < npagV2; ++ipagV2 )
    {
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
      const int ievt00 = ipagV2 * neppV * 2; // loop on two SIMD pages (neppV events) at a time
#else
      const int ievt00 = ipagV2 * neppV; // loop on one SIMD page (neppV events) at a time
#endif
      for( int ihel = 0; ihel < ncomb; ihel++ )
      {
        // NEW IMPLEMENTATION OF GETGOODHEL (#630): RESET THE RUNNING SUM OVER HELICITIES TO 0 BEFORE ADDING A NEW HELICITY
        for( int ieppV = 0; ieppV < neppV; ++ieppV )
        {
          const int ievt = ievt00 + ieppV;
          allMEs[ievt] = 0;
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
          const int ievt2 = ievt00 + ieppV + neppV;
          allMEs[ievt2] = 0;
#endif
        }
        constexpr fptype_sv* jamp2_sv = nullptr; // no need for color selection during helicity filtering
        //std::cout << "sigmaKin_getGoodHel ihel=" << ihel << ( isGoodHel[ihel] ? " true" : " false" ) << std::endl;
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
        constexpr unsigned int channelId = 0; // disable multichannel single-diagram enhancement
        calculate_wavefunctions( ihel, allmomenta, allcouplings, allMEs, channelId, allNumerators, allDenominators, jamp2_sv, ievt00 );
#else
        calculate_wavefunctions( ihel, allmomenta, allcouplings, allMEs, jamp2_sv, ievt00 );
#endif
        for( int ieppV = 0; ieppV < neppV; ++ieppV )
        {
          const int ievt = ievt00 + ieppV;
          if( allMEs[ievt] != 0 ) // NEW IMPLEMENTATION OF GETGOODHEL (#630): COMPARE EACH HELICITY CONTRIBUTION TO 0
          {
            //if ( !isGoodHel[ihel] ) std::cout << "sigmaKin_getGoodHel ihel=" << ihel << " TRUE" << std::endl;
            isGoodHel[ihel] = true;
          }
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
          const int ievt2 = ievt00 + ieppV + neppV;
          if( allMEs[ievt2] != 0 ) // NEW IMPLEMENTATION OF GETGOODHEL (#630): COMPARE EACH HELICITY CONTRIBUTION TO 0
          {
            //if ( !isGoodHel[ihel] ) std::cout << "sigmaKin_getGoodHel ihel=" << ihel << " TRUE" << std::endl;
            isGoodHel[ihel] = true;
          }
#endif
        }
      }
    }
  }
#endif

  //--------------------------------------------------------------------------

  int                                          // output: nGoodHel (the number of good helicity combinations out of ncomb)
  sigmaKin_setGoodHel( const bool* isGoodHel ) // input: isGoodHel[ncomb] - host array (CUDA and C++)
  {
    int nGoodHel = 0;
    int goodHel[ncomb] = { 0 }; // all zeros https://en.cppreference.com/w/c/language/array_initialization#Notes
    for( int ihel = 0; ihel < ncomb; ihel++ )
    {
      //std::cout << "sigmaKin_setGoodHel ihel=" << ihel << ( isGoodHel[ihel] ? " true" : " false" ) << std::endl;
      if( isGoodHel[ihel] )
      {
        goodHel[nGoodHel] = ihel;
        nGoodHel++;
      }
    }
#ifdef MGONGPUCPP_GPUIMPL
    gpuMemcpyToSymbol( cNGoodHel, &nGoodHel, sizeof( int ) );
    gpuMemcpyToSymbol( cGoodHel, goodHel, ncomb * sizeof( int ) );
#else
    cNGoodHel = nGoodHel;
    for( int ihel = 0; ihel < ncomb; ihel++ ) cGoodHel[ihel] = goodHel[ihel];
#endif
    return nGoodHel;
  }

  //--------------------------------------------------------------------------
  // Evaluate |M|^2, part independent of incoming flavour

  __global__ void /* clang-format off */
  sigmaKin( const fptype* allmomenta,           // input: momenta[nevt*npar*4]
            const fptype* allcouplings,         // input: couplings[nevt*ndcoup*2]
            const fptype* allrndhel,            // input: random numbers[nevt] for helicity selection
            const fptype* allrndcol,            // input: random numbers[nevt] for color selection
            fptype* allMEs,                     // output: allMEs[nevt], |M|^2 final_avg_over_helicities
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
            const unsigned int* allChannelIds,  // input: multichannel channelIds[nevt] (1 to #diagrams); nullptr to disable single-diagram enhancement (fix #899/#911)
            fptype* allNumerators,              // output: multichannel numerators[nevt], running_sum_over_helicities
            fptype* allDenominators,            // output: multichannel denominators[nevt], running_sum_over_helicities
#endif
            int* allselhel,                     // output: helicity selection[nevt]
            int* allselcol                      // output: helicity selection[nevt]
#ifndef MGONGPUCPP_GPUIMPL
            , const int nevt                    // input: #events (for cuda: nevt == ndim == gpublocks*gputhreads)
#endif
            ) /* clang-format on */
  {
    mgDebugInitialise();

    // SANITY CHECKS for cudacpp code generation (see issues #272 and #343 and PRs #619, #626, #360, #396 and #754)
    // These variable are not used anywhere else in the code and their scope is limited to this sanity check
    {
      // nprocesses == 2 may happen for "mirror processes" such as P0_uux_ttx within pp_tt012j (see PR #754)
      constexpr int nprocesses = 1;
      static_assert( nprocesses == 1 || nprocesses == 2, "Assume nprocesses == 1 or 2" );
      constexpr int process_id = 1; // code generation source: standalone_cudacpp
      static_assert( process_id == 1, "Assume process_id == 1" );
    }

    // Denominators: spins, colors and identical particles
    constexpr int helcolDenominators[1] = { 1536 }; // assume nprocesses == 1 (#272 and #343)

#ifdef MGONGPUCPP_GPUIMPL
    // Remember: in CUDA this is a kernel for one event, in c++ this processes n events
    const int ievt = blockDim.x * blockIdx.x + threadIdx.x; // index of event (thread) in grid
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
    using CID_ACCESS = DeviceAccessChannelIds; // non-trivial access: buffer includes all events
#endif
#else
    //assert( (size_t)(allmomenta) % mgOnGpu::cppAlign == 0 ); // SANITY CHECK: require SIMD-friendly alignment [COMMENT OUT TO TEST MISALIGNED ACCESS]
    //assert( (size_t)(allMEs) % mgOnGpu::cppAlign == 0 ); // SANITY CHECK: require SIMD-friendly alignment [COMMENT OUT TO TEST MISALIGNED ACCESS]
    using E_ACCESS = HostAccessMatrixElements; // non-trivial access: buffer includes all events
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
    using NUM_ACCESS = HostAccessNumerators;   // non-trivial access: buffer includes all events
    using DEN_ACCESS = HostAccessDenominators; // non-trivial access: buffer includes all events
    using CID_ACCESS = HostAccessChannelIds;   // non-trivial access: buffer includes all events
#endif
#endif

    // Start sigmaKin_lines

#include "GpuAbstraction.h"

    // === PART 0 - INITIALISATION (before calculate_wavefunctions) ===
    // Reset the "matrix elements" - running sums of |M|^2 over helicities for the given event
#ifdef MGONGPUCPP_GPUIMPL
    allMEs[ievt] = 0;
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
    allNumerators[ievt] = 0;
    allDenominators[ievt] = 0;
#endif
#else
    const int npagV = nevt / neppV;
    for( int ipagV = 0; ipagV < npagV; ++ipagV )
    {
      const int ievt0 = ipagV * neppV;
      fptype* MEs = E_ACCESS::ieventAccessRecord( allMEs, ievt0 );
      fptype_sv& MEs_sv = E_ACCESS::kernelAccess( MEs );
      MEs_sv = fptype_sv{ 0 };
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      fptype* numerators = NUM_ACCESS::ieventAccessRecord( allNumerators, ievt0 );
      fptype* denominators = DEN_ACCESS::ieventAccessRecord( allDenominators, ievt0 );
      fptype_sv& numerators_sv = NUM_ACCESS::kernelAccess( numerators );
      fptype_sv& denominators_sv = DEN_ACCESS::kernelAccess( denominators );
      numerators_sv = fptype_sv{ 0 };
      denominators_sv = fptype_sv{ 0 };
#endif
    }
#endif

    // === PART 1 - HELICITY LOOP: CALCULATE WAVEFUNCTIONS ===
    // (in both CUDA and C++, using precomputed good helicities)

#ifdef MGONGPUCPP_GPUIMPL // CUDA OR C++

    // *** START OF PART 1a - CUDA (one event per GPU thread) ***
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
    // SCALAR channelId for the current event (CUDA) or for the whole SIMD event page (C++)
    // The cudacpp implementation ASSUMES (and checks! #898) that all channelIds are the same in a SIMD event page
    unsigned int channelId = 0; // disable multichannel single-diagram enhancement unless allChannelIds != nullptr
    if( allChannelIds != nullptr )
    {
      const unsigned int* channelIds = allChannelIds;                            // fix #899 (distinguish channelIds and allChannelIds)
      const uint_sv channelIds_sv = CID_ACCESS::kernelAccessConst( channelIds ); // fix #895 (compute this only once for all diagrams)
      // NB: channelIds_sv is a scalar in CUDA
      channelId = channelIds_sv;
      assert( channelId > 0 ); // SANITY CHECK: scalar channelId must be > 0 if multichannel is enabled (allChannelIds != nullptr)
    }
#endif
    // Running sum of partial amplitudes squared for event by event color selection (#402)
    // (for the single event processed in calculate_wavefunctions)
    fptype_sv jamp2_sv[nParity * ncolor] = { 0 };
    fptype MEs_ighel[ncomb] = { 0 }; // sum of MEs for all good helicities up to ighel (for this event)
    for( int ighel = 0; ighel < cNGoodHel; ighel++ )
    {
      const int ihel = cGoodHel[ighel];
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      calculate_wavefunctions( ihel, allmomenta, allcouplings, allMEs, channelId, allNumerators, allDenominators, jamp2_sv );
#else
      calculate_wavefunctions( ihel, allmomenta, allcouplings, allMEs, jamp2_sv );
#endif
      MEs_ighel[ighel] = allMEs[ievt];
    }
    // Event-by-event random choice of helicity #403
    //printf( "sigmaKin: ievt=%4d rndhel=%f\n", ievt, allrndhel[ievt] );
    for( int ighel = 0; ighel < cNGoodHel; ighel++ )
    {
      if( allrndhel[ievt] < ( MEs_ighel[ighel] / MEs_ighel[cNGoodHel - 1] ) )
      {
        const int ihelF = cGoodHel[ighel] + 1; // NB Fortran [1,ncomb], cudacpp [0,ncomb-1]
        allselhel[ievt] = ihelF;
        //printf( "sigmaKin: ievt=%4d ihel=%4d\n", ievt, ihelF );
        break;
      }
    }
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
    // Event-by-event random choice of color #402
    if( channelId != 0 ) // no event-by-event choice of color if channelId == 0 (fix FPE #783)
    {
      if( channelId > mgOnGpu::nchannels )
      {
        printf( "INTERNAL ERROR! Cannot choose an event-by-event random color for channelId=%d which is greater than nchannels=%d\n", channelId, mgOnGpu::nchannels );
        assert( channelId <= mgOnGpu::nchannels ); // SANITY CHECK #919 #910
      }
      // NB (see #877): in the array channel2iconfig, the input index uses C indexing (channelId -1), the output index uses F indexing (iconfig)
      // NB (see #917): mgOnGpu::channel2iconfig returns an int (which may be -1), not an unsigned int!
      const int iconfig = mgOnGpu::channel2iconfig[channelId - 1]; // map N_diagrams to N_config <= N_diagrams configs (fix LHE color mismatch #856: see also #826, #852, #853)
      if( iconfig <= 0 )
      {
        printf( "INTERNAL ERROR! Cannot choose an event-by-event random color for channelId=%d which has no associated SDE iconfig\n", channelId );
        assert( iconfig > 0 ); // SANITY CHECK #917
      }
      else if( iconfig > (int)mgOnGpu::nconfigSDE )
      {
        printf( "INTERNAL ERROR! Cannot choose an event-by-event random color for channelId=%d (invalid SDE iconfig=%d\n > nconfig=%d)", channelId, iconfig, mgOnGpu::nconfigSDE );
        assert( iconfig <= (int)mgOnGpu::nconfigSDE ); // SANITY CHECK #917
      }
      fptype targetamp[ncolor] = { 0 };
      // NB (see #877): explicitly use 'icolC' rather than 'icol' to indicate that icolC uses C indexing in [0, N_colors-1]
      for( int icolC = 0; icolC < ncolor; icolC++ )
      {
        if( icolC == 0 )
          targetamp[icolC] = 0;
        else
          targetamp[icolC] = targetamp[icolC - 1];
        // NB (see #877): in the array icolamp, the input index uses C indexing (iconfig -1)
        if( mgOnGpu::icolamp[iconfig - 1][icolC] ) targetamp[icolC] += jamp2_sv[icolC];
      }
      //printf( "sigmaKin: ievt=%4d rndcol=%f\n", ievt, allrndcol[ievt] );
      for( int icolC = 0; icolC < ncolor; icolC++ )
      {
        if( allrndcol[ievt] < ( targetamp[icolC] / targetamp[ncolor - 1] ) )
        {
          allselcol[ievt] = icolC + 1; // NB Fortran [1,ncolor], cudacpp [0,ncolor-1]
          //printf( "sigmaKin: ievt=%d icol=%d\n", ievt, icolC+1 );
          break;
        }
      }
    }
    else
    {
      allselcol[ievt] = 0; // no color selected in Fortran range [1,ncolor] if channelId == 0 (see #931)
    }
#endif
    // *** END OF PART 1a - CUDA (one event per GPU thread) ***

#else // CUDA OR C++

    // *** START OF PART 1b - C++ (loop on event pages)
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
    // Mixed fptypes #537: float for color algebra and double elsewhere
    // Delay color algebra and ME updates (only on even pages)
    assert( npagV % 2 == 0 );     // SANITY CHECK for mixed fptypes: two neppV-pages are merged to one 2*neppV-page
    const int npagV2 = npagV / 2; // loop on two SIMD pages (neppV events) at a time
#else
    const int npagV2 = npagV;            // loop on one SIMD page (neppV events) at a time
#endif
#ifdef _OPENMP
    // OMP multithreading #575 (NB: tested only with gcc11 so far)
    // See https://www.openmp.org/specifications/
    // - default(none): no variables are shared by default
    // - shared: as the name says
    // - private: give each thread its own copy, without initialising
    // - firstprivate: give each thread its own copy, and initialise with value from outside
#define _OMPLIST0 allcouplings, allMEs, allmomenta, allrndcol, allrndhel, allselcol, allselhel, cGoodHel, cNGoodHel, npagV2
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
#define _OMPLIST1 , allDenominators, allNumerators, allChannelIds, mgOnGpu::icolamp, mgOnGpu::channel2iconfig
#else
#define _OMPLIST1
#endif
#pragma omp parallel for default( none ) shared( _OMPLIST0 _OMPLIST1 )
#undef _OMPLIST0
#undef _OMPLIST1
#endif // _OPENMP
    for( int ipagV2 = 0; ipagV2 < npagV2; ++ipagV2 )
    {
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
      const int ievt00 = ipagV2 * neppV * 2; // loop on two SIMD pages (neppV events) at a time
#else
      const int ievt00 = ipagV2 * neppV; // loop on one SIMD page (neppV events) at a time
#endif
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      // SCALAR channelId for the whole SIMD neppV2 event page (C++), i.e. one or two neppV event page(s)
      // The cudacpp implementation ASSUMES (and checks! #898) that all channelIds are the same in a neppV2 SIMD event page
      // **NB! in "mixed" precision, using SIMD, calculate_wavefunctions computes MEs for TWO neppV pages with a single channelId! #924
      unsigned int channelId = 0; // disable multichannel single-diagram enhancement unless allChannelIds != nullptr
      if( allChannelIds != nullptr )
      {
        // First - and/or only - neppV page of channels (iParity=0 => ievt0 = ievt00 + 0 * neppV)
        const unsigned int* channelIds = CID_ACCESS::ieventAccessRecordConst( allChannelIds, ievt00 ); // fix bug #899/#911
        uint_sv channelIds_sv = CID_ACCESS::kernelAccessConst( channelIds );                           // fix #895 (compute this only once for all diagrams)
#ifndef MGONGPU_CPPSIMD
        // NB: channelIds_sv is a scalar in no-SIMD C++
        channelId = channelIds_sv;
#else
        // NB: channelIds_sv is a vector in SIMD C++
        channelId = channelIds_sv[0];    // element[0]
        for( int i = 1; i < neppV; ++i ) // elements[1...neppV-1]
        {
          assert( channelId == channelIds_sv[i] ); // SANITY CHECK #898: check that all events in a SIMD vector have the same channelId
        }
#endif
        assert( channelId > 0 ); // SANITY CHECK: scalar channelId must be > 0 if multichannel is enabled (allChannelIds != nullptr)
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
        // Second neppV page of channels (iParity=1 => ievt0 = ievt00 + 1 * neppV)
        const unsigned int* channelIds2 = CID_ACCESS::ieventAccessRecordConst( allChannelIds, ievt00 + neppV ); // fix bug #899/#911
        uint_v channelIds2_v = CID_ACCESS::kernelAccessConst( channelIds2 );                                    // fix #895 (compute this only once for all diagrams)
        // **NB! in "mixed" precision, using SIMD, calculate_wavefunctions computes MEs for TWO neppV pages with a single channelId! #924
        for( int i = 0; i < neppV; ++i )
        {
          assert( channelId == channelIds2_v[i] ); // SANITY CHECKS #898 #924: all events in the 2nd SIMD vector have the same channelId as that of the 1st SIMD vector
        }
#endif
      }
#endif
      // Running sum of partial amplitudes squared for event by event color selection (#402)
      // (jamp2[nParity][ncolor][neppV] for the SIMD vector - or the two SIMD vectors - of events processed in calculate_wavefunctions)
      fptype_sv jamp2_sv[nParity * ncolor] = { 0 };
      fptype_sv MEs_ighel[ncomb] = { 0 };  // sum of MEs for all good helicities up to ighel (for the first - and/or only - neppV page)
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
      fptype_sv MEs_ighel2[ncomb] = { 0 }; // sum of MEs for all good helicities up to ighel (for the second neppV page)
#endif
      for( int ighel = 0; ighel < cNGoodHel; ighel++ )
      {
        const int ihel = cGoodHel[ighel];
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
        // **NB! in "mixed" precision, using SIMD, calculate_wavefunctions computes MEs for TWO neppV pages with a single channelId! #924
        calculate_wavefunctions( ihel, allmomenta, allcouplings, allMEs, channelId, allNumerators, allDenominators, jamp2_sv, ievt00 );
#else
        calculate_wavefunctions( ihel, allmomenta, allcouplings, allMEs, jamp2_sv, ievt00 );
#endif
        MEs_ighel[ighel] = E_ACCESS::kernelAccess( E_ACCESS::ieventAccessRecord( allMEs, ievt00 ) );
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
        MEs_ighel2[ighel] = E_ACCESS::kernelAccess( E_ACCESS::ieventAccessRecord( allMEs, ievt00 + neppV ) );
#endif
      }
      // Event-by-event random choice of helicity #403
      for( int ieppV = 0; ieppV < neppV; ++ieppV )
      {
        const int ievt = ievt00 + ieppV;
        //printf( "sigmaKin: ievt=%4d rndhel=%f\n", ievt, allrndhel[ievt] );
        for( int ighel = 0; ighel < cNGoodHel; ighel++ )
        {
#if defined MGONGPU_CPPSIMD
          const bool okhel = allrndhel[ievt] < ( MEs_ighel[ighel][ieppV] / MEs_ighel[cNGoodHel - 1][ieppV] );
#else
          const bool okhel = allrndhel[ievt] < ( MEs_ighel[ighel] / MEs_ighel[cNGoodHel - 1] );
#endif
          if( okhel )
          {
            const int ihelF = cGoodHel[ighel] + 1; // NB Fortran [1,ncomb], cudacpp [0,ncomb-1]
            allselhel[ievt] = ihelF;
            //printf( "sigmaKin: ievt=%4d ihel=%4d\n", ievt, ihelF );
            break;
          }
        }
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
        const int ievt2 = ievt00 + ieppV + neppV;
        //printf( "sigmaKin: ievt=%4d rndhel=%f\n", ievt2, allrndhel[ievt2] );
        for( int ighel = 0; ighel < cNGoodHel; ighel++ )
        {
          if( allrndhel[ievt2] < ( MEs_ighel2[ighel][ieppV] / MEs_ighel2[cNGoodHel - 1][ieppV] ) )
          {
            const int ihelF = cGoodHel[ighel] + 1; // NB Fortran [1,ncomb], cudacpp [0,ncomb-1]
            allselhel[ievt2] = ihelF;
            //printf( "sigmaKin: ievt=%4d ihel=%4d\n", ievt, ihelF );
            break;
          }
        }
#endif
      }
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL // multichannel enabled (random color choice)
      // Event-by-event random choice of color #402
      if( channelId != 0 ) // no event-by-event choice of color if channelId == 0 (fix FPE #783)
      {
        if( channelId > mgOnGpu::nchannels )
        {
          printf( "INTERNAL ERROR! Cannot choose an event-by-event random color for channelId=%d which is greater than nchannels=%d\n", channelId, mgOnGpu::nchannels );
          assert( channelId <= mgOnGpu::nchannels ); // SANITY CHECK #919 #910
        }
        // NB (see #877): in the array channel2iconfig, the input index uses C indexing (channelId -1), the output index uses F indexing (iconfig)
        // NB (see #917): mgOnGpu::channel2iconfig returns an int (which may be -1), not an unsigned int!
        const int iconfig = mgOnGpu::channel2iconfig[channelId - 1]; // map N_diagrams to N_config <= N_diagrams configs (fix LHE color mismatch #856: see also #826, #852, #853)
        if( iconfig <= 0 )
        {
          printf( "INTERNAL ERROR! Cannot choose an event-by-event random color for channelId=%d which has no associated SDE iconfig\n", channelId );
          assert( iconfig > 0 ); // SANITY CHECK #917
        }
        else if( iconfig > (int)mgOnGpu::nconfigSDE )
        {
          printf( "INTERNAL ERROR! Cannot choose an event-by-event random color for channelId=%d (invalid SDE iconfig=%d\n > nconfig=%d)", channelId, iconfig, mgOnGpu::nconfigSDE );
          assert( iconfig <= (int)mgOnGpu::nconfigSDE ); // SANITY CHECK #917
        }
        fptype_sv targetamp[ncolor] = { 0 };
        // NB (see #877): explicitly use 'icolC' rather than 'icol' to indicate that icolC uses C indexing in [0, N_colors-1]
        for( int icolC = 0; icolC < ncolor; icolC++ )
        {
          if( icolC == 0 )
            targetamp[icolC] = fptype_sv{ 0 };
          else
            targetamp[icolC] = targetamp[icolC - 1];
          if( mgOnGpu::icolamp[iconfig - 1][icolC] ) targetamp[icolC] += jamp2_sv[icolC];
        }
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
        fptype_sv targetamp2[ncolor] = { 0 };
        for( int icolC = 0; icolC < ncolor; icolC++ )
        {
          if( icolC == 0 )
            targetamp2[icolC] = fptype_sv{ 0 };
          else
            targetamp2[icolC] = targetamp2[icolC - 1];
          // NB (see #877): in the array icolamp, the input index uses C indexing (iconfig -1)
          if( mgOnGpu::icolamp[iconfig - 1][icolC] ) targetamp2[icolC] += jamp2_sv[ncolor + icolC];
        }
#endif
        for( int ieppV = 0; ieppV < neppV; ++ieppV )
        {
          const int ievt = ievt00 + ieppV;
          //printf( "sigmaKin: ievt=%4d rndcol=%f\n", ievt, allrndcol[ievt] );
          for( int icolC = 0; icolC < ncolor; icolC++ )
          {
#if defined MGONGPU_CPPSIMD
            // Add volatile here to avoid SIGFPE crashes in FPTYPE=f cpp512z builds (#845)
            volatile const bool okcol = allrndcol[ievt] < ( targetamp[icolC][ieppV] / targetamp[ncolor - 1][ieppV] );
#else
            const bool okcol = allrndcol[ievt] < ( targetamp[icolC] / targetamp[ncolor - 1] );
#endif
            if( okcol )
            {
              allselcol[ievt] = icolC + 1; // NB Fortran [1,ncolor], cudacpp [0,ncolor-1]
              //printf( "sigmaKin: ievt=%d icol=%d\n", ievt, icolC+1 );
              break;
            }
          }
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
          const int ievt2 = ievt00 + ieppV + neppV;
          //printf( "sigmaKin: ievt=%4d rndcol=%f\n", ievt2, allrndcol[ievt2] );
          for( int icolC = 0; icolC < ncolor; icolC++ )
          {
            if( allrndcol[ievt2] < ( targetamp2[icolC][ieppV] / targetamp2[ncolor - 1][ieppV] ) )
            {
              allselcol[ievt2] = icolC + 1; // NB Fortran [1,ncolor], cudacpp [0,ncolor-1]
              //printf( "sigmaKin: ievt2=%d icol=%d\n", ievt2, icolC+1 );
              break;
            }
          }
#endif
        }
      }
      else
      {
        for( int ieppV = 0; ieppV < neppV; ++ieppV )
        {
          const int ievt = ievt00 + ieppV;
          allselcol[ievt] = 0; // no color selected in Fortran range [1,ncolor] if channelId == 0 (see #931)
#if defined MGONGPU_CPPSIMD and defined MGONGPU_FPTYPE_DOUBLE and defined MGONGPU_FPTYPE2_FLOAT
          const int ievt2 = ievt00 + ieppV + neppV;
          allselcol[ievt2] = 0; // no color selected in Fortran range [1,ncolor] if channelId == 0 (see #931)
#endif
        }
      }
#endif // multichannel enabled (random color choice)
    }
    // *** END OF PART 1b - C++ (loop on event pages)

#endif // CUDA or C++

    // === PART 2 - FINALISATION (after calculate_wavefunctions) ===
    // Get the final |M|^2 as an average over helicities/colors of the running sum of |M|^2 over helicities for the given event
    // [NB 'sum over final spins, average over initial spins', eg see
    // https://www.uzh.ch/cmsssl/physik/dam/jcr:2e24b7b1-f4d7-4160-817e-47b13dbf1d7c/Handout_4_2016-UZH.pdf]
#ifdef MGONGPUCPP_GPUIMPL
    allMEs[ievt] /= helcolDenominators[0];
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
    if( allChannelIds != nullptr ) allMEs[ievt] *= allNumerators[ievt] / allDenominators[ievt]; // fix segfault #892 (not 'channelIds[0] != 0')
#endif
#else
    for( int ipagV = 0; ipagV < npagV; ++ipagV )
    {
      const int ievt0 = ipagV * neppV;
      fptype* MEs = E_ACCESS::ieventAccessRecord( allMEs, ievt0 );
      fptype_sv& MEs_sv = E_ACCESS::kernelAccess( MEs );
      MEs_sv /= helcolDenominators[0];
#ifdef MGONGPU_SUPPORTS_MULTICHANNEL
      if( allChannelIds != nullptr ) // fix segfault #892 (not 'channelIds[0] != 0')
      {
        fptype* numerators = NUM_ACCESS::ieventAccessRecord( allNumerators, ievt0 );
        fptype* denominators = DEN_ACCESS::ieventAccessRecord( allDenominators, ievt0 );
        fptype_sv& numerators_sv = NUM_ACCESS::kernelAccess( numerators );
        fptype_sv& denominators_sv = DEN_ACCESS::kernelAccess( denominators );
        MEs_sv *= numerators_sv / denominators_sv;
      }
#endif
      //for( int ieppV = 0; ieppV < neppV; ieppV++ )
      //{
      //  const unsigned int ievt = ipagV * neppV + ieppV;
      //  printf( "sigmaKin: ievt=%2d me=%f\n", ievt, allMEs[ievt] );
      //}
    }
#endif
    mgDebugFinalise();
  }

  //--------------------------------------------------------------------------

} // end namespace

//==========================================================================
